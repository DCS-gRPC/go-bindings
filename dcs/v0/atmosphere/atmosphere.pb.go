// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.26.0
// 	protoc        v3.18.1
// source: dcs/atmosphere/v0/atmosphere.proto

package atmosphere

import (
	common "github.com/DCS-gRPC/go-bindings/dcs/v0/common"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type GetWindRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The position on the map we want the wind information for.
	// Requires lat/lon/alt fields to be populated, there are
	// no default values
	Position *common.Position `protobuf:"bytes,1,opt,name=position,proto3" json:"position,omitempty"`
}

func (x *GetWindRequest) Reset() {
	*x = GetWindRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dcs_atmosphere_v0_atmosphere_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetWindRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetWindRequest) ProtoMessage() {}

func (x *GetWindRequest) ProtoReflect() protoreflect.Message {
	mi := &file_dcs_atmosphere_v0_atmosphere_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetWindRequest.ProtoReflect.Descriptor instead.
func (*GetWindRequest) Descriptor() ([]byte, []int) {
	return file_dcs_atmosphere_v0_atmosphere_proto_rawDescGZIP(), []int{0}
}

func (x *GetWindRequest) GetPosition() *common.Position {
	if x != nil {
		return x.Position
	}
	return nil
}

type GetWindResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The heading the wind is coming from.
	Heading float32 `protobuf:"fixed32,1,opt,name=heading,proto3" json:"heading,omitempty"`
	// The strength of the wind in meters per second
	Strength float32 `protobuf:"fixed32,2,opt,name=strength,proto3" json:"strength,omitempty"`
}

func (x *GetWindResponse) Reset() {
	*x = GetWindResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dcs_atmosphere_v0_atmosphere_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetWindResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetWindResponse) ProtoMessage() {}

func (x *GetWindResponse) ProtoReflect() protoreflect.Message {
	mi := &file_dcs_atmosphere_v0_atmosphere_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetWindResponse.ProtoReflect.Descriptor instead.
func (*GetWindResponse) Descriptor() ([]byte, []int) {
	return file_dcs_atmosphere_v0_atmosphere_proto_rawDescGZIP(), []int{1}
}

func (x *GetWindResponse) GetHeading() float32 {
	if x != nil {
		return x.Heading
	}
	return 0
}

func (x *GetWindResponse) GetStrength() float32 {
	if x != nil {
		return x.Strength
	}
	return 0
}

type GetWindWithTurbulenceRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The position on the map we want the wind information for.
	// Requires lat/lon/alt fields to be populated, there are
	// no default values
	Position *common.Position `protobuf:"bytes,1,opt,name=position,proto3" json:"position,omitempty"`
}

func (x *GetWindWithTurbulenceRequest) Reset() {
	*x = GetWindWithTurbulenceRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dcs_atmosphere_v0_atmosphere_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetWindWithTurbulenceRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetWindWithTurbulenceRequest) ProtoMessage() {}

func (x *GetWindWithTurbulenceRequest) ProtoReflect() protoreflect.Message {
	mi := &file_dcs_atmosphere_v0_atmosphere_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetWindWithTurbulenceRequest.ProtoReflect.Descriptor instead.
func (*GetWindWithTurbulenceRequest) Descriptor() ([]byte, []int) {
	return file_dcs_atmosphere_v0_atmosphere_proto_rawDescGZIP(), []int{2}
}

func (x *GetWindWithTurbulenceRequest) GetPosition() *common.Position {
	if x != nil {
		return x.Position
	}
	return nil
}

type GetWindWithTurbulenceResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The heading the wind is coming from.
	Heading float32 `protobuf:"fixed32,1,opt,name=heading,proto3" json:"heading,omitempty"`
	// The strength of the wind in meters per second.
	Strength float32 `protobuf:"fixed32,2,opt,name=strength,proto3" json:"strength,omitempty"`
}

func (x *GetWindWithTurbulenceResponse) Reset() {
	*x = GetWindWithTurbulenceResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dcs_atmosphere_v0_atmosphere_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetWindWithTurbulenceResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetWindWithTurbulenceResponse) ProtoMessage() {}

func (x *GetWindWithTurbulenceResponse) ProtoReflect() protoreflect.Message {
	mi := &file_dcs_atmosphere_v0_atmosphere_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetWindWithTurbulenceResponse.ProtoReflect.Descriptor instead.
func (*GetWindWithTurbulenceResponse) Descriptor() ([]byte, []int) {
	return file_dcs_atmosphere_v0_atmosphere_proto_rawDescGZIP(), []int{3}
}

func (x *GetWindWithTurbulenceResponse) GetHeading() float32 {
	if x != nil {
		return x.Heading
	}
	return 0
}

func (x *GetWindWithTurbulenceResponse) GetStrength() float32 {
	if x != nil {
		return x.Strength
	}
	return 0
}

type GetTemperatureAndPressureRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The position on the map we want the wind information for.
	// Requires lat/lon/alt fields to be populated, there are
	// no default values
	Position *common.Position `protobuf:"bytes,1,opt,name=position,proto3" json:"position,omitempty"`
}

func (x *GetTemperatureAndPressureRequest) Reset() {
	*x = GetTemperatureAndPressureRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dcs_atmosphere_v0_atmosphere_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetTemperatureAndPressureRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetTemperatureAndPressureRequest) ProtoMessage() {}

func (x *GetTemperatureAndPressureRequest) ProtoReflect() protoreflect.Message {
	mi := &file_dcs_atmosphere_v0_atmosphere_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetTemperatureAndPressureRequest.ProtoReflect.Descriptor instead.
func (*GetTemperatureAndPressureRequest) Descriptor() ([]byte, []int) {
	return file_dcs_atmosphere_v0_atmosphere_proto_rawDescGZIP(), []int{4}
}

func (x *GetTemperatureAndPressureRequest) GetPosition() *common.Position {
	if x != nil {
		return x.Position
	}
	return nil
}

type GetTemperatureAndPressureResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The temperature in Kelvin
	Temperature float32 `protobuf:"fixed32,1,opt,name=temperature,proto3" json:"temperature,omitempty"`
	// The pressure in Pascals
	Pressure float32 `protobuf:"fixed32,2,opt,name=pressure,proto3" json:"pressure,omitempty"`
}

func (x *GetTemperatureAndPressureResponse) Reset() {
	*x = GetTemperatureAndPressureResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dcs_atmosphere_v0_atmosphere_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetTemperatureAndPressureResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetTemperatureAndPressureResponse) ProtoMessage() {}

func (x *GetTemperatureAndPressureResponse) ProtoReflect() protoreflect.Message {
	mi := &file_dcs_atmosphere_v0_atmosphere_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetTemperatureAndPressureResponse.ProtoReflect.Descriptor instead.
func (*GetTemperatureAndPressureResponse) Descriptor() ([]byte, []int) {
	return file_dcs_atmosphere_v0_atmosphere_proto_rawDescGZIP(), []int{5}
}

func (x *GetTemperatureAndPressureResponse) GetTemperature() float32 {
	if x != nil {
		return x.Temperature
	}
	return 0
}

func (x *GetTemperatureAndPressureResponse) GetPressure() float32 {
	if x != nil {
		return x.Pressure
	}
	return 0
}

var File_dcs_atmosphere_v0_atmosphere_proto protoreflect.FileDescriptor

var file_dcs_atmosphere_v0_atmosphere_proto_rawDesc = []byte{
	0x0a, 0x22, 0x64, 0x63, 0x73, 0x2f, 0x61, 0x74, 0x6d, 0x6f, 0x73, 0x70, 0x68, 0x65, 0x72, 0x65,
	0x2f, 0x76, 0x30, 0x2f, 0x61, 0x74, 0x6d, 0x6f, 0x73, 0x70, 0x68, 0x65, 0x72, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x12, 0x11, 0x64, 0x63, 0x73, 0x2e, 0x61, 0x74, 0x6d, 0x6f, 0x73, 0x70,
	0x68, 0x65, 0x72, 0x65, 0x2e, 0x76, 0x30, 0x1a, 0x1a, 0x64, 0x63, 0x73, 0x2f, 0x63, 0x6f, 0x6d,
	0x6d, 0x6f, 0x6e, 0x2f, 0x76, 0x30, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x22, 0x45, 0x0a, 0x0e, 0x47, 0x65, 0x74, 0x57, 0x69, 0x6e, 0x64, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x33, 0x0a, 0x08, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x64, 0x63, 0x73, 0x2e, 0x63, 0x6f,
	0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x30, 0x2e, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e,
	0x52, 0x08, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x47, 0x0a, 0x0f, 0x47, 0x65,
	0x74, 0x57, 0x69, 0x6e, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x18, 0x0a,
	0x07, 0x68, 0x65, 0x61, 0x64, 0x69, 0x6e, 0x67, 0x18, 0x01, 0x20, 0x01, 0x28, 0x02, 0x52, 0x07,
	0x68, 0x65, 0x61, 0x64, 0x69, 0x6e, 0x67, 0x12, 0x1a, 0x0a, 0x08, 0x73, 0x74, 0x72, 0x65, 0x6e,
	0x67, 0x74, 0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x02, 0x52, 0x08, 0x73, 0x74, 0x72, 0x65, 0x6e,
	0x67, 0x74, 0x68, 0x22, 0x53, 0x0a, 0x1c, 0x47, 0x65, 0x74, 0x57, 0x69, 0x6e, 0x64, 0x57, 0x69,
	0x74, 0x68, 0x54, 0x75, 0x72, 0x62, 0x75, 0x6c, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x33, 0x0a, 0x08, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x64, 0x63, 0x73, 0x2e, 0x63, 0x6f, 0x6d, 0x6d,
	0x6f, 0x6e, 0x2e, 0x76, 0x30, 0x2e, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x08,
	0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x55, 0x0a, 0x1d, 0x47, 0x65, 0x74, 0x57,
	0x69, 0x6e, 0x64, 0x57, 0x69, 0x74, 0x68, 0x54, 0x75, 0x72, 0x62, 0x75, 0x6c, 0x65, 0x6e, 0x63,
	0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x68, 0x65, 0x61,
	0x64, 0x69, 0x6e, 0x67, 0x18, 0x01, 0x20, 0x01, 0x28, 0x02, 0x52, 0x07, 0x68, 0x65, 0x61, 0x64,
	0x69, 0x6e, 0x67, 0x12, 0x1a, 0x0a, 0x08, 0x73, 0x74, 0x72, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x02, 0x52, 0x08, 0x73, 0x74, 0x72, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x22,
	0x57, 0x0a, 0x20, 0x47, 0x65, 0x74, 0x54, 0x65, 0x6d, 0x70, 0x65, 0x72, 0x61, 0x74, 0x75, 0x72,
	0x65, 0x41, 0x6e, 0x64, 0x50, 0x72, 0x65, 0x73, 0x73, 0x75, 0x72, 0x65, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x33, 0x0a, 0x08, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x64, 0x63, 0x73, 0x2e, 0x63, 0x6f, 0x6d, 0x6d,
	0x6f, 0x6e, 0x2e, 0x76, 0x30, 0x2e, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x08,
	0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x61, 0x0a, 0x21, 0x47, 0x65, 0x74, 0x54,
	0x65, 0x6d, 0x70, 0x65, 0x72, 0x61, 0x74, 0x75, 0x72, 0x65, 0x41, 0x6e, 0x64, 0x50, 0x72, 0x65,
	0x73, 0x73, 0x75, 0x72, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x20, 0x0a,
	0x0b, 0x74, 0x65, 0x6d, 0x70, 0x65, 0x72, 0x61, 0x74, 0x75, 0x72, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x02, 0x52, 0x0b, 0x74, 0x65, 0x6d, 0x70, 0x65, 0x72, 0x61, 0x74, 0x75, 0x72, 0x65, 0x12,
	0x1a, 0x0a, 0x08, 0x70, 0x72, 0x65, 0x73, 0x73, 0x75, 0x72, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x02, 0x52, 0x08, 0x70, 0x72, 0x65, 0x73, 0x73, 0x75, 0x72, 0x65, 0x32, 0xf0, 0x02, 0x0a, 0x11,
	0x41, 0x74, 0x6d, 0x6f, 0x73, 0x70, 0x68, 0x65, 0x72, 0x65, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x12, 0x52, 0x0a, 0x07, 0x47, 0x65, 0x74, 0x57, 0x69, 0x6e, 0x64, 0x12, 0x21, 0x2e, 0x64,
	0x63, 0x73, 0x2e, 0x61, 0x74, 0x6d, 0x6f, 0x73, 0x70, 0x68, 0x65, 0x72, 0x65, 0x2e, 0x76, 0x30,
	0x2e, 0x47, 0x65, 0x74, 0x57, 0x69, 0x6e, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x22, 0x2e, 0x64, 0x63, 0x73, 0x2e, 0x61, 0x74, 0x6d, 0x6f, 0x73, 0x70, 0x68, 0x65, 0x72, 0x65,
	0x2e, 0x76, 0x30, 0x2e, 0x47, 0x65, 0x74, 0x57, 0x69, 0x6e, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x7c, 0x0a, 0x15, 0x47, 0x65, 0x74, 0x57, 0x69, 0x6e, 0x64,
	0x57, 0x69, 0x74, 0x68, 0x54, 0x75, 0x72, 0x62, 0x75, 0x6c, 0x65, 0x6e, 0x63, 0x65, 0x12, 0x2f,
	0x2e, 0x64, 0x63, 0x73, 0x2e, 0x61, 0x74, 0x6d, 0x6f, 0x73, 0x70, 0x68, 0x65, 0x72, 0x65, 0x2e,
	0x76, 0x30, 0x2e, 0x47, 0x65, 0x74, 0x57, 0x69, 0x6e, 0x64, 0x57, 0x69, 0x74, 0x68, 0x54, 0x75,
	0x72, 0x62, 0x75, 0x6c, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x30, 0x2e, 0x64, 0x63, 0x73, 0x2e, 0x61, 0x74, 0x6d, 0x6f, 0x73, 0x70, 0x68, 0x65, 0x72, 0x65,
	0x2e, 0x76, 0x30, 0x2e, 0x47, 0x65, 0x74, 0x57, 0x69, 0x6e, 0x64, 0x57, 0x69, 0x74, 0x68, 0x54,
	0x75, 0x72, 0x62, 0x75, 0x6c, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0x00, 0x12, 0x88, 0x01, 0x0a, 0x19, 0x47, 0x65, 0x74, 0x54, 0x65, 0x6d, 0x70, 0x65,
	0x72, 0x61, 0x74, 0x75, 0x72, 0x65, 0x41, 0x6e, 0x64, 0x50, 0x72, 0x65, 0x73, 0x73, 0x75, 0x72,
	0x65, 0x12, 0x33, 0x2e, 0x64, 0x63, 0x73, 0x2e, 0x61, 0x74, 0x6d, 0x6f, 0x73, 0x70, 0x68, 0x65,
	0x72, 0x65, 0x2e, 0x76, 0x30, 0x2e, 0x47, 0x65, 0x74, 0x54, 0x65, 0x6d, 0x70, 0x65, 0x72, 0x61,
	0x74, 0x75, 0x72, 0x65, 0x41, 0x6e, 0x64, 0x50, 0x72, 0x65, 0x73, 0x73, 0x75, 0x72, 0x65, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x34, 0x2e, 0x64, 0x63, 0x73, 0x2e, 0x61, 0x74, 0x6d,
	0x6f, 0x73, 0x70, 0x68, 0x65, 0x72, 0x65, 0x2e, 0x76, 0x30, 0x2e, 0x47, 0x65, 0x74, 0x54, 0x65,
	0x6d, 0x70, 0x65, 0x72, 0x61, 0x74, 0x75, 0x72, 0x65, 0x41, 0x6e, 0x64, 0x50, 0x72, 0x65, 0x73,
	0x73, 0x75, 0x72, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x42, 0x59,
	0x5a, 0x31, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x44, 0x43, 0x53,
	0x2d, 0x67, 0x52, 0x50, 0x43, 0x2f, 0x67, 0x6f, 0x2d, 0x62, 0x69, 0x6e, 0x64, 0x69, 0x6e, 0x67,
	0x73, 0x2f, 0x64, 0x63, 0x73, 0x2f, 0x76, 0x30, 0x2f, 0x61, 0x74, 0x6d, 0x6f, 0x73, 0x70, 0x68,
	0x65, 0x72, 0x65, 0xaa, 0x02, 0x23, 0x52, 0x75, 0x72, 0x6f, 0x75, 0x6e, 0x69, 0x4a, 0x6f, 0x6e,
	0x65, 0x73, 0x2e, 0x44, 0x63, 0x73, 0x2e, 0x47, 0x72, 0x70, 0x63, 0x2e, 0x56, 0x30, 0x2e, 0x41,
	0x74, 0x6d, 0x6f, 0x73, 0x70, 0x68, 0x65, 0x72, 0x65, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x33,
}

var (
	file_dcs_atmosphere_v0_atmosphere_proto_rawDescOnce sync.Once
	file_dcs_atmosphere_v0_atmosphere_proto_rawDescData = file_dcs_atmosphere_v0_atmosphere_proto_rawDesc
)

func file_dcs_atmosphere_v0_atmosphere_proto_rawDescGZIP() []byte {
	file_dcs_atmosphere_v0_atmosphere_proto_rawDescOnce.Do(func() {
		file_dcs_atmosphere_v0_atmosphere_proto_rawDescData = protoimpl.X.CompressGZIP(file_dcs_atmosphere_v0_atmosphere_proto_rawDescData)
	})
	return file_dcs_atmosphere_v0_atmosphere_proto_rawDescData
}

var file_dcs_atmosphere_v0_atmosphere_proto_msgTypes = make([]protoimpl.MessageInfo, 6)
var file_dcs_atmosphere_v0_atmosphere_proto_goTypes = []interface{}{
	(*GetWindRequest)(nil),                    // 0: dcs.atmosphere.v0.GetWindRequest
	(*GetWindResponse)(nil),                   // 1: dcs.atmosphere.v0.GetWindResponse
	(*GetWindWithTurbulenceRequest)(nil),      // 2: dcs.atmosphere.v0.GetWindWithTurbulenceRequest
	(*GetWindWithTurbulenceResponse)(nil),     // 3: dcs.atmosphere.v0.GetWindWithTurbulenceResponse
	(*GetTemperatureAndPressureRequest)(nil),  // 4: dcs.atmosphere.v0.GetTemperatureAndPressureRequest
	(*GetTemperatureAndPressureResponse)(nil), // 5: dcs.atmosphere.v0.GetTemperatureAndPressureResponse
	(*common.Position)(nil),                   // 6: dcs.common.v0.Position
}
var file_dcs_atmosphere_v0_atmosphere_proto_depIdxs = []int32{
	6, // 0: dcs.atmosphere.v0.GetWindRequest.position:type_name -> dcs.common.v0.Position
	6, // 1: dcs.atmosphere.v0.GetWindWithTurbulenceRequest.position:type_name -> dcs.common.v0.Position
	6, // 2: dcs.atmosphere.v0.GetTemperatureAndPressureRequest.position:type_name -> dcs.common.v0.Position
	0, // 3: dcs.atmosphere.v0.AtmosphereService.GetWind:input_type -> dcs.atmosphere.v0.GetWindRequest
	2, // 4: dcs.atmosphere.v0.AtmosphereService.GetWindWithTurbulence:input_type -> dcs.atmosphere.v0.GetWindWithTurbulenceRequest
	4, // 5: dcs.atmosphere.v0.AtmosphereService.GetTemperatureAndPressure:input_type -> dcs.atmosphere.v0.GetTemperatureAndPressureRequest
	1, // 6: dcs.atmosphere.v0.AtmosphereService.GetWind:output_type -> dcs.atmosphere.v0.GetWindResponse
	3, // 7: dcs.atmosphere.v0.AtmosphereService.GetWindWithTurbulence:output_type -> dcs.atmosphere.v0.GetWindWithTurbulenceResponse
	5, // 8: dcs.atmosphere.v0.AtmosphereService.GetTemperatureAndPressure:output_type -> dcs.atmosphere.v0.GetTemperatureAndPressureResponse
	6, // [6:9] is the sub-list for method output_type
	3, // [3:6] is the sub-list for method input_type
	3, // [3:3] is the sub-list for extension type_name
	3, // [3:3] is the sub-list for extension extendee
	0, // [0:3] is the sub-list for field type_name
}

func init() { file_dcs_atmosphere_v0_atmosphere_proto_init() }
func file_dcs_atmosphere_v0_atmosphere_proto_init() {
	if File_dcs_atmosphere_v0_atmosphere_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_dcs_atmosphere_v0_atmosphere_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetWindRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dcs_atmosphere_v0_atmosphere_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetWindResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dcs_atmosphere_v0_atmosphere_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetWindWithTurbulenceRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dcs_atmosphere_v0_atmosphere_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetWindWithTurbulenceResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dcs_atmosphere_v0_atmosphere_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetTemperatureAndPressureRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dcs_atmosphere_v0_atmosphere_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetTemperatureAndPressureResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_dcs_atmosphere_v0_atmosphere_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   6,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_dcs_atmosphere_v0_atmosphere_proto_goTypes,
		DependencyIndexes: file_dcs_atmosphere_v0_atmosphere_proto_depIdxs,
		MessageInfos:      file_dcs_atmosphere_v0_atmosphere_proto_msgTypes,
	}.Build()
	File_dcs_atmosphere_v0_atmosphere_proto = out.File
	file_dcs_atmosphere_v0_atmosphere_proto_rawDesc = nil
	file_dcs_atmosphere_v0_atmosphere_proto_goTypes = nil
	file_dcs_atmosphere_v0_atmosphere_proto_depIdxs = nil
}
