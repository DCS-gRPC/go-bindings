// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.26.0
// 	protoc        v3.18.1
// source: dcs/common/v0/common.proto

package common

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

//*
// The category the object belongs to
//
// All DCS objects are one of the following categories. Unlike many other
// enums created by DCS, this one is not 0 indexed. Therefore we do not
// need to do any modification of the value by incrementing it by one to
// make it work with gRPC and DCS.
//
// See https://wiki.hoggitworld.com/view/DCS_Class_Object for more information
type ObjectCategory int32

const (
	ObjectCategory_OBJECT_CATEGORY_UNSPECIFIED ObjectCategory = 0
	ObjectCategory_OBJECT_CATEGORY_UNIT        ObjectCategory = 1
	ObjectCategory_OBJECT_CATEGORY_WEAPON      ObjectCategory = 2
	ObjectCategory_OBJECT_CATEGORY_STATIC      ObjectCategory = 3
	ObjectCategory_OBJECT_CATEGORY_SCENERY     ObjectCategory = 4
	ObjectCategory_OBJECT_CATEGORY_BASE        ObjectCategory = 5
	ObjectCategory_OBJECT_CATEGORY_CARGO       ObjectCategory = 6
)

// Enum value maps for ObjectCategory.
var (
	ObjectCategory_name = map[int32]string{
		0: "OBJECT_CATEGORY_UNSPECIFIED",
		1: "OBJECT_CATEGORY_UNIT",
		2: "OBJECT_CATEGORY_WEAPON",
		3: "OBJECT_CATEGORY_STATIC",
		4: "OBJECT_CATEGORY_SCENERY",
		5: "OBJECT_CATEGORY_BASE",
		6: "OBJECT_CATEGORY_CARGO",
	}
	ObjectCategory_value = map[string]int32{
		"OBJECT_CATEGORY_UNSPECIFIED": 0,
		"OBJECT_CATEGORY_UNIT":        1,
		"OBJECT_CATEGORY_WEAPON":      2,
		"OBJECT_CATEGORY_STATIC":      3,
		"OBJECT_CATEGORY_SCENERY":     4,
		"OBJECT_CATEGORY_BASE":        5,
		"OBJECT_CATEGORY_CARGO":       6,
	}
)

func (x ObjectCategory) Enum() *ObjectCategory {
	p := new(ObjectCategory)
	*p = x
	return p
}

func (x ObjectCategory) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ObjectCategory) Descriptor() protoreflect.EnumDescriptor {
	return file_dcs_common_v0_common_proto_enumTypes[0].Descriptor()
}

func (ObjectCategory) Type() protoreflect.EnumType {
	return &file_dcs_common_v0_common_proto_enumTypes[0]
}

func (x ObjectCategory) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ObjectCategory.Descriptor instead.
func (ObjectCategory) EnumDescriptor() ([]byte, []int) {
	return file_dcs_common_v0_common_proto_rawDescGZIP(), []int{0}
}

//*
// The category the object belongs to
//
// Some of these are less than obvious. For example an oilrig counts as a
// HELIPAD airfield.
type AirbaseCategory int32

const (
	AirbaseCategory_AIRBASE_CATEGORY_UNSPECIFIED AirbaseCategory = 0
	AirbaseCategory_AIRBASE_CATEGORY_AIRDROME    AirbaseCategory = 1
	AirbaseCategory_AIRBASE_CATEGORY_HELIPAD     AirbaseCategory = 2
	AirbaseCategory_AIRBASE_CATEGORY_SHIP        AirbaseCategory = 3
)

// Enum value maps for AirbaseCategory.
var (
	AirbaseCategory_name = map[int32]string{
		0: "AIRBASE_CATEGORY_UNSPECIFIED",
		1: "AIRBASE_CATEGORY_AIRDROME",
		2: "AIRBASE_CATEGORY_HELIPAD",
		3: "AIRBASE_CATEGORY_SHIP",
	}
	AirbaseCategory_value = map[string]int32{
		"AIRBASE_CATEGORY_UNSPECIFIED": 0,
		"AIRBASE_CATEGORY_AIRDROME":    1,
		"AIRBASE_CATEGORY_HELIPAD":     2,
		"AIRBASE_CATEGORY_SHIP":        3,
	}
)

func (x AirbaseCategory) Enum() *AirbaseCategory {
	p := new(AirbaseCategory)
	*p = x
	return p
}

func (x AirbaseCategory) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (AirbaseCategory) Descriptor() protoreflect.EnumDescriptor {
	return file_dcs_common_v0_common_proto_enumTypes[1].Descriptor()
}

func (AirbaseCategory) Type() protoreflect.EnumType {
	return &file_dcs_common_v0_common_proto_enumTypes[1]
}

func (x AirbaseCategory) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use AirbaseCategory.Descriptor instead.
func (AirbaseCategory) EnumDescriptor() ([]byte, []int) {
	return file_dcs_common_v0_common_proto_rawDescGZIP(), []int{1}
}

//*
// Coalitions in DCS
//
// The coalitions supported by DCS. The NEUTRAL coalition is a relatively new
// one and may not be as supported as the belligerant ones.
type Coalition int32

const (
	// protolint:disable:next ENUM_FIELD_NAMES_ZERO_VALUE_END_WITH
	Coalition_COALITION_ALL     Coalition = 0
	Coalition_COALITION_NEUTRAL Coalition = 1
	Coalition_COALITION_RED     Coalition = 2
	Coalition_COALITION_BLUE    Coalition = 3
)

// Enum value maps for Coalition.
var (
	Coalition_name = map[int32]string{
		0: "COALITION_ALL",
		1: "COALITION_NEUTRAL",
		2: "COALITION_RED",
		3: "COALITION_BLUE",
	}
	Coalition_value = map[string]int32{
		"COALITION_ALL":     0,
		"COALITION_NEUTRAL": 1,
		"COALITION_RED":     2,
		"COALITION_BLUE":    3,
	}
)

func (x Coalition) Enum() *Coalition {
	p := new(Coalition)
	*p = x
	return p
}

func (x Coalition) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Coalition) Descriptor() protoreflect.EnumDescriptor {
	return file_dcs_common_v0_common_proto_enumTypes[2].Descriptor()
}

func (Coalition) Type() protoreflect.EnumType {
	return &file_dcs_common_v0_common_proto_enumTypes[2]
}

func (x Coalition) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Coalition.Descriptor instead.
func (Coalition) EnumDescriptor() ([]byte, []int) {
	return file_dcs_common_v0_common_proto_rawDescGZIP(), []int{2}
}

//*
// Countries in DCS
//
// Every country belongs to a coalition and this association is set per mission.
// The values of these enums are correct such that they will work with DCS
// however the text names have been Made to follow gRPC conventions to to aid
// in language bindings and acronyms have been replaced with their full english
// names to aid in recognition. In some cases this can be a big change
// (e.g. USSR -> Soviet Union).
//
// We have also added a dummy value for the missing enum value 14 to prevent
// possible issues in the various language bindings
//
// See https://wiki.hoggitworld.com/view/DCS_enum_country for more information
type Country int32

const (
	Country_COUNTRY_UNSPECIFIED                    Country = 0
	Country_COUNTRY_RUSSIA                         Country = 1
	Country_COUNTRY_UKRAINE                        Country = 2
	Country_COUNTRY_UNITED_STATES_OF_AMERICA       Country = 3
	Country_COUNTRY_TURKEY                         Country = 4
	Country_COUNTRY_UNITED_KINGDOM                 Country = 5
	Country_COUNTRY_FRANCE                         Country = 6
	Country_COUNTRY_GERMANY                        Country = 7
	Country_COUNTRY_AGGRESSORS                     Country = 8
	Country_COUNTRY_CANADA                         Country = 9
	Country_COUNTRY_SPAIN                          Country = 10
	Country_COUNTRY_THE_NETHERLANDS                Country = 11
	Country_COUNTRY_BELGIUM                        Country = 12
	Country_COUNTRY_NORWAY                         Country = 13
	Country_COUNTRY_DENMARK                        Country = 14
	Country_COUNTRY_UNUSED                         Country = 15
	Country_COUNTRY_ISRAEL                         Country = 16
	Country_COUNTRY_GEORGIA                        Country = 17
	Country_COUNTRY_INSURGENTS                     Country = 18
	Country_COUNTRY_ABKHAZIA                       Country = 19
	Country_COUNTRY_SOUTH_OSETIA                   Country = 20
	Country_COUNTRY_ITALY                          Country = 21
	Country_COUNTRY_AUSTRALIA                      Country = 22
	Country_COUNTRY_SWITZERLAND                    Country = 23
	Country_COUNTRY_AUSTRIA                        Country = 24
	Country_COUNTRY_BELARUS                        Country = 25
	Country_COUNTRY_BULGARIA                       Country = 26
	Country_COUNTRY_CZECH_REPUBLIC                 Country = 27
	Country_COUNTRY_CHINA                          Country = 28
	Country_COUNTRY_CROATIA                        Country = 29
	Country_COUNTRY_EGYPT                          Country = 30
	Country_COUNTRY_FINLAND                        Country = 31
	Country_COUNTRY_GREECE                         Country = 32
	Country_COUNTRY_HUNGARY                        Country = 33
	Country_COUNTRY_INDIA                          Country = 34
	Country_COUNTRY_IRAN                           Country = 35
	Country_COUNTRY_IRAQ                           Country = 36
	Country_COUNTRY_JAPAN                          Country = 37
	Country_COUNTRY_KAZAKHSTAN                     Country = 38
	Country_COUNTRY_NORTH_KOREA                    Country = 39
	Country_COUNTRY_PAKISTAN                       Country = 40
	Country_COUNTRY_POLAND                         Country = 41
	Country_COUNTRY_ROMANIA                        Country = 42
	Country_COUNTRY_SAUDI_ARABIA                   Country = 43
	Country_COUNTRY_SERBIA                         Country = 44
	Country_COUNTRY_SLOVAKIA                       Country = 45
	Country_COUNTRY_SOUTH_KOREA                    Country = 46
	Country_COUNTRY_SWEDEN                         Country = 47
	Country_COUNTRY_SYRIA                          Country = 48
	Country_COUNTRY_YEMEN                          Country = 49
	Country_COUNTRY_VIETNAM                        Country = 50
	Country_COUNTRY_VENEZUELA                      Country = 51
	Country_COUNTRY_TUNISIA                        Country = 52
	Country_COUNTRY_THAILAND                       Country = 53
	Country_COUNTRY_SUDAN                          Country = 54
	Country_COUNTRY_PHILIPPINES                    Country = 55
	Country_COUNTRY_MOROCCO                        Country = 56
	Country_COUNTRY_MEXICO                         Country = 57
	Country_COUNTRY_MALAYSIA                       Country = 58
	Country_COUNTRY_LIBYA                          Country = 59
	Country_COUNTRY_JORDAN                         Country = 60
	Country_COUNTRY_INDONESIA                      Country = 61
	Country_COUNTRY_HONDURAS                       Country = 62
	Country_COUNTRY_ETHIOPIA                       Country = 63
	Country_COUNTRY_CHILE                          Country = 64
	Country_COUNTRY_BRAZIL                         Country = 65
	Country_COUNTRY_BAHRAIN                        Country = 66
	Country_COUNTRY_THIRDREICH                     Country = 67
	Country_COUNTRY_YUGOSLAVIA                     Country = 68
	Country_COUNTRY_SOVIET_UNION                   Country = 69
	Country_COUNTRY_ITALIAN_SOCIAL_REPUBLIC        Country = 70
	Country_COUNTRY_ALGERIA                        Country = 71
	Country_COUNTRY_KUWAIT                         Country = 72
	Country_COUNTRY_QATAR                          Country = 73
	Country_COUNTRY_OMAN                           Country = 74
	Country_COUNTRY_UNITED_ARAB_EMIRATES           Country = 75
	Country_COUNTRY_SOUTH_AFRICA                   Country = 76
	Country_COUNTRY_CUBA                           Country = 77
	Country_COUNTRY_PORTUGAL                       Country = 78
	Country_COUNTRY_GERMAN_DEMOCRATIC_REPUBLIC     Country = 79
	Country_COUNTRY_LEBANON                        Country = 80
	Country_COUNTRY_COMBINED_JOINT_TASK_FORCE_BLUE Country = 81
	Country_COUNTRY_COMBINED_JOINT_TASK_FORCE_RED  Country = 82
	Country_COUNTRY_UNITED_NATIONS_PEACEKEEPERS    Country = 83
	Country_COUNTRY_ARGENTINA                      Country = 84
	Country_COUNTRY_CYPRUS                         Country = 85
	Country_COUNTRY_SLOVENIA                       Country = 86
)

// Enum value maps for Country.
var (
	Country_name = map[int32]string{
		0:  "COUNTRY_UNSPECIFIED",
		1:  "COUNTRY_RUSSIA",
		2:  "COUNTRY_UKRAINE",
		3:  "COUNTRY_UNITED_STATES_OF_AMERICA",
		4:  "COUNTRY_TURKEY",
		5:  "COUNTRY_UNITED_KINGDOM",
		6:  "COUNTRY_FRANCE",
		7:  "COUNTRY_GERMANY",
		8:  "COUNTRY_AGGRESSORS",
		9:  "COUNTRY_CANADA",
		10: "COUNTRY_SPAIN",
		11: "COUNTRY_THE_NETHERLANDS",
		12: "COUNTRY_BELGIUM",
		13: "COUNTRY_NORWAY",
		14: "COUNTRY_DENMARK",
		15: "COUNTRY_UNUSED",
		16: "COUNTRY_ISRAEL",
		17: "COUNTRY_GEORGIA",
		18: "COUNTRY_INSURGENTS",
		19: "COUNTRY_ABKHAZIA",
		20: "COUNTRY_SOUTH_OSETIA",
		21: "COUNTRY_ITALY",
		22: "COUNTRY_AUSTRALIA",
		23: "COUNTRY_SWITZERLAND",
		24: "COUNTRY_AUSTRIA",
		25: "COUNTRY_BELARUS",
		26: "COUNTRY_BULGARIA",
		27: "COUNTRY_CZECH_REPUBLIC",
		28: "COUNTRY_CHINA",
		29: "COUNTRY_CROATIA",
		30: "COUNTRY_EGYPT",
		31: "COUNTRY_FINLAND",
		32: "COUNTRY_GREECE",
		33: "COUNTRY_HUNGARY",
		34: "COUNTRY_INDIA",
		35: "COUNTRY_IRAN",
		36: "COUNTRY_IRAQ",
		37: "COUNTRY_JAPAN",
		38: "COUNTRY_KAZAKHSTAN",
		39: "COUNTRY_NORTH_KOREA",
		40: "COUNTRY_PAKISTAN",
		41: "COUNTRY_POLAND",
		42: "COUNTRY_ROMANIA",
		43: "COUNTRY_SAUDI_ARABIA",
		44: "COUNTRY_SERBIA",
		45: "COUNTRY_SLOVAKIA",
		46: "COUNTRY_SOUTH_KOREA",
		47: "COUNTRY_SWEDEN",
		48: "COUNTRY_SYRIA",
		49: "COUNTRY_YEMEN",
		50: "COUNTRY_VIETNAM",
		51: "COUNTRY_VENEZUELA",
		52: "COUNTRY_TUNISIA",
		53: "COUNTRY_THAILAND",
		54: "COUNTRY_SUDAN",
		55: "COUNTRY_PHILIPPINES",
		56: "COUNTRY_MOROCCO",
		57: "COUNTRY_MEXICO",
		58: "COUNTRY_MALAYSIA",
		59: "COUNTRY_LIBYA",
		60: "COUNTRY_JORDAN",
		61: "COUNTRY_INDONESIA",
		62: "COUNTRY_HONDURAS",
		63: "COUNTRY_ETHIOPIA",
		64: "COUNTRY_CHILE",
		65: "COUNTRY_BRAZIL",
		66: "COUNTRY_BAHRAIN",
		67: "COUNTRY_THIRDREICH",
		68: "COUNTRY_YUGOSLAVIA",
		69: "COUNTRY_SOVIET_UNION",
		70: "COUNTRY_ITALIAN_SOCIAL_REPUBLIC",
		71: "COUNTRY_ALGERIA",
		72: "COUNTRY_KUWAIT",
		73: "COUNTRY_QATAR",
		74: "COUNTRY_OMAN",
		75: "COUNTRY_UNITED_ARAB_EMIRATES",
		76: "COUNTRY_SOUTH_AFRICA",
		77: "COUNTRY_CUBA",
		78: "COUNTRY_PORTUGAL",
		79: "COUNTRY_GERMAN_DEMOCRATIC_REPUBLIC",
		80: "COUNTRY_LEBANON",
		81: "COUNTRY_COMBINED_JOINT_TASK_FORCE_BLUE",
		82: "COUNTRY_COMBINED_JOINT_TASK_FORCE_RED",
		83: "COUNTRY_UNITED_NATIONS_PEACEKEEPERS",
		84: "COUNTRY_ARGENTINA",
		85: "COUNTRY_CYPRUS",
		86: "COUNTRY_SLOVENIA",
	}
	Country_value = map[string]int32{
		"COUNTRY_UNSPECIFIED":                    0,
		"COUNTRY_RUSSIA":                         1,
		"COUNTRY_UKRAINE":                        2,
		"COUNTRY_UNITED_STATES_OF_AMERICA":       3,
		"COUNTRY_TURKEY":                         4,
		"COUNTRY_UNITED_KINGDOM":                 5,
		"COUNTRY_FRANCE":                         6,
		"COUNTRY_GERMANY":                        7,
		"COUNTRY_AGGRESSORS":                     8,
		"COUNTRY_CANADA":                         9,
		"COUNTRY_SPAIN":                          10,
		"COUNTRY_THE_NETHERLANDS":                11,
		"COUNTRY_BELGIUM":                        12,
		"COUNTRY_NORWAY":                         13,
		"COUNTRY_DENMARK":                        14,
		"COUNTRY_UNUSED":                         15,
		"COUNTRY_ISRAEL":                         16,
		"COUNTRY_GEORGIA":                        17,
		"COUNTRY_INSURGENTS":                     18,
		"COUNTRY_ABKHAZIA":                       19,
		"COUNTRY_SOUTH_OSETIA":                   20,
		"COUNTRY_ITALY":                          21,
		"COUNTRY_AUSTRALIA":                      22,
		"COUNTRY_SWITZERLAND":                    23,
		"COUNTRY_AUSTRIA":                        24,
		"COUNTRY_BELARUS":                        25,
		"COUNTRY_BULGARIA":                       26,
		"COUNTRY_CZECH_REPUBLIC":                 27,
		"COUNTRY_CHINA":                          28,
		"COUNTRY_CROATIA":                        29,
		"COUNTRY_EGYPT":                          30,
		"COUNTRY_FINLAND":                        31,
		"COUNTRY_GREECE":                         32,
		"COUNTRY_HUNGARY":                        33,
		"COUNTRY_INDIA":                          34,
		"COUNTRY_IRAN":                           35,
		"COUNTRY_IRAQ":                           36,
		"COUNTRY_JAPAN":                          37,
		"COUNTRY_KAZAKHSTAN":                     38,
		"COUNTRY_NORTH_KOREA":                    39,
		"COUNTRY_PAKISTAN":                       40,
		"COUNTRY_POLAND":                         41,
		"COUNTRY_ROMANIA":                        42,
		"COUNTRY_SAUDI_ARABIA":                   43,
		"COUNTRY_SERBIA":                         44,
		"COUNTRY_SLOVAKIA":                       45,
		"COUNTRY_SOUTH_KOREA":                    46,
		"COUNTRY_SWEDEN":                         47,
		"COUNTRY_SYRIA":                          48,
		"COUNTRY_YEMEN":                          49,
		"COUNTRY_VIETNAM":                        50,
		"COUNTRY_VENEZUELA":                      51,
		"COUNTRY_TUNISIA":                        52,
		"COUNTRY_THAILAND":                       53,
		"COUNTRY_SUDAN":                          54,
		"COUNTRY_PHILIPPINES":                    55,
		"COUNTRY_MOROCCO":                        56,
		"COUNTRY_MEXICO":                         57,
		"COUNTRY_MALAYSIA":                       58,
		"COUNTRY_LIBYA":                          59,
		"COUNTRY_JORDAN":                         60,
		"COUNTRY_INDONESIA":                      61,
		"COUNTRY_HONDURAS":                       62,
		"COUNTRY_ETHIOPIA":                       63,
		"COUNTRY_CHILE":                          64,
		"COUNTRY_BRAZIL":                         65,
		"COUNTRY_BAHRAIN":                        66,
		"COUNTRY_THIRDREICH":                     67,
		"COUNTRY_YUGOSLAVIA":                     68,
		"COUNTRY_SOVIET_UNION":                   69,
		"COUNTRY_ITALIAN_SOCIAL_REPUBLIC":        70,
		"COUNTRY_ALGERIA":                        71,
		"COUNTRY_KUWAIT":                         72,
		"COUNTRY_QATAR":                          73,
		"COUNTRY_OMAN":                           74,
		"COUNTRY_UNITED_ARAB_EMIRATES":           75,
		"COUNTRY_SOUTH_AFRICA":                   76,
		"COUNTRY_CUBA":                           77,
		"COUNTRY_PORTUGAL":                       78,
		"COUNTRY_GERMAN_DEMOCRATIC_REPUBLIC":     79,
		"COUNTRY_LEBANON":                        80,
		"COUNTRY_COMBINED_JOINT_TASK_FORCE_BLUE": 81,
		"COUNTRY_COMBINED_JOINT_TASK_FORCE_RED":  82,
		"COUNTRY_UNITED_NATIONS_PEACEKEEPERS":    83,
		"COUNTRY_ARGENTINA":                      84,
		"COUNTRY_CYPRUS":                         85,
		"COUNTRY_SLOVENIA":                       86,
	}
)

func (x Country) Enum() *Country {
	p := new(Country)
	*p = x
	return p
}

func (x Country) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Country) Descriptor() protoreflect.EnumDescriptor {
	return file_dcs_common_v0_common_proto_enumTypes[3].Descriptor()
}

func (Country) Type() protoreflect.EnumType {
	return &file_dcs_common_v0_common_proto_enumTypes[3]
}

func (x Country) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Country.Descriptor instead.
func (Country) EnumDescriptor() ([]byte, []int) {
	return file_dcs_common_v0_common_proto_rawDescGZIP(), []int{3}
}

//*
// Group category enumerator.
type GroupCategory int32

const (
	GroupCategory_GROUP_CATEGORY_UNSPECIFIED GroupCategory = 0
	GroupCategory_GROUP_CATEGORY_AIRPLANE    GroupCategory = 1
	GroupCategory_GROUP_CATEGORY_HELICOPTER  GroupCategory = 2
	GroupCategory_GROUP_CATEGORY_GROUND      GroupCategory = 3
	GroupCategory_GROUP_CATEGORY_SHIP        GroupCategory = 4
	GroupCategory_GROUP_CATEGORY_TRAIN       GroupCategory = 5
)

// Enum value maps for GroupCategory.
var (
	GroupCategory_name = map[int32]string{
		0: "GROUP_CATEGORY_UNSPECIFIED",
		1: "GROUP_CATEGORY_AIRPLANE",
		2: "GROUP_CATEGORY_HELICOPTER",
		3: "GROUP_CATEGORY_GROUND",
		4: "GROUP_CATEGORY_SHIP",
		5: "GROUP_CATEGORY_TRAIN",
	}
	GroupCategory_value = map[string]int32{
		"GROUP_CATEGORY_UNSPECIFIED": 0,
		"GROUP_CATEGORY_AIRPLANE":    1,
		"GROUP_CATEGORY_HELICOPTER":  2,
		"GROUP_CATEGORY_GROUND":      3,
		"GROUP_CATEGORY_SHIP":        4,
		"GROUP_CATEGORY_TRAIN":       5,
	}
)

func (x GroupCategory) Enum() *GroupCategory {
	p := new(GroupCategory)
	*p = x
	return p
}

func (x GroupCategory) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (GroupCategory) Descriptor() protoreflect.EnumDescriptor {
	return file_dcs_common_v0_common_proto_enumTypes[4].Descriptor()
}

func (GroupCategory) Type() protoreflect.EnumType {
	return &file_dcs_common_v0_common_proto_enumTypes[4]
}

func (x GroupCategory) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use GroupCategory.Descriptor instead.
func (GroupCategory) EnumDescriptor() ([]byte, []int) {
	return file_dcs_common_v0_common_proto_rawDescGZIP(), []int{4}
}

//*
// Position of an object in DCS
//
// Latitude and Longitude are in Decimal Degrees format (e.g. 41.33 / 37.21).
// Negative values are used for West of the meridian and south of the equator
//
// Altitude is given in meters above Mean Sea Level (MSL) and can be a decimal
// value.
type Position struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Latitude in Decimal Degrees format
	Lat float64 `protobuf:"fixed64,1,opt,name=lat,proto3" json:"lat,omitempty"`
	// Longitude in Decimal Degrees format
	Lon float64 `protobuf:"fixed64,2,opt,name=lon,proto3" json:"lon,omitempty"`
	// Altitude in Meters above Mean Sea Level (MSL)
	Alt float64 `protobuf:"fixed64,3,opt,name=alt,proto3" json:"alt,omitempty"`
}

func (x *Position) Reset() {
	*x = Position{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dcs_common_v0_common_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Position) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Position) ProtoMessage() {}

func (x *Position) ProtoReflect() protoreflect.Message {
	mi := &file_dcs_common_v0_common_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Position.ProtoReflect.Descriptor instead.
func (*Position) Descriptor() ([]byte, []int) {
	return file_dcs_common_v0_common_proto_rawDescGZIP(), []int{0}
}

func (x *Position) GetLat() float64 {
	if x != nil {
		return x.Lat
	}
	return 0
}

func (x *Position) GetLon() float64 {
	if x != nil {
		return x.Lon
	}
	return 0
}

func (x *Position) GetAlt() float64 {
	if x != nil {
		return x.Alt
	}
	return 0
}

//*
// This type is returned if an object category cannot be determined
//
// The base object includes the `getName()` function so even for an unknown type
// we _should_ be able to get the name
type Unknown struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *Unknown) Reset() {
	*x = Unknown{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dcs_common_v0_common_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Unknown) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Unknown) ProtoMessage() {}

func (x *Unknown) ProtoReflect() protoreflect.Message {
	mi := &file_dcs_common_v0_common_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Unknown.ProtoReflect.Descriptor instead.
func (*Unknown) Descriptor() ([]byte, []int) {
	return file_dcs_common_v0_common_proto_rawDescGZIP(), []int{1}
}

func (x *Unknown) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

//*
// An instance of a DCS Unit
//
// A unit is an "active" unit in a DCS mission. This means it has an attached AI
// that moves and shoots. Units include aircraft, ground units, ships, weapons
// etc.
type Unit struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The DCS generated ID
	Id uint32 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	// The name of the unit as assigned in the mission editor
	Name string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	// The DCS assigned callsign if one exists. e.g. "Enfield 11"
	Callsign string `protobuf:"bytes,3,opt,name=callsign,proto3" json:"callsign,omitempty"`
	// The coalition the unit belongs to
	Coalition Coalition `protobuf:"varint,4,opt,name=coalition,proto3,enum=dcs.common.v0.Coalition" json:"coalition,omitempty"`
	// The DCS type-name of the unit. e.g "MiG-29A", "ZSU_57_2" or "Hawk ln"
	Type string `protobuf:"bytes,5,opt,name=type,proto3" json:"type,omitempty"`
	// The position of the unit
	Position *Position `protobuf:"bytes,6,opt,name=position,proto3" json:"position,omitempty"`
	// The name of the player if one is in control of the unit
	PlayerName *string `protobuf:"bytes,7,opt,name=player_name,json=playerName,proto3,oneof" json:"player_name,omitempty"`
	// The name of the group that the unit belongs to
	GroupName string `protobuf:"bytes,8,opt,name=group_name,json=groupName,proto3" json:"group_name,omitempty"`
	// The number of this unit in the group. Does not change as units are
	// destroyed
	NumberInGroup uint32 `protobuf:"varint,9,opt,name=number_in_group,json=numberInGroup,proto3" json:"number_in_group,omitempty"`
	// The horizontal speed of the unit. If it is doing mach one straight up then
	// the speed will be 0
	Speed float64 `protobuf:"fixed64,10,opt,name=speed,proto3" json:"speed,omitempty"`
	// The heading of the unit
	Heading float64 `protobuf:"fixed64,11,opt,name=heading,proto3" json:"heading,omitempty"`
	// The group category.
	Category GroupCategory `protobuf:"varint,12,opt,name=category,proto3,enum=dcs.common.v0.GroupCategory" json:"category,omitempty"`
}

func (x *Unit) Reset() {
	*x = Unit{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dcs_common_v0_common_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Unit) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Unit) ProtoMessage() {}

func (x *Unit) ProtoReflect() protoreflect.Message {
	mi := &file_dcs_common_v0_common_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Unit.ProtoReflect.Descriptor instead.
func (*Unit) Descriptor() ([]byte, []int) {
	return file_dcs_common_v0_common_proto_rawDescGZIP(), []int{2}
}

func (x *Unit) GetId() uint32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *Unit) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Unit) GetCallsign() string {
	if x != nil {
		return x.Callsign
	}
	return ""
}

func (x *Unit) GetCoalition() Coalition {
	if x != nil {
		return x.Coalition
	}
	return Coalition_COALITION_ALL
}

func (x *Unit) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *Unit) GetPosition() *Position {
	if x != nil {
		return x.Position
	}
	return nil
}

func (x *Unit) GetPlayerName() string {
	if x != nil && x.PlayerName != nil {
		return *x.PlayerName
	}
	return ""
}

func (x *Unit) GetGroupName() string {
	if x != nil {
		return x.GroupName
	}
	return ""
}

func (x *Unit) GetNumberInGroup() uint32 {
	if x != nil {
		return x.NumberInGroup
	}
	return 0
}

func (x *Unit) GetSpeed() float64 {
	if x != nil {
		return x.Speed
	}
	return 0
}

func (x *Unit) GetHeading() float64 {
	if x != nil {
		return x.Heading
	}
	return 0
}

func (x *Unit) GetCategory() GroupCategory {
	if x != nil {
		return x.Category
	}
	return GroupCategory_GROUP_CATEGORY_UNSPECIFIED
}

//*
// An instance of a DCS group
type Group struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id        uint32        `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`                                              // The DCS generated ID
	Name      string        `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`                                           // The name of the group as assigned in the mission editor
	Coalition Coalition     `protobuf:"varint,3,opt,name=coalition,proto3,enum=dcs.common.v0.Coalition" json:"coalition,omitempty"`   // The coalition of the group
	Category  GroupCategory `protobuf:"varint,4,opt,name=category,proto3,enum=dcs.common.v0.GroupCategory" json:"category,omitempty"` // The group category.
}

func (x *Group) Reset() {
	*x = Group{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dcs_common_v0_common_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Group) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Group) ProtoMessage() {}

func (x *Group) ProtoReflect() protoreflect.Message {
	mi := &file_dcs_common_v0_common_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Group.ProtoReflect.Descriptor instead.
func (*Group) Descriptor() ([]byte, []int) {
	return file_dcs_common_v0_common_proto_rawDescGZIP(), []int{3}
}

func (x *Group) GetId() uint32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *Group) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Group) GetCoalition() Coalition {
	if x != nil {
		return x.Coalition
	}
	return Coalition_COALITION_ALL
}

func (x *Group) GetCategory() GroupCategory {
	if x != nil {
		return x.Category
	}
	return GroupCategory_GROUP_CATEGORY_UNSPECIFIED
}

//*
// An instance of a DCS weapon
//
// These weapons include everything from autocannon HE shells up to massive
// ship-killer missiles
type Weapon struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The DCS generated ID
	Id uint32 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	// The DCS type-name of the weapon. e.g "Matra_S530D", "HAWK_RAKETA" or
	// "weapons.shells.53-UOR-281U"
	Type string `protobuf:"bytes,2,opt,name=type,proto3" json:"type,omitempty"`
	// The position of the Weapon
	Position *Position `protobuf:"bytes,3,opt,name=position,proto3" json:"position,omitempty"`
}

func (x *Weapon) Reset() {
	*x = Weapon{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dcs_common_v0_common_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Weapon) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Weapon) ProtoMessage() {}

func (x *Weapon) ProtoReflect() protoreflect.Message {
	mi := &file_dcs_common_v0_common_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Weapon.ProtoReflect.Descriptor instead.
func (*Weapon) Descriptor() ([]byte, []int) {
	return file_dcs_common_v0_common_proto_rawDescGZIP(), []int{4}
}

func (x *Weapon) GetId() uint32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *Weapon) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *Weapon) GetPosition() *Position {
	if x != nil {
		return x.Position
	}
	return nil
}

//*
// An instance of a DCS static object
//
// These objects are often buildings but can also be vehicles that have no AI or
// other game behaviour aside from being destroyable
type Static struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The DCS generated ID
	Id uint32 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	// The DCS type-name of the static
	Type string `protobuf:"bytes,2,opt,name=type,proto3" json:"type,omitempty"`
	// The name of the static
	Name string `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`
	// The coalition the static belongs to
	Coalition Coalition `protobuf:"varint,4,opt,name=coalition,proto3,enum=dcs.common.v0.Coalition" json:"coalition,omitempty"`
	// The position of the static
	Position *Position `protobuf:"bytes,5,opt,name=position,proto3" json:"position,omitempty"`
}

func (x *Static) Reset() {
	*x = Static{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dcs_common_v0_common_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Static) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Static) ProtoMessage() {}

func (x *Static) ProtoReflect() protoreflect.Message {
	mi := &file_dcs_common_v0_common_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Static.ProtoReflect.Descriptor instead.
func (*Static) Descriptor() ([]byte, []int) {
	return file_dcs_common_v0_common_proto_rawDescGZIP(), []int{5}
}

func (x *Static) GetId() uint32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *Static) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *Static) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Static) GetCoalition() Coalition {
	if x != nil {
		return x.Coalition
	}
	return Coalition_COALITION_ALL
}

func (x *Static) GetPosition() *Position {
	if x != nil {
		return x.Position
	}
	return nil
}

//*
// An instance of a DCS scenery object
type Scenery struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The DCS type-name of the scenery
	Type string `protobuf:"bytes,1,opt,name=type,proto3" json:"type,omitempty"`
	// The name of the scenery
	Name string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	// The position of the scenery
	Position *Position `protobuf:"bytes,3,opt,name=position,proto3" json:"position,omitempty"`
}

func (x *Scenery) Reset() {
	*x = Scenery{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dcs_common_v0_common_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Scenery) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Scenery) ProtoMessage() {}

func (x *Scenery) ProtoReflect() protoreflect.Message {
	mi := &file_dcs_common_v0_common_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Scenery.ProtoReflect.Descriptor instead.
func (*Scenery) Descriptor() ([]byte, []int) {
	return file_dcs_common_v0_common_proto_rawDescGZIP(), []int{6}
}

func (x *Scenery) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *Scenery) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Scenery) GetPosition() *Position {
	if x != nil {
		return x.Position
	}
	return nil
}

//*
// An instance of a DCS Airfield
//
type Airbase struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The DCS generated ID. Only used when the airfield is also a unit
	// (e.g. an Aicraft Carrier)
	Id *uint32 `protobuf:"varint,1,opt,name=id,proto3,oneof" json:"id,omitempty"`
	// TODO: Fill this in
	Name string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	// TODO: Fill this in
	Callsign string `protobuf:"bytes,3,opt,name=callsign,proto3" json:"callsign,omitempty"`
	// The coalition the unit belongs to. This can change mid-mission if an
	// airfield is captured
	Coalition Coalition `protobuf:"varint,4,opt,name=coalition,proto3,enum=dcs.common.v0.Coalition" json:"coalition,omitempty"`
	// The position of the center point of the airfield.
	Position *Position `protobuf:"bytes,6,opt,name=position,proto3" json:"position,omitempty"`
	// What category the airfield belongs to.
	Category AirbaseCategory `protobuf:"varint,7,opt,name=category,proto3,enum=dcs.common.v0.AirbaseCategory" json:"category,omitempty"`
	// TODO: Fill this in
	DisplayName string `protobuf:"bytes,8,opt,name=display_name,json=displayName,proto3" json:"display_name,omitempty"`
}

func (x *Airbase) Reset() {
	*x = Airbase{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dcs_common_v0_common_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Airbase) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Airbase) ProtoMessage() {}

func (x *Airbase) ProtoReflect() protoreflect.Message {
	mi := &file_dcs_common_v0_common_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Airbase.ProtoReflect.Descriptor instead.
func (*Airbase) Descriptor() ([]byte, []int) {
	return file_dcs_common_v0_common_proto_rawDescGZIP(), []int{7}
}

func (x *Airbase) GetId() uint32 {
	if x != nil && x.Id != nil {
		return *x.Id
	}
	return 0
}

func (x *Airbase) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Airbase) GetCallsign() string {
	if x != nil {
		return x.Callsign
	}
	return ""
}

func (x *Airbase) GetCoalition() Coalition {
	if x != nil {
		return x.Coalition
	}
	return Coalition_COALITION_ALL
}

func (x *Airbase) GetPosition() *Position {
	if x != nil {
		return x.Position
	}
	return nil
}

func (x *Airbase) GetCategory() AirbaseCategory {
	if x != nil {
		return x.Category
	}
	return AirbaseCategory_AIRBASE_CATEGORY_UNSPECIFIED
}

func (x *Airbase) GetDisplayName() string {
	if x != nil {
		return x.DisplayName
	}
	return ""
}

//*
// An instance of a DCS Cargo object
type Cargo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *Cargo) Reset() {
	*x = Cargo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dcs_common_v0_common_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Cargo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Cargo) ProtoMessage() {}

func (x *Cargo) ProtoReflect() protoreflect.Message {
	mi := &file_dcs_common_v0_common_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Cargo.ProtoReflect.Descriptor instead.
func (*Cargo) Descriptor() ([]byte, []int) {
	return file_dcs_common_v0_common_proto_rawDescGZIP(), []int{8}
}

//
// The initiator of an event
//
// The initiator of an event. For things like shooting events it is usually a
// vehicle but it can be almost anything depending on the event
type Initiator struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Initiator:
	//	*Initiator_Unknown
	//	*Initiator_Unit
	//	*Initiator_Weapon
	//	*Initiator_Static
	//	*Initiator_Scenery
	//	*Initiator_Airbase
	//	*Initiator_Cargo
	Initiator isInitiator_Initiator `protobuf_oneof:"initiator"`
}

func (x *Initiator) Reset() {
	*x = Initiator{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dcs_common_v0_common_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Initiator) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Initiator) ProtoMessage() {}

func (x *Initiator) ProtoReflect() protoreflect.Message {
	mi := &file_dcs_common_v0_common_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Initiator.ProtoReflect.Descriptor instead.
func (*Initiator) Descriptor() ([]byte, []int) {
	return file_dcs_common_v0_common_proto_rawDescGZIP(), []int{9}
}

func (m *Initiator) GetInitiator() isInitiator_Initiator {
	if m != nil {
		return m.Initiator
	}
	return nil
}

func (x *Initiator) GetUnknown() *Unknown {
	if x, ok := x.GetInitiator().(*Initiator_Unknown); ok {
		return x.Unknown
	}
	return nil
}

func (x *Initiator) GetUnit() *Unit {
	if x, ok := x.GetInitiator().(*Initiator_Unit); ok {
		return x.Unit
	}
	return nil
}

func (x *Initiator) GetWeapon() *Weapon {
	if x, ok := x.GetInitiator().(*Initiator_Weapon); ok {
		return x.Weapon
	}
	return nil
}

func (x *Initiator) GetStatic() *Static {
	if x, ok := x.GetInitiator().(*Initiator_Static); ok {
		return x.Static
	}
	return nil
}

func (x *Initiator) GetScenery() *Scenery {
	if x, ok := x.GetInitiator().(*Initiator_Scenery); ok {
		return x.Scenery
	}
	return nil
}

func (x *Initiator) GetAirbase() *Airbase {
	if x, ok := x.GetInitiator().(*Initiator_Airbase); ok {
		return x.Airbase
	}
	return nil
}

func (x *Initiator) GetCargo() *Cargo {
	if x, ok := x.GetInitiator().(*Initiator_Cargo); ok {
		return x.Cargo
	}
	return nil
}

type isInitiator_Initiator interface {
	isInitiator_Initiator()
}

type Initiator_Unknown struct {
	Unknown *Unknown `protobuf:"bytes,1,opt,name=unknown,proto3,oneof"`
}

type Initiator_Unit struct {
	Unit *Unit `protobuf:"bytes,2,opt,name=unit,proto3,oneof"`
}

type Initiator_Weapon struct {
	Weapon *Weapon `protobuf:"bytes,3,opt,name=weapon,proto3,oneof"`
}

type Initiator_Static struct {
	Static *Static `protobuf:"bytes,4,opt,name=static,proto3,oneof"`
}

type Initiator_Scenery struct {
	Scenery *Scenery `protobuf:"bytes,5,opt,name=scenery,proto3,oneof"`
}

type Initiator_Airbase struct {
	Airbase *Airbase `protobuf:"bytes,6,opt,name=airbase,proto3,oneof"`
}

type Initiator_Cargo struct {
	Cargo *Cargo `protobuf:"bytes,7,opt,name=cargo,proto3,oneof"`
}

func (*Initiator_Unknown) isInitiator_Initiator() {}

func (*Initiator_Unit) isInitiator_Initiator() {}

func (*Initiator_Weapon) isInitiator_Initiator() {}

func (*Initiator_Static) isInitiator_Initiator() {}

func (*Initiator_Scenery) isInitiator_Initiator() {}

func (*Initiator_Airbase) isInitiator_Initiator() {}

func (*Initiator_Cargo) isInitiator_Initiator() {}

//
// The target of an event
//
// The target of an event. For things like shooting events it is usually a
// vehicle but it can be almost anything depending on the event
type Target struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Target:
	//	*Target_Unknown
	//	*Target_Unit
	//	*Target_Weapon
	//	*Target_Static
	//	*Target_Scenery
	//	*Target_Airbase
	//	*Target_Cargo
	Target isTarget_Target `protobuf_oneof:"target"`
}

func (x *Target) Reset() {
	*x = Target{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dcs_common_v0_common_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Target) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Target) ProtoMessage() {}

func (x *Target) ProtoReflect() protoreflect.Message {
	mi := &file_dcs_common_v0_common_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Target.ProtoReflect.Descriptor instead.
func (*Target) Descriptor() ([]byte, []int) {
	return file_dcs_common_v0_common_proto_rawDescGZIP(), []int{10}
}

func (m *Target) GetTarget() isTarget_Target {
	if m != nil {
		return m.Target
	}
	return nil
}

func (x *Target) GetUnknown() *Unknown {
	if x, ok := x.GetTarget().(*Target_Unknown); ok {
		return x.Unknown
	}
	return nil
}

func (x *Target) GetUnit() *Unit {
	if x, ok := x.GetTarget().(*Target_Unit); ok {
		return x.Unit
	}
	return nil
}

func (x *Target) GetWeapon() *Weapon {
	if x, ok := x.GetTarget().(*Target_Weapon); ok {
		return x.Weapon
	}
	return nil
}

func (x *Target) GetStatic() *Static {
	if x, ok := x.GetTarget().(*Target_Static); ok {
		return x.Static
	}
	return nil
}

func (x *Target) GetScenery() *Scenery {
	if x, ok := x.GetTarget().(*Target_Scenery); ok {
		return x.Scenery
	}
	return nil
}

func (x *Target) GetAirbase() *Airbase {
	if x, ok := x.GetTarget().(*Target_Airbase); ok {
		return x.Airbase
	}
	return nil
}

func (x *Target) GetCargo() *Cargo {
	if x, ok := x.GetTarget().(*Target_Cargo); ok {
		return x.Cargo
	}
	return nil
}

type isTarget_Target interface {
	isTarget_Target()
}

type Target_Unknown struct {
	Unknown *Unknown `protobuf:"bytes,1,opt,name=unknown,proto3,oneof"`
}

type Target_Unit struct {
	Unit *Unit `protobuf:"bytes,2,opt,name=unit,proto3,oneof"`
}

type Target_Weapon struct {
	Weapon *Weapon `protobuf:"bytes,3,opt,name=weapon,proto3,oneof"`
}

type Target_Static struct {
	Static *Static `protobuf:"bytes,4,opt,name=static,proto3,oneof"`
}

type Target_Scenery struct {
	Scenery *Scenery `protobuf:"bytes,5,opt,name=scenery,proto3,oneof"`
}

type Target_Airbase struct {
	Airbase *Airbase `protobuf:"bytes,6,opt,name=airbase,proto3,oneof"`
}

type Target_Cargo struct {
	Cargo *Cargo `protobuf:"bytes,7,opt,name=cargo,proto3,oneof"`
}

func (*Target_Unknown) isTarget_Target() {}

func (*Target_Unit) isTarget_Target() {}

func (*Target_Weapon) isTarget_Target() {}

func (*Target_Static) isTarget_Target() {}

func (*Target_Scenery) isTarget_Target() {}

func (*Target_Airbase) isTarget_Target() {}

func (*Target_Cargo) isTarget_Target() {}

//
// A MarkPanel
//
// A MarkPanel visible on the F10 map. These can be used for reference by
// players but can also be used by things like Jester for setting waypoints
type MarkPanel struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id uint32 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	// I have no idea what this time value means
	Time      float64    `protobuf:"fixed64,2,opt,name=time,proto3" json:"time,omitempty"`
	Initiator *Unit      `protobuf:"bytes,3,opt,name=initiator,proto3" json:"initiator,omitempty"`
	Coalition *Coalition `protobuf:"varint,4,opt,name=coalition,proto3,enum=dcs.common.v0.Coalition,oneof" json:"coalition,omitempty"`
	GroupId   *uint32    `protobuf:"varint,5,opt,name=group_id,json=groupId,proto3,oneof" json:"group_id,omitempty"`
	Text      *string    `protobuf:"bytes,6,opt,name=text,proto3,oneof" json:"text,omitempty"`
	Position  *Position  `protobuf:"bytes,7,opt,name=position,proto3" json:"position,omitempty"`
}

func (x *MarkPanel) Reset() {
	*x = MarkPanel{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dcs_common_v0_common_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MarkPanel) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MarkPanel) ProtoMessage() {}

func (x *MarkPanel) ProtoReflect() protoreflect.Message {
	mi := &file_dcs_common_v0_common_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MarkPanel.ProtoReflect.Descriptor instead.
func (*MarkPanel) Descriptor() ([]byte, []int) {
	return file_dcs_common_v0_common_proto_rawDescGZIP(), []int{11}
}

func (x *MarkPanel) GetId() uint32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *MarkPanel) GetTime() float64 {
	if x != nil {
		return x.Time
	}
	return 0
}

func (x *MarkPanel) GetInitiator() *Unit {
	if x != nil {
		return x.Initiator
	}
	return nil
}

func (x *MarkPanel) GetCoalition() Coalition {
	if x != nil && x.Coalition != nil {
		return *x.Coalition
	}
	return Coalition_COALITION_ALL
}

func (x *MarkPanel) GetGroupId() uint32 {
	if x != nil && x.GroupId != nil {
		return *x.GroupId
	}
	return 0
}

func (x *MarkPanel) GetText() string {
	if x != nil && x.Text != nil {
		return *x.Text
	}
	return ""
}

func (x *MarkPanel) GetPosition() *Position {
	if x != nil {
		return x.Position
	}
	return nil
}

//*
// A vector in a left-handed coordinate system with +z being north, -z south, +x
// east, -x west, +y up and -y down (as opposed to DCS' unusual right-handed
// coordinate system where x is north/ south and z is west/east; the underlying
// conversion is basically swapping `x` and `z` as in `x=z` and `z=x`).
type Vector struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	X float64 `protobuf:"fixed64,1,opt,name=x,proto3" json:"x,omitempty"`
	Y float64 `protobuf:"fixed64,2,opt,name=y,proto3" json:"y,omitempty"`
	Z float64 `protobuf:"fixed64,3,opt,name=z,proto3" json:"z,omitempty"`
}

func (x *Vector) Reset() {
	*x = Vector{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dcs_common_v0_common_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Vector) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Vector) ProtoMessage() {}

func (x *Vector) ProtoReflect() protoreflect.Message {
	mi := &file_dcs_common_v0_common_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Vector.ProtoReflect.Descriptor instead.
func (*Vector) Descriptor() ([]byte, []int) {
	return file_dcs_common_v0_common_proto_rawDescGZIP(), []int{12}
}

func (x *Vector) GetX() float64 {
	if x != nil {
		return x.X
	}
	return 0
}

func (x *Vector) GetY() float64 {
	if x != nil {
		return x.Y
	}
	return 0
}

func (x *Vector) GetZ() float64 {
	if x != nil {
		return x.Z
	}
	return 0
}

var File_dcs_common_v0_common_proto protoreflect.FileDescriptor

var file_dcs_common_v0_common_proto_rawDesc = []byte{
	0x0a, 0x1a, 0x64, 0x63, 0x73, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2f, 0x76, 0x30, 0x2f,
	0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0d, 0x64, 0x63,
	0x73, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x30, 0x22, 0x40, 0x0a, 0x08, 0x50,
	0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x10, 0x0a, 0x03, 0x6c, 0x61, 0x74, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x01, 0x52, 0x03, 0x6c, 0x61, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x6c, 0x6f, 0x6e,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x01, 0x52, 0x03, 0x6c, 0x6f, 0x6e, 0x12, 0x10, 0x0a, 0x03, 0x61,
	0x6c, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x01, 0x52, 0x03, 0x61, 0x6c, 0x74, 0x22, 0x1d, 0x0a,
	0x07, 0x55, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0xae, 0x03, 0x0a,
	0x04, 0x55, 0x6e, 0x69, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x02, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x63, 0x61, 0x6c,
	0x6c, 0x73, 0x69, 0x67, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x63, 0x61, 0x6c,
	0x6c, 0x73, 0x69, 0x67, 0x6e, 0x12, 0x36, 0x0a, 0x09, 0x63, 0x6f, 0x61, 0x6c, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x18, 0x2e, 0x64, 0x63, 0x73, 0x2e, 0x63,
	0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x30, 0x2e, 0x43, 0x6f, 0x61, 0x6c, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x52, 0x09, 0x63, 0x6f, 0x61, 0x6c, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x12, 0x0a,
	0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x79, 0x70,
	0x65, 0x12, 0x33, 0x0a, 0x08, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x64, 0x63, 0x73, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e,
	0x2e, 0x76, 0x30, 0x2e, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x08, 0x70, 0x6f,
	0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x24, 0x0a, 0x0b, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72,
	0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x0a, 0x70,
	0x6c, 0x61, 0x79, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x1d, 0x0a, 0x0a,
	0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x09, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x26, 0x0a, 0x0f, 0x6e,
	0x75, 0x6d, 0x62, 0x65, 0x72, 0x5f, 0x69, 0x6e, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x18, 0x09,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x0d, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x49, 0x6e, 0x47, 0x72,
	0x6f, 0x75, 0x70, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x70, 0x65, 0x65, 0x64, 0x18, 0x0a, 0x20, 0x01,
	0x28, 0x01, 0x52, 0x05, 0x73, 0x70, 0x65, 0x65, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x68, 0x65, 0x61,
	0x64, 0x69, 0x6e, 0x67, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x01, 0x52, 0x07, 0x68, 0x65, 0x61, 0x64,
	0x69, 0x6e, 0x67, 0x12, 0x38, 0x0a, 0x08, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x18,
	0x0c, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1c, 0x2e, 0x64, 0x63, 0x73, 0x2e, 0x63, 0x6f, 0x6d, 0x6d,
	0x6f, 0x6e, 0x2e, 0x76, 0x30, 0x2e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x43, 0x61, 0x74, 0x65, 0x67,
	0x6f, 0x72, 0x79, 0x52, 0x08, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x42, 0x0e, 0x0a,
	0x0c, 0x5f, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0x9d, 0x01,
	0x0a, 0x05, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x02, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x36, 0x0a, 0x09, 0x63,
	0x6f, 0x61, 0x6c, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x18,
	0x2e, 0x64, 0x63, 0x73, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x30, 0x2e, 0x43,
	0x6f, 0x61, 0x6c, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x63, 0x6f, 0x61, 0x6c, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x38, 0x0a, 0x08, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1c, 0x2e, 0x64, 0x63, 0x73, 0x2e, 0x63, 0x6f, 0x6d, 0x6d,
	0x6f, 0x6e, 0x2e, 0x76, 0x30, 0x2e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x43, 0x61, 0x74, 0x65, 0x67,
	0x6f, 0x72, 0x79, 0x52, 0x08, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x22, 0x61, 0x0a,
	0x06, 0x57, 0x65, 0x61, 0x70, 0x6f, 0x6e, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x02, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x33, 0x0a, 0x08, 0x70,
	0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e,
	0x64, 0x63, 0x73, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x30, 0x2e, 0x50, 0x6f,
	0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x08, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e,
	0x22, 0xad, 0x01, 0x0a, 0x06, 0x53, 0x74, 0x61, 0x74, 0x69, 0x63, 0x12, 0x0e, 0x0a, 0x02, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x02, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x74,
	0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12,
	0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x12, 0x36, 0x0a, 0x09, 0x63, 0x6f, 0x61, 0x6c, 0x69, 0x74, 0x69, 0x6f, 0x6e,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x18, 0x2e, 0x64, 0x63, 0x73, 0x2e, 0x63, 0x6f, 0x6d,
	0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x30, 0x2e, 0x43, 0x6f, 0x61, 0x6c, 0x69, 0x74, 0x69, 0x6f, 0x6e,
	0x52, 0x09, 0x63, 0x6f, 0x61, 0x6c, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x33, 0x0a, 0x08, 0x70,
	0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e,
	0x64, 0x63, 0x73, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x30, 0x2e, 0x50, 0x6f,
	0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x08, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e,
	0x22, 0x66, 0x0a, 0x07, 0x53, 0x63, 0x65, 0x6e, 0x65, 0x72, 0x79, 0x12, 0x12, 0x0a, 0x04, 0x74,
	0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12,
	0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x12, 0x33, 0x0a, 0x08, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x64, 0x63, 0x73, 0x2e, 0x63, 0x6f, 0x6d, 0x6d,
	0x6f, 0x6e, 0x2e, 0x76, 0x30, 0x2e, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x08,
	0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0xa1, 0x02, 0x0a, 0x07, 0x41, 0x69, 0x72,
	0x62, 0x61, 0x73, 0x65, 0x12, 0x13, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d,
	0x48, 0x00, 0x52, 0x02, 0x69, 0x64, 0x88, 0x01, 0x01, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1a, 0x0a,
	0x08, 0x63, 0x61, 0x6c, 0x6c, 0x73, 0x69, 0x67, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x08, 0x63, 0x61, 0x6c, 0x6c, 0x73, 0x69, 0x67, 0x6e, 0x12, 0x36, 0x0a, 0x09, 0x63, 0x6f, 0x61,
	0x6c, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x18, 0x2e, 0x64,
	0x63, 0x73, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x30, 0x2e, 0x43, 0x6f, 0x61,
	0x6c, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x63, 0x6f, 0x61, 0x6c, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x33, 0x0a, 0x08, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x64, 0x63, 0x73, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e,
	0x2e, 0x76, 0x30, 0x2e, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x08, 0x70, 0x6f,
	0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x3a, 0x0a, 0x08, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f,
	0x72, 0x79, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1e, 0x2e, 0x64, 0x63, 0x73, 0x2e, 0x63,
	0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x30, 0x2e, 0x41, 0x69, 0x72, 0x62, 0x61, 0x73, 0x65,
	0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x52, 0x08, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f,
	0x72, 0x79, 0x12, 0x21, 0x0a, 0x0c, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x5f, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61,
	0x79, 0x4e, 0x61, 0x6d, 0x65, 0x42, 0x05, 0x0a, 0x03, 0x5f, 0x69, 0x64, 0x22, 0x07, 0x0a, 0x05,
	0x43, 0x61, 0x72, 0x67, 0x6f, 0x22, 0xef, 0x02, 0x0a, 0x09, 0x49, 0x6e, 0x69, 0x74, 0x69, 0x61,
	0x74, 0x6f, 0x72, 0x12, 0x32, 0x0a, 0x07, 0x75, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x64, 0x63, 0x73, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f,
	0x6e, 0x2e, 0x76, 0x30, 0x2e, 0x55, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x48, 0x00, 0x52, 0x07,
	0x75, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x12, 0x29, 0x0a, 0x04, 0x75, 0x6e, 0x69, 0x74, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x64, 0x63, 0x73, 0x2e, 0x63, 0x6f, 0x6d, 0x6d,
	0x6f, 0x6e, 0x2e, 0x76, 0x30, 0x2e, 0x55, 0x6e, 0x69, 0x74, 0x48, 0x00, 0x52, 0x04, 0x75, 0x6e,
	0x69, 0x74, 0x12, 0x2f, 0x0a, 0x06, 0x77, 0x65, 0x61, 0x70, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x15, 0x2e, 0x64, 0x63, 0x73, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e,
	0x76, 0x30, 0x2e, 0x57, 0x65, 0x61, 0x70, 0x6f, 0x6e, 0x48, 0x00, 0x52, 0x06, 0x77, 0x65, 0x61,
	0x70, 0x6f, 0x6e, 0x12, 0x2f, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x69, 0x63, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x64, 0x63, 0x73, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e,
	0x2e, 0x76, 0x30, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x69, 0x63, 0x48, 0x00, 0x52, 0x06, 0x73, 0x74,
	0x61, 0x74, 0x69, 0x63, 0x12, 0x32, 0x0a, 0x07, 0x73, 0x63, 0x65, 0x6e, 0x65, 0x72, 0x79, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x64, 0x63, 0x73, 0x2e, 0x63, 0x6f, 0x6d, 0x6d,
	0x6f, 0x6e, 0x2e, 0x76, 0x30, 0x2e, 0x53, 0x63, 0x65, 0x6e, 0x65, 0x72, 0x79, 0x48, 0x00, 0x52,
	0x07, 0x73, 0x63, 0x65, 0x6e, 0x65, 0x72, 0x79, 0x12, 0x32, 0x0a, 0x07, 0x61, 0x69, 0x72, 0x62,
	0x61, 0x73, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x64, 0x63, 0x73, 0x2e,
	0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x30, 0x2e, 0x41, 0x69, 0x72, 0x62, 0x61, 0x73,
	0x65, 0x48, 0x00, 0x52, 0x07, 0x61, 0x69, 0x72, 0x62, 0x61, 0x73, 0x65, 0x12, 0x2c, 0x0a, 0x05,
	0x63, 0x61, 0x72, 0x67, 0x6f, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x64, 0x63,
	0x73, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x30, 0x2e, 0x43, 0x61, 0x72, 0x67,
	0x6f, 0x48, 0x00, 0x52, 0x05, 0x63, 0x61, 0x72, 0x67, 0x6f, 0x42, 0x0b, 0x0a, 0x09, 0x69, 0x6e,
	0x69, 0x74, 0x69, 0x61, 0x74, 0x6f, 0x72, 0x22, 0xe9, 0x02, 0x0a, 0x06, 0x54, 0x61, 0x72, 0x67,
	0x65, 0x74, 0x12, 0x32, 0x0a, 0x07, 0x75, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x64, 0x63, 0x73, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e,
	0x2e, 0x76, 0x30, 0x2e, 0x55, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x48, 0x00, 0x52, 0x07, 0x75,
	0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x12, 0x29, 0x0a, 0x04, 0x75, 0x6e, 0x69, 0x74, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x64, 0x63, 0x73, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f,
	0x6e, 0x2e, 0x76, 0x30, 0x2e, 0x55, 0x6e, 0x69, 0x74, 0x48, 0x00, 0x52, 0x04, 0x75, 0x6e, 0x69,
	0x74, 0x12, 0x2f, 0x0a, 0x06, 0x77, 0x65, 0x61, 0x70, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x15, 0x2e, 0x64, 0x63, 0x73, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76,
	0x30, 0x2e, 0x57, 0x65, 0x61, 0x70, 0x6f, 0x6e, 0x48, 0x00, 0x52, 0x06, 0x77, 0x65, 0x61, 0x70,
	0x6f, 0x6e, 0x12, 0x2f, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x69, 0x63, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x15, 0x2e, 0x64, 0x63, 0x73, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e,
	0x76, 0x30, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x69, 0x63, 0x48, 0x00, 0x52, 0x06, 0x73, 0x74, 0x61,
	0x74, 0x69, 0x63, 0x12, 0x32, 0x0a, 0x07, 0x73, 0x63, 0x65, 0x6e, 0x65, 0x72, 0x79, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x64, 0x63, 0x73, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f,
	0x6e, 0x2e, 0x76, 0x30, 0x2e, 0x53, 0x63, 0x65, 0x6e, 0x65, 0x72, 0x79, 0x48, 0x00, 0x52, 0x07,
	0x73, 0x63, 0x65, 0x6e, 0x65, 0x72, 0x79, 0x12, 0x32, 0x0a, 0x07, 0x61, 0x69, 0x72, 0x62, 0x61,
	0x73, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x64, 0x63, 0x73, 0x2e, 0x63,
	0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x30, 0x2e, 0x41, 0x69, 0x72, 0x62, 0x61, 0x73, 0x65,
	0x48, 0x00, 0x52, 0x07, 0x61, 0x69, 0x72, 0x62, 0x61, 0x73, 0x65, 0x12, 0x2c, 0x0a, 0x05, 0x63,
	0x61, 0x72, 0x67, 0x6f, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x64, 0x63, 0x73,
	0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x30, 0x2e, 0x43, 0x61, 0x72, 0x67, 0x6f,
	0x48, 0x00, 0x52, 0x05, 0x63, 0x61, 0x72, 0x67, 0x6f, 0x42, 0x08, 0x0a, 0x06, 0x74, 0x61, 0x72,
	0x67, 0x65, 0x74, 0x22, 0xb1, 0x02, 0x0a, 0x09, 0x4d, 0x61, 0x72, 0x6b, 0x50, 0x61, 0x6e, 0x65,
	0x6c, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x02, 0x69,
	0x64, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x01, 0x52,
	0x04, 0x74, 0x69, 0x6d, 0x65, 0x12, 0x31, 0x0a, 0x09, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x61, 0x74,
	0x6f, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x64, 0x63, 0x73, 0x2e, 0x63,
	0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x30, 0x2e, 0x55, 0x6e, 0x69, 0x74, 0x52, 0x09, 0x69,
	0x6e, 0x69, 0x74, 0x69, 0x61, 0x74, 0x6f, 0x72, 0x12, 0x3b, 0x0a, 0x09, 0x63, 0x6f, 0x61, 0x6c,
	0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x18, 0x2e, 0x64, 0x63,
	0x73, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x30, 0x2e, 0x43, 0x6f, 0x61, 0x6c,
	0x69, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x00, 0x52, 0x09, 0x63, 0x6f, 0x61, 0x6c, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x88, 0x01, 0x01, 0x12, 0x1e, 0x0a, 0x08, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x69,
	0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x48, 0x01, 0x52, 0x07, 0x67, 0x72, 0x6f, 0x75, 0x70,
	0x49, 0x64, 0x88, 0x01, 0x01, 0x12, 0x17, 0x0a, 0x04, 0x74, 0x65, 0x78, 0x74, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x09, 0x48, 0x02, 0x52, 0x04, 0x74, 0x65, 0x78, 0x74, 0x88, 0x01, 0x01, 0x12, 0x33,
	0x0a, 0x08, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x17, 0x2e, 0x64, 0x63, 0x73, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x30,
	0x2e, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x08, 0x70, 0x6f, 0x73, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x63, 0x6f, 0x61, 0x6c, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x69, 0x64, 0x42, 0x07,
	0x0a, 0x05, 0x5f, 0x74, 0x65, 0x78, 0x74, 0x22, 0x32, 0x0a, 0x06, 0x56, 0x65, 0x63, 0x74, 0x6f,
	0x72, 0x12, 0x0c, 0x0a, 0x01, 0x78, 0x18, 0x01, 0x20, 0x01, 0x28, 0x01, 0x52, 0x01, 0x78, 0x12,
	0x0c, 0x0a, 0x01, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x01, 0x52, 0x01, 0x79, 0x12, 0x0c, 0x0a,
	0x01, 0x7a, 0x18, 0x03, 0x20, 0x01, 0x28, 0x01, 0x52, 0x01, 0x7a, 0x2a, 0xd5, 0x01, 0x0a, 0x0e,
	0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x12, 0x1f,
	0x0a, 0x1b, 0x4f, 0x42, 0x4a, 0x45, 0x43, 0x54, 0x5f, 0x43, 0x41, 0x54, 0x45, 0x47, 0x4f, 0x52,
	0x59, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12,
	0x18, 0x0a, 0x14, 0x4f, 0x42, 0x4a, 0x45, 0x43, 0x54, 0x5f, 0x43, 0x41, 0x54, 0x45, 0x47, 0x4f,
	0x52, 0x59, 0x5f, 0x55, 0x4e, 0x49, 0x54, 0x10, 0x01, 0x12, 0x1a, 0x0a, 0x16, 0x4f, 0x42, 0x4a,
	0x45, 0x43, 0x54, 0x5f, 0x43, 0x41, 0x54, 0x45, 0x47, 0x4f, 0x52, 0x59, 0x5f, 0x57, 0x45, 0x41,
	0x50, 0x4f, 0x4e, 0x10, 0x02, 0x12, 0x1a, 0x0a, 0x16, 0x4f, 0x42, 0x4a, 0x45, 0x43, 0x54, 0x5f,
	0x43, 0x41, 0x54, 0x45, 0x47, 0x4f, 0x52, 0x59, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x49, 0x43, 0x10,
	0x03, 0x12, 0x1b, 0x0a, 0x17, 0x4f, 0x42, 0x4a, 0x45, 0x43, 0x54, 0x5f, 0x43, 0x41, 0x54, 0x45,
	0x47, 0x4f, 0x52, 0x59, 0x5f, 0x53, 0x43, 0x45, 0x4e, 0x45, 0x52, 0x59, 0x10, 0x04, 0x12, 0x18,
	0x0a, 0x14, 0x4f, 0x42, 0x4a, 0x45, 0x43, 0x54, 0x5f, 0x43, 0x41, 0x54, 0x45, 0x47, 0x4f, 0x52,
	0x59, 0x5f, 0x42, 0x41, 0x53, 0x45, 0x10, 0x05, 0x12, 0x19, 0x0a, 0x15, 0x4f, 0x42, 0x4a, 0x45,
	0x43, 0x54, 0x5f, 0x43, 0x41, 0x54, 0x45, 0x47, 0x4f, 0x52, 0x59, 0x5f, 0x43, 0x41, 0x52, 0x47,
	0x4f, 0x10, 0x06, 0x2a, 0x8b, 0x01, 0x0a, 0x0f, 0x41, 0x69, 0x72, 0x62, 0x61, 0x73, 0x65, 0x43,
	0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x12, 0x20, 0x0a, 0x1c, 0x41, 0x49, 0x52, 0x42, 0x41,
	0x53, 0x45, 0x5f, 0x43, 0x41, 0x54, 0x45, 0x47, 0x4f, 0x52, 0x59, 0x5f, 0x55, 0x4e, 0x53, 0x50,
	0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x1d, 0x0a, 0x19, 0x41, 0x49, 0x52,
	0x42, 0x41, 0x53, 0x45, 0x5f, 0x43, 0x41, 0x54, 0x45, 0x47, 0x4f, 0x52, 0x59, 0x5f, 0x41, 0x49,
	0x52, 0x44, 0x52, 0x4f, 0x4d, 0x45, 0x10, 0x01, 0x12, 0x1c, 0x0a, 0x18, 0x41, 0x49, 0x52, 0x42,
	0x41, 0x53, 0x45, 0x5f, 0x43, 0x41, 0x54, 0x45, 0x47, 0x4f, 0x52, 0x59, 0x5f, 0x48, 0x45, 0x4c,
	0x49, 0x50, 0x41, 0x44, 0x10, 0x02, 0x12, 0x19, 0x0a, 0x15, 0x41, 0x49, 0x52, 0x42, 0x41, 0x53,
	0x45, 0x5f, 0x43, 0x41, 0x54, 0x45, 0x47, 0x4f, 0x52, 0x59, 0x5f, 0x53, 0x48, 0x49, 0x50, 0x10,
	0x03, 0x2a, 0x5c, 0x0a, 0x09, 0x43, 0x6f, 0x61, 0x6c, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x11,
	0x0a, 0x0d, 0x43, 0x4f, 0x41, 0x4c, 0x49, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x41, 0x4c, 0x4c, 0x10,
	0x00, 0x12, 0x15, 0x0a, 0x11, 0x43, 0x4f, 0x41, 0x4c, 0x49, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x4e,
	0x45, 0x55, 0x54, 0x52, 0x41, 0x4c, 0x10, 0x01, 0x12, 0x11, 0x0a, 0x0d, 0x43, 0x4f, 0x41, 0x4c,
	0x49, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x52, 0x45, 0x44, 0x10, 0x02, 0x12, 0x12, 0x0a, 0x0e, 0x43,
	0x4f, 0x41, 0x4c, 0x49, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x42, 0x4c, 0x55, 0x45, 0x10, 0x03, 0x2a,
	0xd9, 0x0f, 0x0a, 0x07, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x17, 0x0a, 0x13, 0x43,
	0x4f, 0x55, 0x4e, 0x54, 0x52, 0x59, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49,
	0x45, 0x44, 0x10, 0x00, 0x12, 0x12, 0x0a, 0x0e, 0x43, 0x4f, 0x55, 0x4e, 0x54, 0x52, 0x59, 0x5f,
	0x52, 0x55, 0x53, 0x53, 0x49, 0x41, 0x10, 0x01, 0x12, 0x13, 0x0a, 0x0f, 0x43, 0x4f, 0x55, 0x4e,
	0x54, 0x52, 0x59, 0x5f, 0x55, 0x4b, 0x52, 0x41, 0x49, 0x4e, 0x45, 0x10, 0x02, 0x12, 0x24, 0x0a,
	0x20, 0x43, 0x4f, 0x55, 0x4e, 0x54, 0x52, 0x59, 0x5f, 0x55, 0x4e, 0x49, 0x54, 0x45, 0x44, 0x5f,
	0x53, 0x54, 0x41, 0x54, 0x45, 0x53, 0x5f, 0x4f, 0x46, 0x5f, 0x41, 0x4d, 0x45, 0x52, 0x49, 0x43,
	0x41, 0x10, 0x03, 0x12, 0x12, 0x0a, 0x0e, 0x43, 0x4f, 0x55, 0x4e, 0x54, 0x52, 0x59, 0x5f, 0x54,
	0x55, 0x52, 0x4b, 0x45, 0x59, 0x10, 0x04, 0x12, 0x1a, 0x0a, 0x16, 0x43, 0x4f, 0x55, 0x4e, 0x54,
	0x52, 0x59, 0x5f, 0x55, 0x4e, 0x49, 0x54, 0x45, 0x44, 0x5f, 0x4b, 0x49, 0x4e, 0x47, 0x44, 0x4f,
	0x4d, 0x10, 0x05, 0x12, 0x12, 0x0a, 0x0e, 0x43, 0x4f, 0x55, 0x4e, 0x54, 0x52, 0x59, 0x5f, 0x46,
	0x52, 0x41, 0x4e, 0x43, 0x45, 0x10, 0x06, 0x12, 0x13, 0x0a, 0x0f, 0x43, 0x4f, 0x55, 0x4e, 0x54,
	0x52, 0x59, 0x5f, 0x47, 0x45, 0x52, 0x4d, 0x41, 0x4e, 0x59, 0x10, 0x07, 0x12, 0x16, 0x0a, 0x12,
	0x43, 0x4f, 0x55, 0x4e, 0x54, 0x52, 0x59, 0x5f, 0x41, 0x47, 0x47, 0x52, 0x45, 0x53, 0x53, 0x4f,
	0x52, 0x53, 0x10, 0x08, 0x12, 0x12, 0x0a, 0x0e, 0x43, 0x4f, 0x55, 0x4e, 0x54, 0x52, 0x59, 0x5f,
	0x43, 0x41, 0x4e, 0x41, 0x44, 0x41, 0x10, 0x09, 0x12, 0x11, 0x0a, 0x0d, 0x43, 0x4f, 0x55, 0x4e,
	0x54, 0x52, 0x59, 0x5f, 0x53, 0x50, 0x41, 0x49, 0x4e, 0x10, 0x0a, 0x12, 0x1b, 0x0a, 0x17, 0x43,
	0x4f, 0x55, 0x4e, 0x54, 0x52, 0x59, 0x5f, 0x54, 0x48, 0x45, 0x5f, 0x4e, 0x45, 0x54, 0x48, 0x45,
	0x52, 0x4c, 0x41, 0x4e, 0x44, 0x53, 0x10, 0x0b, 0x12, 0x13, 0x0a, 0x0f, 0x43, 0x4f, 0x55, 0x4e,
	0x54, 0x52, 0x59, 0x5f, 0x42, 0x45, 0x4c, 0x47, 0x49, 0x55, 0x4d, 0x10, 0x0c, 0x12, 0x12, 0x0a,
	0x0e, 0x43, 0x4f, 0x55, 0x4e, 0x54, 0x52, 0x59, 0x5f, 0x4e, 0x4f, 0x52, 0x57, 0x41, 0x59, 0x10,
	0x0d, 0x12, 0x13, 0x0a, 0x0f, 0x43, 0x4f, 0x55, 0x4e, 0x54, 0x52, 0x59, 0x5f, 0x44, 0x45, 0x4e,
	0x4d, 0x41, 0x52, 0x4b, 0x10, 0x0e, 0x12, 0x12, 0x0a, 0x0e, 0x43, 0x4f, 0x55, 0x4e, 0x54, 0x52,
	0x59, 0x5f, 0x55, 0x4e, 0x55, 0x53, 0x45, 0x44, 0x10, 0x0f, 0x12, 0x12, 0x0a, 0x0e, 0x43, 0x4f,
	0x55, 0x4e, 0x54, 0x52, 0x59, 0x5f, 0x49, 0x53, 0x52, 0x41, 0x45, 0x4c, 0x10, 0x10, 0x12, 0x13,
	0x0a, 0x0f, 0x43, 0x4f, 0x55, 0x4e, 0x54, 0x52, 0x59, 0x5f, 0x47, 0x45, 0x4f, 0x52, 0x47, 0x49,
	0x41, 0x10, 0x11, 0x12, 0x16, 0x0a, 0x12, 0x43, 0x4f, 0x55, 0x4e, 0x54, 0x52, 0x59, 0x5f, 0x49,
	0x4e, 0x53, 0x55, 0x52, 0x47, 0x45, 0x4e, 0x54, 0x53, 0x10, 0x12, 0x12, 0x14, 0x0a, 0x10, 0x43,
	0x4f, 0x55, 0x4e, 0x54, 0x52, 0x59, 0x5f, 0x41, 0x42, 0x4b, 0x48, 0x41, 0x5a, 0x49, 0x41, 0x10,
	0x13, 0x12, 0x18, 0x0a, 0x14, 0x43, 0x4f, 0x55, 0x4e, 0x54, 0x52, 0x59, 0x5f, 0x53, 0x4f, 0x55,
	0x54, 0x48, 0x5f, 0x4f, 0x53, 0x45, 0x54, 0x49, 0x41, 0x10, 0x14, 0x12, 0x11, 0x0a, 0x0d, 0x43,
	0x4f, 0x55, 0x4e, 0x54, 0x52, 0x59, 0x5f, 0x49, 0x54, 0x41, 0x4c, 0x59, 0x10, 0x15, 0x12, 0x15,
	0x0a, 0x11, 0x43, 0x4f, 0x55, 0x4e, 0x54, 0x52, 0x59, 0x5f, 0x41, 0x55, 0x53, 0x54, 0x52, 0x41,
	0x4c, 0x49, 0x41, 0x10, 0x16, 0x12, 0x17, 0x0a, 0x13, 0x43, 0x4f, 0x55, 0x4e, 0x54, 0x52, 0x59,
	0x5f, 0x53, 0x57, 0x49, 0x54, 0x5a, 0x45, 0x52, 0x4c, 0x41, 0x4e, 0x44, 0x10, 0x17, 0x12, 0x13,
	0x0a, 0x0f, 0x43, 0x4f, 0x55, 0x4e, 0x54, 0x52, 0x59, 0x5f, 0x41, 0x55, 0x53, 0x54, 0x52, 0x49,
	0x41, 0x10, 0x18, 0x12, 0x13, 0x0a, 0x0f, 0x43, 0x4f, 0x55, 0x4e, 0x54, 0x52, 0x59, 0x5f, 0x42,
	0x45, 0x4c, 0x41, 0x52, 0x55, 0x53, 0x10, 0x19, 0x12, 0x14, 0x0a, 0x10, 0x43, 0x4f, 0x55, 0x4e,
	0x54, 0x52, 0x59, 0x5f, 0x42, 0x55, 0x4c, 0x47, 0x41, 0x52, 0x49, 0x41, 0x10, 0x1a, 0x12, 0x1a,
	0x0a, 0x16, 0x43, 0x4f, 0x55, 0x4e, 0x54, 0x52, 0x59, 0x5f, 0x43, 0x5a, 0x45, 0x43, 0x48, 0x5f,
	0x52, 0x45, 0x50, 0x55, 0x42, 0x4c, 0x49, 0x43, 0x10, 0x1b, 0x12, 0x11, 0x0a, 0x0d, 0x43, 0x4f,
	0x55, 0x4e, 0x54, 0x52, 0x59, 0x5f, 0x43, 0x48, 0x49, 0x4e, 0x41, 0x10, 0x1c, 0x12, 0x13, 0x0a,
	0x0f, 0x43, 0x4f, 0x55, 0x4e, 0x54, 0x52, 0x59, 0x5f, 0x43, 0x52, 0x4f, 0x41, 0x54, 0x49, 0x41,
	0x10, 0x1d, 0x12, 0x11, 0x0a, 0x0d, 0x43, 0x4f, 0x55, 0x4e, 0x54, 0x52, 0x59, 0x5f, 0x45, 0x47,
	0x59, 0x50, 0x54, 0x10, 0x1e, 0x12, 0x13, 0x0a, 0x0f, 0x43, 0x4f, 0x55, 0x4e, 0x54, 0x52, 0x59,
	0x5f, 0x46, 0x49, 0x4e, 0x4c, 0x41, 0x4e, 0x44, 0x10, 0x1f, 0x12, 0x12, 0x0a, 0x0e, 0x43, 0x4f,
	0x55, 0x4e, 0x54, 0x52, 0x59, 0x5f, 0x47, 0x52, 0x45, 0x45, 0x43, 0x45, 0x10, 0x20, 0x12, 0x13,
	0x0a, 0x0f, 0x43, 0x4f, 0x55, 0x4e, 0x54, 0x52, 0x59, 0x5f, 0x48, 0x55, 0x4e, 0x47, 0x41, 0x52,
	0x59, 0x10, 0x21, 0x12, 0x11, 0x0a, 0x0d, 0x43, 0x4f, 0x55, 0x4e, 0x54, 0x52, 0x59, 0x5f, 0x49,
	0x4e, 0x44, 0x49, 0x41, 0x10, 0x22, 0x12, 0x10, 0x0a, 0x0c, 0x43, 0x4f, 0x55, 0x4e, 0x54, 0x52,
	0x59, 0x5f, 0x49, 0x52, 0x41, 0x4e, 0x10, 0x23, 0x12, 0x10, 0x0a, 0x0c, 0x43, 0x4f, 0x55, 0x4e,
	0x54, 0x52, 0x59, 0x5f, 0x49, 0x52, 0x41, 0x51, 0x10, 0x24, 0x12, 0x11, 0x0a, 0x0d, 0x43, 0x4f,
	0x55, 0x4e, 0x54, 0x52, 0x59, 0x5f, 0x4a, 0x41, 0x50, 0x41, 0x4e, 0x10, 0x25, 0x12, 0x16, 0x0a,
	0x12, 0x43, 0x4f, 0x55, 0x4e, 0x54, 0x52, 0x59, 0x5f, 0x4b, 0x41, 0x5a, 0x41, 0x4b, 0x48, 0x53,
	0x54, 0x41, 0x4e, 0x10, 0x26, 0x12, 0x17, 0x0a, 0x13, 0x43, 0x4f, 0x55, 0x4e, 0x54, 0x52, 0x59,
	0x5f, 0x4e, 0x4f, 0x52, 0x54, 0x48, 0x5f, 0x4b, 0x4f, 0x52, 0x45, 0x41, 0x10, 0x27, 0x12, 0x14,
	0x0a, 0x10, 0x43, 0x4f, 0x55, 0x4e, 0x54, 0x52, 0x59, 0x5f, 0x50, 0x41, 0x4b, 0x49, 0x53, 0x54,
	0x41, 0x4e, 0x10, 0x28, 0x12, 0x12, 0x0a, 0x0e, 0x43, 0x4f, 0x55, 0x4e, 0x54, 0x52, 0x59, 0x5f,
	0x50, 0x4f, 0x4c, 0x41, 0x4e, 0x44, 0x10, 0x29, 0x12, 0x13, 0x0a, 0x0f, 0x43, 0x4f, 0x55, 0x4e,
	0x54, 0x52, 0x59, 0x5f, 0x52, 0x4f, 0x4d, 0x41, 0x4e, 0x49, 0x41, 0x10, 0x2a, 0x12, 0x18, 0x0a,
	0x14, 0x43, 0x4f, 0x55, 0x4e, 0x54, 0x52, 0x59, 0x5f, 0x53, 0x41, 0x55, 0x44, 0x49, 0x5f, 0x41,
	0x52, 0x41, 0x42, 0x49, 0x41, 0x10, 0x2b, 0x12, 0x12, 0x0a, 0x0e, 0x43, 0x4f, 0x55, 0x4e, 0x54,
	0x52, 0x59, 0x5f, 0x53, 0x45, 0x52, 0x42, 0x49, 0x41, 0x10, 0x2c, 0x12, 0x14, 0x0a, 0x10, 0x43,
	0x4f, 0x55, 0x4e, 0x54, 0x52, 0x59, 0x5f, 0x53, 0x4c, 0x4f, 0x56, 0x41, 0x4b, 0x49, 0x41, 0x10,
	0x2d, 0x12, 0x17, 0x0a, 0x13, 0x43, 0x4f, 0x55, 0x4e, 0x54, 0x52, 0x59, 0x5f, 0x53, 0x4f, 0x55,
	0x54, 0x48, 0x5f, 0x4b, 0x4f, 0x52, 0x45, 0x41, 0x10, 0x2e, 0x12, 0x12, 0x0a, 0x0e, 0x43, 0x4f,
	0x55, 0x4e, 0x54, 0x52, 0x59, 0x5f, 0x53, 0x57, 0x45, 0x44, 0x45, 0x4e, 0x10, 0x2f, 0x12, 0x11,
	0x0a, 0x0d, 0x43, 0x4f, 0x55, 0x4e, 0x54, 0x52, 0x59, 0x5f, 0x53, 0x59, 0x52, 0x49, 0x41, 0x10,
	0x30, 0x12, 0x11, 0x0a, 0x0d, 0x43, 0x4f, 0x55, 0x4e, 0x54, 0x52, 0x59, 0x5f, 0x59, 0x45, 0x4d,
	0x45, 0x4e, 0x10, 0x31, 0x12, 0x13, 0x0a, 0x0f, 0x43, 0x4f, 0x55, 0x4e, 0x54, 0x52, 0x59, 0x5f,
	0x56, 0x49, 0x45, 0x54, 0x4e, 0x41, 0x4d, 0x10, 0x32, 0x12, 0x15, 0x0a, 0x11, 0x43, 0x4f, 0x55,
	0x4e, 0x54, 0x52, 0x59, 0x5f, 0x56, 0x45, 0x4e, 0x45, 0x5a, 0x55, 0x45, 0x4c, 0x41, 0x10, 0x33,
	0x12, 0x13, 0x0a, 0x0f, 0x43, 0x4f, 0x55, 0x4e, 0x54, 0x52, 0x59, 0x5f, 0x54, 0x55, 0x4e, 0x49,
	0x53, 0x49, 0x41, 0x10, 0x34, 0x12, 0x14, 0x0a, 0x10, 0x43, 0x4f, 0x55, 0x4e, 0x54, 0x52, 0x59,
	0x5f, 0x54, 0x48, 0x41, 0x49, 0x4c, 0x41, 0x4e, 0x44, 0x10, 0x35, 0x12, 0x11, 0x0a, 0x0d, 0x43,
	0x4f, 0x55, 0x4e, 0x54, 0x52, 0x59, 0x5f, 0x53, 0x55, 0x44, 0x41, 0x4e, 0x10, 0x36, 0x12, 0x17,
	0x0a, 0x13, 0x43, 0x4f, 0x55, 0x4e, 0x54, 0x52, 0x59, 0x5f, 0x50, 0x48, 0x49, 0x4c, 0x49, 0x50,
	0x50, 0x49, 0x4e, 0x45, 0x53, 0x10, 0x37, 0x12, 0x13, 0x0a, 0x0f, 0x43, 0x4f, 0x55, 0x4e, 0x54,
	0x52, 0x59, 0x5f, 0x4d, 0x4f, 0x52, 0x4f, 0x43, 0x43, 0x4f, 0x10, 0x38, 0x12, 0x12, 0x0a, 0x0e,
	0x43, 0x4f, 0x55, 0x4e, 0x54, 0x52, 0x59, 0x5f, 0x4d, 0x45, 0x58, 0x49, 0x43, 0x4f, 0x10, 0x39,
	0x12, 0x14, 0x0a, 0x10, 0x43, 0x4f, 0x55, 0x4e, 0x54, 0x52, 0x59, 0x5f, 0x4d, 0x41, 0x4c, 0x41,
	0x59, 0x53, 0x49, 0x41, 0x10, 0x3a, 0x12, 0x11, 0x0a, 0x0d, 0x43, 0x4f, 0x55, 0x4e, 0x54, 0x52,
	0x59, 0x5f, 0x4c, 0x49, 0x42, 0x59, 0x41, 0x10, 0x3b, 0x12, 0x12, 0x0a, 0x0e, 0x43, 0x4f, 0x55,
	0x4e, 0x54, 0x52, 0x59, 0x5f, 0x4a, 0x4f, 0x52, 0x44, 0x41, 0x4e, 0x10, 0x3c, 0x12, 0x15, 0x0a,
	0x11, 0x43, 0x4f, 0x55, 0x4e, 0x54, 0x52, 0x59, 0x5f, 0x49, 0x4e, 0x44, 0x4f, 0x4e, 0x45, 0x53,
	0x49, 0x41, 0x10, 0x3d, 0x12, 0x14, 0x0a, 0x10, 0x43, 0x4f, 0x55, 0x4e, 0x54, 0x52, 0x59, 0x5f,
	0x48, 0x4f, 0x4e, 0x44, 0x55, 0x52, 0x41, 0x53, 0x10, 0x3e, 0x12, 0x14, 0x0a, 0x10, 0x43, 0x4f,
	0x55, 0x4e, 0x54, 0x52, 0x59, 0x5f, 0x45, 0x54, 0x48, 0x49, 0x4f, 0x50, 0x49, 0x41, 0x10, 0x3f,
	0x12, 0x11, 0x0a, 0x0d, 0x43, 0x4f, 0x55, 0x4e, 0x54, 0x52, 0x59, 0x5f, 0x43, 0x48, 0x49, 0x4c,
	0x45, 0x10, 0x40, 0x12, 0x12, 0x0a, 0x0e, 0x43, 0x4f, 0x55, 0x4e, 0x54, 0x52, 0x59, 0x5f, 0x42,
	0x52, 0x41, 0x5a, 0x49, 0x4c, 0x10, 0x41, 0x12, 0x13, 0x0a, 0x0f, 0x43, 0x4f, 0x55, 0x4e, 0x54,
	0x52, 0x59, 0x5f, 0x42, 0x41, 0x48, 0x52, 0x41, 0x49, 0x4e, 0x10, 0x42, 0x12, 0x16, 0x0a, 0x12,
	0x43, 0x4f, 0x55, 0x4e, 0x54, 0x52, 0x59, 0x5f, 0x54, 0x48, 0x49, 0x52, 0x44, 0x52, 0x45, 0x49,
	0x43, 0x48, 0x10, 0x43, 0x12, 0x16, 0x0a, 0x12, 0x43, 0x4f, 0x55, 0x4e, 0x54, 0x52, 0x59, 0x5f,
	0x59, 0x55, 0x47, 0x4f, 0x53, 0x4c, 0x41, 0x56, 0x49, 0x41, 0x10, 0x44, 0x12, 0x18, 0x0a, 0x14,
	0x43, 0x4f, 0x55, 0x4e, 0x54, 0x52, 0x59, 0x5f, 0x53, 0x4f, 0x56, 0x49, 0x45, 0x54, 0x5f, 0x55,
	0x4e, 0x49, 0x4f, 0x4e, 0x10, 0x45, 0x12, 0x23, 0x0a, 0x1f, 0x43, 0x4f, 0x55, 0x4e, 0x54, 0x52,
	0x59, 0x5f, 0x49, 0x54, 0x41, 0x4c, 0x49, 0x41, 0x4e, 0x5f, 0x53, 0x4f, 0x43, 0x49, 0x41, 0x4c,
	0x5f, 0x52, 0x45, 0x50, 0x55, 0x42, 0x4c, 0x49, 0x43, 0x10, 0x46, 0x12, 0x13, 0x0a, 0x0f, 0x43,
	0x4f, 0x55, 0x4e, 0x54, 0x52, 0x59, 0x5f, 0x41, 0x4c, 0x47, 0x45, 0x52, 0x49, 0x41, 0x10, 0x47,
	0x12, 0x12, 0x0a, 0x0e, 0x43, 0x4f, 0x55, 0x4e, 0x54, 0x52, 0x59, 0x5f, 0x4b, 0x55, 0x57, 0x41,
	0x49, 0x54, 0x10, 0x48, 0x12, 0x11, 0x0a, 0x0d, 0x43, 0x4f, 0x55, 0x4e, 0x54, 0x52, 0x59, 0x5f,
	0x51, 0x41, 0x54, 0x41, 0x52, 0x10, 0x49, 0x12, 0x10, 0x0a, 0x0c, 0x43, 0x4f, 0x55, 0x4e, 0x54,
	0x52, 0x59, 0x5f, 0x4f, 0x4d, 0x41, 0x4e, 0x10, 0x4a, 0x12, 0x20, 0x0a, 0x1c, 0x43, 0x4f, 0x55,
	0x4e, 0x54, 0x52, 0x59, 0x5f, 0x55, 0x4e, 0x49, 0x54, 0x45, 0x44, 0x5f, 0x41, 0x52, 0x41, 0x42,
	0x5f, 0x45, 0x4d, 0x49, 0x52, 0x41, 0x54, 0x45, 0x53, 0x10, 0x4b, 0x12, 0x18, 0x0a, 0x14, 0x43,
	0x4f, 0x55, 0x4e, 0x54, 0x52, 0x59, 0x5f, 0x53, 0x4f, 0x55, 0x54, 0x48, 0x5f, 0x41, 0x46, 0x52,
	0x49, 0x43, 0x41, 0x10, 0x4c, 0x12, 0x10, 0x0a, 0x0c, 0x43, 0x4f, 0x55, 0x4e, 0x54, 0x52, 0x59,
	0x5f, 0x43, 0x55, 0x42, 0x41, 0x10, 0x4d, 0x12, 0x14, 0x0a, 0x10, 0x43, 0x4f, 0x55, 0x4e, 0x54,
	0x52, 0x59, 0x5f, 0x50, 0x4f, 0x52, 0x54, 0x55, 0x47, 0x41, 0x4c, 0x10, 0x4e, 0x12, 0x26, 0x0a,
	0x22, 0x43, 0x4f, 0x55, 0x4e, 0x54, 0x52, 0x59, 0x5f, 0x47, 0x45, 0x52, 0x4d, 0x41, 0x4e, 0x5f,
	0x44, 0x45, 0x4d, 0x4f, 0x43, 0x52, 0x41, 0x54, 0x49, 0x43, 0x5f, 0x52, 0x45, 0x50, 0x55, 0x42,
	0x4c, 0x49, 0x43, 0x10, 0x4f, 0x12, 0x13, 0x0a, 0x0f, 0x43, 0x4f, 0x55, 0x4e, 0x54, 0x52, 0x59,
	0x5f, 0x4c, 0x45, 0x42, 0x41, 0x4e, 0x4f, 0x4e, 0x10, 0x50, 0x12, 0x2a, 0x0a, 0x26, 0x43, 0x4f,
	0x55, 0x4e, 0x54, 0x52, 0x59, 0x5f, 0x43, 0x4f, 0x4d, 0x42, 0x49, 0x4e, 0x45, 0x44, 0x5f, 0x4a,
	0x4f, 0x49, 0x4e, 0x54, 0x5f, 0x54, 0x41, 0x53, 0x4b, 0x5f, 0x46, 0x4f, 0x52, 0x43, 0x45, 0x5f,
	0x42, 0x4c, 0x55, 0x45, 0x10, 0x51, 0x12, 0x29, 0x0a, 0x25, 0x43, 0x4f, 0x55, 0x4e, 0x54, 0x52,
	0x59, 0x5f, 0x43, 0x4f, 0x4d, 0x42, 0x49, 0x4e, 0x45, 0x44, 0x5f, 0x4a, 0x4f, 0x49, 0x4e, 0x54,
	0x5f, 0x54, 0x41, 0x53, 0x4b, 0x5f, 0x46, 0x4f, 0x52, 0x43, 0x45, 0x5f, 0x52, 0x45, 0x44, 0x10,
	0x52, 0x12, 0x27, 0x0a, 0x23, 0x43, 0x4f, 0x55, 0x4e, 0x54, 0x52, 0x59, 0x5f, 0x55, 0x4e, 0x49,
	0x54, 0x45, 0x44, 0x5f, 0x4e, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x53, 0x5f, 0x50, 0x45, 0x41, 0x43,
	0x45, 0x4b, 0x45, 0x45, 0x50, 0x45, 0x52, 0x53, 0x10, 0x53, 0x12, 0x15, 0x0a, 0x11, 0x43, 0x4f,
	0x55, 0x4e, 0x54, 0x52, 0x59, 0x5f, 0x41, 0x52, 0x47, 0x45, 0x4e, 0x54, 0x49, 0x4e, 0x41, 0x10,
	0x54, 0x12, 0x12, 0x0a, 0x0e, 0x43, 0x4f, 0x55, 0x4e, 0x54, 0x52, 0x59, 0x5f, 0x43, 0x59, 0x50,
	0x52, 0x55, 0x53, 0x10, 0x55, 0x12, 0x14, 0x0a, 0x10, 0x43, 0x4f, 0x55, 0x4e, 0x54, 0x52, 0x59,
	0x5f, 0x53, 0x4c, 0x4f, 0x56, 0x45, 0x4e, 0x49, 0x41, 0x10, 0x56, 0x2a, 0xb9, 0x01, 0x0a, 0x0d,
	0x47, 0x72, 0x6f, 0x75, 0x70, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x12, 0x1e, 0x0a,
	0x1a, 0x47, 0x52, 0x4f, 0x55, 0x50, 0x5f, 0x43, 0x41, 0x54, 0x45, 0x47, 0x4f, 0x52, 0x59, 0x5f,
	0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x1b, 0x0a,
	0x17, 0x47, 0x52, 0x4f, 0x55, 0x50, 0x5f, 0x43, 0x41, 0x54, 0x45, 0x47, 0x4f, 0x52, 0x59, 0x5f,
	0x41, 0x49, 0x52, 0x50, 0x4c, 0x41, 0x4e, 0x45, 0x10, 0x01, 0x12, 0x1d, 0x0a, 0x19, 0x47, 0x52,
	0x4f, 0x55, 0x50, 0x5f, 0x43, 0x41, 0x54, 0x45, 0x47, 0x4f, 0x52, 0x59, 0x5f, 0x48, 0x45, 0x4c,
	0x49, 0x43, 0x4f, 0x50, 0x54, 0x45, 0x52, 0x10, 0x02, 0x12, 0x19, 0x0a, 0x15, 0x47, 0x52, 0x4f,
	0x55, 0x50, 0x5f, 0x43, 0x41, 0x54, 0x45, 0x47, 0x4f, 0x52, 0x59, 0x5f, 0x47, 0x52, 0x4f, 0x55,
	0x4e, 0x44, 0x10, 0x03, 0x12, 0x17, 0x0a, 0x13, 0x47, 0x52, 0x4f, 0x55, 0x50, 0x5f, 0x43, 0x41,
	0x54, 0x45, 0x47, 0x4f, 0x52, 0x59, 0x5f, 0x53, 0x48, 0x49, 0x50, 0x10, 0x04, 0x12, 0x18, 0x0a,
	0x14, 0x47, 0x52, 0x4f, 0x55, 0x50, 0x5f, 0x43, 0x41, 0x54, 0x45, 0x47, 0x4f, 0x52, 0x59, 0x5f,
	0x54, 0x52, 0x41, 0x49, 0x4e, 0x10, 0x05, 0x42, 0x51, 0x5a, 0x2d, 0x67, 0x69, 0x74, 0x68, 0x75,
	0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x44, 0x43, 0x53, 0x2d, 0x67, 0x52, 0x50, 0x43, 0x2f, 0x67,
	0x6f, 0x2d, 0x62, 0x69, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x73, 0x2f, 0x64, 0x63, 0x73, 0x2f, 0x76,
	0x30, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0xaa, 0x02, 0x1f, 0x52, 0x75, 0x72, 0x6f, 0x75,
	0x6e, 0x69, 0x4a, 0x6f, 0x6e, 0x65, 0x73, 0x2e, 0x44, 0x63, 0x73, 0x2e, 0x47, 0x72, 0x70, 0x63,
	0x2e, 0x56, 0x30, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x33,
}

var (
	file_dcs_common_v0_common_proto_rawDescOnce sync.Once
	file_dcs_common_v0_common_proto_rawDescData = file_dcs_common_v0_common_proto_rawDesc
)

func file_dcs_common_v0_common_proto_rawDescGZIP() []byte {
	file_dcs_common_v0_common_proto_rawDescOnce.Do(func() {
		file_dcs_common_v0_common_proto_rawDescData = protoimpl.X.CompressGZIP(file_dcs_common_v0_common_proto_rawDescData)
	})
	return file_dcs_common_v0_common_proto_rawDescData
}

var file_dcs_common_v0_common_proto_enumTypes = make([]protoimpl.EnumInfo, 5)
var file_dcs_common_v0_common_proto_msgTypes = make([]protoimpl.MessageInfo, 13)
var file_dcs_common_v0_common_proto_goTypes = []interface{}{
	(ObjectCategory)(0),  // 0: dcs.common.v0.ObjectCategory
	(AirbaseCategory)(0), // 1: dcs.common.v0.AirbaseCategory
	(Coalition)(0),       // 2: dcs.common.v0.Coalition
	(Country)(0),         // 3: dcs.common.v0.Country
	(GroupCategory)(0),   // 4: dcs.common.v0.GroupCategory
	(*Position)(nil),     // 5: dcs.common.v0.Position
	(*Unknown)(nil),      // 6: dcs.common.v0.Unknown
	(*Unit)(nil),         // 7: dcs.common.v0.Unit
	(*Group)(nil),        // 8: dcs.common.v0.Group
	(*Weapon)(nil),       // 9: dcs.common.v0.Weapon
	(*Static)(nil),       // 10: dcs.common.v0.Static
	(*Scenery)(nil),      // 11: dcs.common.v0.Scenery
	(*Airbase)(nil),      // 12: dcs.common.v0.Airbase
	(*Cargo)(nil),        // 13: dcs.common.v0.Cargo
	(*Initiator)(nil),    // 14: dcs.common.v0.Initiator
	(*Target)(nil),       // 15: dcs.common.v0.Target
	(*MarkPanel)(nil),    // 16: dcs.common.v0.MarkPanel
	(*Vector)(nil),       // 17: dcs.common.v0.Vector
}
var file_dcs_common_v0_common_proto_depIdxs = []int32{
	2,  // 0: dcs.common.v0.Unit.coalition:type_name -> dcs.common.v0.Coalition
	5,  // 1: dcs.common.v0.Unit.position:type_name -> dcs.common.v0.Position
	4,  // 2: dcs.common.v0.Unit.category:type_name -> dcs.common.v0.GroupCategory
	2,  // 3: dcs.common.v0.Group.coalition:type_name -> dcs.common.v0.Coalition
	4,  // 4: dcs.common.v0.Group.category:type_name -> dcs.common.v0.GroupCategory
	5,  // 5: dcs.common.v0.Weapon.position:type_name -> dcs.common.v0.Position
	2,  // 6: dcs.common.v0.Static.coalition:type_name -> dcs.common.v0.Coalition
	5,  // 7: dcs.common.v0.Static.position:type_name -> dcs.common.v0.Position
	5,  // 8: dcs.common.v0.Scenery.position:type_name -> dcs.common.v0.Position
	2,  // 9: dcs.common.v0.Airbase.coalition:type_name -> dcs.common.v0.Coalition
	5,  // 10: dcs.common.v0.Airbase.position:type_name -> dcs.common.v0.Position
	1,  // 11: dcs.common.v0.Airbase.category:type_name -> dcs.common.v0.AirbaseCategory
	6,  // 12: dcs.common.v0.Initiator.unknown:type_name -> dcs.common.v0.Unknown
	7,  // 13: dcs.common.v0.Initiator.unit:type_name -> dcs.common.v0.Unit
	9,  // 14: dcs.common.v0.Initiator.weapon:type_name -> dcs.common.v0.Weapon
	10, // 15: dcs.common.v0.Initiator.static:type_name -> dcs.common.v0.Static
	11, // 16: dcs.common.v0.Initiator.scenery:type_name -> dcs.common.v0.Scenery
	12, // 17: dcs.common.v0.Initiator.airbase:type_name -> dcs.common.v0.Airbase
	13, // 18: dcs.common.v0.Initiator.cargo:type_name -> dcs.common.v0.Cargo
	6,  // 19: dcs.common.v0.Target.unknown:type_name -> dcs.common.v0.Unknown
	7,  // 20: dcs.common.v0.Target.unit:type_name -> dcs.common.v0.Unit
	9,  // 21: dcs.common.v0.Target.weapon:type_name -> dcs.common.v0.Weapon
	10, // 22: dcs.common.v0.Target.static:type_name -> dcs.common.v0.Static
	11, // 23: dcs.common.v0.Target.scenery:type_name -> dcs.common.v0.Scenery
	12, // 24: dcs.common.v0.Target.airbase:type_name -> dcs.common.v0.Airbase
	13, // 25: dcs.common.v0.Target.cargo:type_name -> dcs.common.v0.Cargo
	7,  // 26: dcs.common.v0.MarkPanel.initiator:type_name -> dcs.common.v0.Unit
	2,  // 27: dcs.common.v0.MarkPanel.coalition:type_name -> dcs.common.v0.Coalition
	5,  // 28: dcs.common.v0.MarkPanel.position:type_name -> dcs.common.v0.Position
	29, // [29:29] is the sub-list for method output_type
	29, // [29:29] is the sub-list for method input_type
	29, // [29:29] is the sub-list for extension type_name
	29, // [29:29] is the sub-list for extension extendee
	0,  // [0:29] is the sub-list for field type_name
}

func init() { file_dcs_common_v0_common_proto_init() }
func file_dcs_common_v0_common_proto_init() {
	if File_dcs_common_v0_common_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_dcs_common_v0_common_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Position); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dcs_common_v0_common_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Unknown); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dcs_common_v0_common_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Unit); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dcs_common_v0_common_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Group); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dcs_common_v0_common_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Weapon); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dcs_common_v0_common_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Static); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dcs_common_v0_common_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Scenery); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dcs_common_v0_common_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Airbase); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dcs_common_v0_common_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Cargo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dcs_common_v0_common_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Initiator); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dcs_common_v0_common_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Target); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dcs_common_v0_common_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MarkPanel); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dcs_common_v0_common_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Vector); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_dcs_common_v0_common_proto_msgTypes[2].OneofWrappers = []interface{}{}
	file_dcs_common_v0_common_proto_msgTypes[7].OneofWrappers = []interface{}{}
	file_dcs_common_v0_common_proto_msgTypes[9].OneofWrappers = []interface{}{
		(*Initiator_Unknown)(nil),
		(*Initiator_Unit)(nil),
		(*Initiator_Weapon)(nil),
		(*Initiator_Static)(nil),
		(*Initiator_Scenery)(nil),
		(*Initiator_Airbase)(nil),
		(*Initiator_Cargo)(nil),
	}
	file_dcs_common_v0_common_proto_msgTypes[10].OneofWrappers = []interface{}{
		(*Target_Unknown)(nil),
		(*Target_Unit)(nil),
		(*Target_Weapon)(nil),
		(*Target_Static)(nil),
		(*Target_Scenery)(nil),
		(*Target_Airbase)(nil),
		(*Target_Cargo)(nil),
	}
	file_dcs_common_v0_common_proto_msgTypes[11].OneofWrappers = []interface{}{}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_dcs_common_v0_common_proto_rawDesc,
			NumEnums:      5,
			NumMessages:   13,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_dcs_common_v0_common_proto_goTypes,
		DependencyIndexes: file_dcs_common_v0_common_proto_depIdxs,
		EnumInfos:         file_dcs_common_v0_common_proto_enumTypes,
		MessageInfos:      file_dcs_common_v0_common_proto_msgTypes,
	}.Build()
	File_dcs_common_v0_common_proto = out.File
	file_dcs_common_v0_common_proto_rawDesc = nil
	file_dcs_common_v0_common_proto_goTypes = nil
	file_dcs_common_v0_common_proto_depIdxs = nil
}
