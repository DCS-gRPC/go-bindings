// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package hook

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// HookServiceClient is the client API for HookService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type HookServiceClient interface {
	// https://wiki.hoggitworld.com/view/DCS_func_getMissionName
	GetMissionName(ctx context.Context, in *GetMissionNameRequest, opts ...grpc.CallOption) (*GetMissionNameResponse, error)
	// Evaluate some Lua inside of the hook environment and return the result as a
	// JSON string. Disabled by default.
	Eval(ctx context.Context, in *EvalRequest, opts ...grpc.CallOption) (*EvalResponse, error)
}

type hookServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewHookServiceClient(cc grpc.ClientConnInterface) HookServiceClient {
	return &hookServiceClient{cc}
}

func (c *hookServiceClient) GetMissionName(ctx context.Context, in *GetMissionNameRequest, opts ...grpc.CallOption) (*GetMissionNameResponse, error) {
	out := new(GetMissionNameResponse)
	err := c.cc.Invoke(ctx, "/dcs.hook.v0.HookService/GetMissionName", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hookServiceClient) Eval(ctx context.Context, in *EvalRequest, opts ...grpc.CallOption) (*EvalResponse, error) {
	out := new(EvalResponse)
	err := c.cc.Invoke(ctx, "/dcs.hook.v0.HookService/Eval", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// HookServiceServer is the server API for HookService service.
// All implementations must embed UnimplementedHookServiceServer
// for forward compatibility
type HookServiceServer interface {
	// https://wiki.hoggitworld.com/view/DCS_func_getMissionName
	GetMissionName(context.Context, *GetMissionNameRequest) (*GetMissionNameResponse, error)
	// Evaluate some Lua inside of the hook environment and return the result as a
	// JSON string. Disabled by default.
	Eval(context.Context, *EvalRequest) (*EvalResponse, error)
	mustEmbedUnimplementedHookServiceServer()
}

// UnimplementedHookServiceServer must be embedded to have forward compatible implementations.
type UnimplementedHookServiceServer struct {
}

func (UnimplementedHookServiceServer) GetMissionName(context.Context, *GetMissionNameRequest) (*GetMissionNameResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMissionName not implemented")
}
func (UnimplementedHookServiceServer) Eval(context.Context, *EvalRequest) (*EvalResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Eval not implemented")
}
func (UnimplementedHookServiceServer) mustEmbedUnimplementedHookServiceServer() {}

// UnsafeHookServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to HookServiceServer will
// result in compilation errors.
type UnsafeHookServiceServer interface {
	mustEmbedUnimplementedHookServiceServer()
}

func RegisterHookServiceServer(s grpc.ServiceRegistrar, srv HookServiceServer) {
	s.RegisterService(&HookService_ServiceDesc, srv)
}

func _HookService_GetMissionName_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetMissionNameRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HookServiceServer).GetMissionName(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dcs.hook.v0.HookService/GetMissionName",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HookServiceServer).GetMissionName(ctx, req.(*GetMissionNameRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _HookService_Eval_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EvalRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HookServiceServer).Eval(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dcs.hook.v0.HookService/Eval",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HookServiceServer).Eval(ctx, req.(*EvalRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// HookService_ServiceDesc is the grpc.ServiceDesc for HookService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var HookService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "dcs.hook.v0.HookService",
	HandlerType: (*HookServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetMissionName",
			Handler:    _HookService_GetMissionName_Handler,
		},
		{
			MethodName: "Eval",
			Handler:    _HookService_Eval_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "dcs/hook/v0/hook.proto",
}
