// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.0
// 	protoc        v3.20.1
// source: dcs/mission/v0/mission.proto

package mission

import (
	common "github.com/DCS-gRPC/go-bindings/dcs/v0/common"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	structpb "google.golang.org/protobuf/types/known/structpb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

//*
// The reason a player disconnected for.
type StreamEventsResponse_DisconnectReason int32

const (
	StreamEventsResponse_DISCONNECT_REASON_UNSPECIFIED       StreamEventsResponse_DisconnectReason = 0
	StreamEventsResponse_DISCONNECT_REASON_THATS_OKAY        StreamEventsResponse_DisconnectReason = 1
	StreamEventsResponse_DISCONNECT_REASON_INVALID_ADDRESS   StreamEventsResponse_DisconnectReason = 2
	StreamEventsResponse_DISCONNECT_REASON_CONNECT_FAILED    StreamEventsResponse_DisconnectReason = 3
	StreamEventsResponse_DISCONNECT_REASON_WRONG_VERSION     StreamEventsResponse_DisconnectReason = 4
	StreamEventsResponse_DISCONNECT_REASON_PROTOCOL_ERROR    StreamEventsResponse_DisconnectReason = 5
	StreamEventsResponse_DISCONNECT_REASON_TIMEOUT           StreamEventsResponse_DisconnectReason = 6
	StreamEventsResponse_DISCONNECT_REASON_INVALID_PASSWORD  StreamEventsResponse_DisconnectReason = 101
	StreamEventsResponse_DISCONNECT_REASON_BANNED            StreamEventsResponse_DisconnectReason = 102
	StreamEventsResponse_DISCONNECT_REASON_BAD_CALLSIGN      StreamEventsResponse_DisconnectReason = 103
	StreamEventsResponse_DISCONNECT_REASON_TAINTED_CLIENT    StreamEventsResponse_DisconnectReason = 104
	StreamEventsResponse_DISCONNECT_REASON_KICKED            StreamEventsResponse_DisconnectReason = 105
	StreamEventsResponse_DISCONNECT_REASON_REFUSED           StreamEventsResponse_DisconnectReason = 106
	StreamEventsResponse_DISCONNECT_REASON_DENIED_TRIAL_ONLY StreamEventsResponse_DisconnectReason = 107
)

// Enum value maps for StreamEventsResponse_DisconnectReason.
var (
	StreamEventsResponse_DisconnectReason_name = map[int32]string{
		0:   "DISCONNECT_REASON_UNSPECIFIED",
		1:   "DISCONNECT_REASON_THATS_OKAY",
		2:   "DISCONNECT_REASON_INVALID_ADDRESS",
		3:   "DISCONNECT_REASON_CONNECT_FAILED",
		4:   "DISCONNECT_REASON_WRONG_VERSION",
		5:   "DISCONNECT_REASON_PROTOCOL_ERROR",
		6:   "DISCONNECT_REASON_TIMEOUT",
		101: "DISCONNECT_REASON_INVALID_PASSWORD",
		102: "DISCONNECT_REASON_BANNED",
		103: "DISCONNECT_REASON_BAD_CALLSIGN",
		104: "DISCONNECT_REASON_TAINTED_CLIENT",
		105: "DISCONNECT_REASON_KICKED",
		106: "DISCONNECT_REASON_REFUSED",
		107: "DISCONNECT_REASON_DENIED_TRIAL_ONLY",
	}
	StreamEventsResponse_DisconnectReason_value = map[string]int32{
		"DISCONNECT_REASON_UNSPECIFIED":       0,
		"DISCONNECT_REASON_THATS_OKAY":        1,
		"DISCONNECT_REASON_INVALID_ADDRESS":   2,
		"DISCONNECT_REASON_CONNECT_FAILED":    3,
		"DISCONNECT_REASON_WRONG_VERSION":     4,
		"DISCONNECT_REASON_PROTOCOL_ERROR":    5,
		"DISCONNECT_REASON_TIMEOUT":           6,
		"DISCONNECT_REASON_INVALID_PASSWORD":  101,
		"DISCONNECT_REASON_BANNED":            102,
		"DISCONNECT_REASON_BAD_CALLSIGN":      103,
		"DISCONNECT_REASON_TAINTED_CLIENT":    104,
		"DISCONNECT_REASON_KICKED":            105,
		"DISCONNECT_REASON_REFUSED":           106,
		"DISCONNECT_REASON_DENIED_TRIAL_ONLY": 107,
	}
)

func (x StreamEventsResponse_DisconnectReason) Enum() *StreamEventsResponse_DisconnectReason {
	p := new(StreamEventsResponse_DisconnectReason)
	*p = x
	return p
}

func (x StreamEventsResponse_DisconnectReason) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (StreamEventsResponse_DisconnectReason) Descriptor() protoreflect.EnumDescriptor {
	return file_dcs_mission_v0_mission_proto_enumTypes[0].Descriptor()
}

func (StreamEventsResponse_DisconnectReason) Type() protoreflect.EnumType {
	return &file_dcs_mission_v0_mission_proto_enumTypes[0]
}

func (x StreamEventsResponse_DisconnectReason) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use StreamEventsResponse_DisconnectReason.Descriptor instead.
func (StreamEventsResponse_DisconnectReason) EnumDescriptor() ([]byte, []int) {
	return file_dcs_mission_v0_mission_proto_rawDescGZIP(), []int{1, 0}
}

type StreamEventsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *StreamEventsRequest) Reset() {
	*x = StreamEventsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dcs_mission_v0_mission_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StreamEventsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StreamEventsRequest) ProtoMessage() {}

func (x *StreamEventsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_dcs_mission_v0_mission_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StreamEventsRequest.ProtoReflect.Descriptor instead.
func (*StreamEventsRequest) Descriptor() ([]byte, []int) {
	return file_dcs_mission_v0_mission_proto_rawDescGZIP(), []int{0}
}

// The DCS Event information. Contains event information and a timestamp.
type StreamEventsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The event's mission time.
	Time float64 `protobuf:"fixed64,1,opt,name=time,proto3" json:"time,omitempty"`
	// Types that are assignable to Event:
	//	*StreamEventsResponse_Shot
	//	*StreamEventsResponse_Hit
	//	*StreamEventsResponse_Takeoff
	//	*StreamEventsResponse_Land
	//	*StreamEventsResponse_Crash
	//	*StreamEventsResponse_Ejection
	//	*StreamEventsResponse_Refueling
	//	*StreamEventsResponse_Dead
	//	*StreamEventsResponse_PilotDead
	//	*StreamEventsResponse_BaseCapture
	//	*StreamEventsResponse_MissionStart
	//	*StreamEventsResponse_MissionEnd
	//	*StreamEventsResponse_RefuelingStop
	//	*StreamEventsResponse_Birth
	//	*StreamEventsResponse_HumanFailure
	//	*StreamEventsResponse_DetailedFailure
	//	*StreamEventsResponse_EngineStartup
	//	*StreamEventsResponse_EngineShutdown
	//	*StreamEventsResponse_PlayerEnterUnit
	//	*StreamEventsResponse_PlayerLeaveUnit
	//	*StreamEventsResponse_ShootingStart
	//	*StreamEventsResponse_ShootingEnd
	//	*StreamEventsResponse_MarkAdd
	//	*StreamEventsResponse_MarkChange
	//	*StreamEventsResponse_MarkRemove
	//	*StreamEventsResponse_Kill
	//	*StreamEventsResponse_Score
	//	*StreamEventsResponse_UnitLost
	//	*StreamEventsResponse_LandingAfterEjection
	//	*StreamEventsResponse_DiscardChairAfterEjection
	//	*StreamEventsResponse_WeaponAdd
	//	*StreamEventsResponse_LandingQualityMark
	//	*StreamEventsResponse_Connect
	//	*StreamEventsResponse_Disconnect
	//	*StreamEventsResponse_PlayerSendChat
	//	*StreamEventsResponse_PlayerChangeSlot
	//	*StreamEventsResponse_MissionCommand
	//	*StreamEventsResponse_CoalitionCommand
	//	*StreamEventsResponse_GroupCommand
	Event isStreamEventsResponse_Event `protobuf_oneof:"event"`
}

func (x *StreamEventsResponse) Reset() {
	*x = StreamEventsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dcs_mission_v0_mission_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StreamEventsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StreamEventsResponse) ProtoMessage() {}

func (x *StreamEventsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_dcs_mission_v0_mission_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StreamEventsResponse.ProtoReflect.Descriptor instead.
func (*StreamEventsResponse) Descriptor() ([]byte, []int) {
	return file_dcs_mission_v0_mission_proto_rawDescGZIP(), []int{1}
}

func (x *StreamEventsResponse) GetTime() float64 {
	if x != nil {
		return x.Time
	}
	return 0
}

func (m *StreamEventsResponse) GetEvent() isStreamEventsResponse_Event {
	if m != nil {
		return m.Event
	}
	return nil
}

func (x *StreamEventsResponse) GetShot() *StreamEventsResponse_ShotEvent {
	if x, ok := x.GetEvent().(*StreamEventsResponse_Shot); ok {
		return x.Shot
	}
	return nil
}

func (x *StreamEventsResponse) GetHit() *StreamEventsResponse_HitEvent {
	if x, ok := x.GetEvent().(*StreamEventsResponse_Hit); ok {
		return x.Hit
	}
	return nil
}

func (x *StreamEventsResponse) GetTakeoff() *StreamEventsResponse_TakeoffEvent {
	if x, ok := x.GetEvent().(*StreamEventsResponse_Takeoff); ok {
		return x.Takeoff
	}
	return nil
}

func (x *StreamEventsResponse) GetLand() *StreamEventsResponse_LandEvent {
	if x, ok := x.GetEvent().(*StreamEventsResponse_Land); ok {
		return x.Land
	}
	return nil
}

func (x *StreamEventsResponse) GetCrash() *StreamEventsResponse_CrashEvent {
	if x, ok := x.GetEvent().(*StreamEventsResponse_Crash); ok {
		return x.Crash
	}
	return nil
}

func (x *StreamEventsResponse) GetEjection() *StreamEventsResponse_EjectionEvent {
	if x, ok := x.GetEvent().(*StreamEventsResponse_Ejection); ok {
		return x.Ejection
	}
	return nil
}

func (x *StreamEventsResponse) GetRefueling() *StreamEventsResponse_RefuelingEvent {
	if x, ok := x.GetEvent().(*StreamEventsResponse_Refueling); ok {
		return x.Refueling
	}
	return nil
}

func (x *StreamEventsResponse) GetDead() *StreamEventsResponse_DeadEvent {
	if x, ok := x.GetEvent().(*StreamEventsResponse_Dead); ok {
		return x.Dead
	}
	return nil
}

func (x *StreamEventsResponse) GetPilotDead() *StreamEventsResponse_PilotDeadEvent {
	if x, ok := x.GetEvent().(*StreamEventsResponse_PilotDead); ok {
		return x.PilotDead
	}
	return nil
}

func (x *StreamEventsResponse) GetBaseCapture() *StreamEventsResponse_BaseCaptureEvent {
	if x, ok := x.GetEvent().(*StreamEventsResponse_BaseCapture); ok {
		return x.BaseCapture
	}
	return nil
}

func (x *StreamEventsResponse) GetMissionStart() *StreamEventsResponse_MissionStartEvent {
	if x, ok := x.GetEvent().(*StreamEventsResponse_MissionStart); ok {
		return x.MissionStart
	}
	return nil
}

func (x *StreamEventsResponse) GetMissionEnd() *StreamEventsResponse_MissionEndEvent {
	if x, ok := x.GetEvent().(*StreamEventsResponse_MissionEnd); ok {
		return x.MissionEnd
	}
	return nil
}

func (x *StreamEventsResponse) GetRefuelingStop() *StreamEventsResponse_RefuelingStopEvent {
	if x, ok := x.GetEvent().(*StreamEventsResponse_RefuelingStop); ok {
		return x.RefuelingStop
	}
	return nil
}

func (x *StreamEventsResponse) GetBirth() *StreamEventsResponse_BirthEvent {
	if x, ok := x.GetEvent().(*StreamEventsResponse_Birth); ok {
		return x.Birth
	}
	return nil
}

func (x *StreamEventsResponse) GetHumanFailure() *StreamEventsResponse_HumanFailureEvent {
	if x, ok := x.GetEvent().(*StreamEventsResponse_HumanFailure); ok {
		return x.HumanFailure
	}
	return nil
}

func (x *StreamEventsResponse) GetDetailedFailure() *StreamEventsResponse_DetailedFailureEvent {
	if x, ok := x.GetEvent().(*StreamEventsResponse_DetailedFailure); ok {
		return x.DetailedFailure
	}
	return nil
}

func (x *StreamEventsResponse) GetEngineStartup() *StreamEventsResponse_EngineStartupEvent {
	if x, ok := x.GetEvent().(*StreamEventsResponse_EngineStartup); ok {
		return x.EngineStartup
	}
	return nil
}

func (x *StreamEventsResponse) GetEngineShutdown() *StreamEventsResponse_EngineShutdownEvent {
	if x, ok := x.GetEvent().(*StreamEventsResponse_EngineShutdown); ok {
		return x.EngineShutdown
	}
	return nil
}

func (x *StreamEventsResponse) GetPlayerEnterUnit() *StreamEventsResponse_PlayerEnterUnitEvent {
	if x, ok := x.GetEvent().(*StreamEventsResponse_PlayerEnterUnit); ok {
		return x.PlayerEnterUnit
	}
	return nil
}

func (x *StreamEventsResponse) GetPlayerLeaveUnit() *StreamEventsResponse_PlayerLeaveUnitEvent {
	if x, ok := x.GetEvent().(*StreamEventsResponse_PlayerLeaveUnit); ok {
		return x.PlayerLeaveUnit
	}
	return nil
}

func (x *StreamEventsResponse) GetShootingStart() *StreamEventsResponse_ShootingStartEvent {
	if x, ok := x.GetEvent().(*StreamEventsResponse_ShootingStart); ok {
		return x.ShootingStart
	}
	return nil
}

func (x *StreamEventsResponse) GetShootingEnd() *StreamEventsResponse_ShootingEndEvent {
	if x, ok := x.GetEvent().(*StreamEventsResponse_ShootingEnd); ok {
		return x.ShootingEnd
	}
	return nil
}

func (x *StreamEventsResponse) GetMarkAdd() *StreamEventsResponse_MarkAddEvent {
	if x, ok := x.GetEvent().(*StreamEventsResponse_MarkAdd); ok {
		return x.MarkAdd
	}
	return nil
}

func (x *StreamEventsResponse) GetMarkChange() *StreamEventsResponse_MarkChangeEvent {
	if x, ok := x.GetEvent().(*StreamEventsResponse_MarkChange); ok {
		return x.MarkChange
	}
	return nil
}

func (x *StreamEventsResponse) GetMarkRemove() *StreamEventsResponse_MarkRemoveEvent {
	if x, ok := x.GetEvent().(*StreamEventsResponse_MarkRemove); ok {
		return x.MarkRemove
	}
	return nil
}

func (x *StreamEventsResponse) GetKill() *StreamEventsResponse_KillEvent {
	if x, ok := x.GetEvent().(*StreamEventsResponse_Kill); ok {
		return x.Kill
	}
	return nil
}

func (x *StreamEventsResponse) GetScore() *StreamEventsResponse_ScoreEvent {
	if x, ok := x.GetEvent().(*StreamEventsResponse_Score); ok {
		return x.Score
	}
	return nil
}

func (x *StreamEventsResponse) GetUnitLost() *StreamEventsResponse_UnitLostEvent {
	if x, ok := x.GetEvent().(*StreamEventsResponse_UnitLost); ok {
		return x.UnitLost
	}
	return nil
}

func (x *StreamEventsResponse) GetLandingAfterEjection() *StreamEventsResponse_LandingAfterEjectionEvent {
	if x, ok := x.GetEvent().(*StreamEventsResponse_LandingAfterEjection); ok {
		return x.LandingAfterEjection
	}
	return nil
}

func (x *StreamEventsResponse) GetDiscardChairAfterEjection() *StreamEventsResponse_DiscardChairAfterEjectionEvent {
	if x, ok := x.GetEvent().(*StreamEventsResponse_DiscardChairAfterEjection); ok {
		return x.DiscardChairAfterEjection
	}
	return nil
}

func (x *StreamEventsResponse) GetWeaponAdd() *StreamEventsResponse_WeaponAddEvent {
	if x, ok := x.GetEvent().(*StreamEventsResponse_WeaponAdd); ok {
		return x.WeaponAdd
	}
	return nil
}

func (x *StreamEventsResponse) GetLandingQualityMark() *StreamEventsResponse_LandingQualityMarkEvent {
	if x, ok := x.GetEvent().(*StreamEventsResponse_LandingQualityMark); ok {
		return x.LandingQualityMark
	}
	return nil
}

func (x *StreamEventsResponse) GetConnect() *StreamEventsResponse_ConnectEvent {
	if x, ok := x.GetEvent().(*StreamEventsResponse_Connect); ok {
		return x.Connect
	}
	return nil
}

func (x *StreamEventsResponse) GetDisconnect() *StreamEventsResponse_DisconnectEvent {
	if x, ok := x.GetEvent().(*StreamEventsResponse_Disconnect); ok {
		return x.Disconnect
	}
	return nil
}

func (x *StreamEventsResponse) GetPlayerSendChat() *StreamEventsResponse_PlayerSendChatEvent {
	if x, ok := x.GetEvent().(*StreamEventsResponse_PlayerSendChat); ok {
		return x.PlayerSendChat
	}
	return nil
}

func (x *StreamEventsResponse) GetPlayerChangeSlot() *StreamEventsResponse_PlayerChangeSlotEvent {
	if x, ok := x.GetEvent().(*StreamEventsResponse_PlayerChangeSlot); ok {
		return x.PlayerChangeSlot
	}
	return nil
}

func (x *StreamEventsResponse) GetMissionCommand() *StreamEventsResponse_MissionCommandEvent {
	if x, ok := x.GetEvent().(*StreamEventsResponse_MissionCommand); ok {
		return x.MissionCommand
	}
	return nil
}

func (x *StreamEventsResponse) GetCoalitionCommand() *StreamEventsResponse_CoalitionCommandEvent {
	if x, ok := x.GetEvent().(*StreamEventsResponse_CoalitionCommand); ok {
		return x.CoalitionCommand
	}
	return nil
}

func (x *StreamEventsResponse) GetGroupCommand() *StreamEventsResponse_GroupCommandEvent {
	if x, ok := x.GetEvent().(*StreamEventsResponse_GroupCommand); ok {
		return x.GroupCommand
	}
	return nil
}

type isStreamEventsResponse_Event interface {
	isStreamEventsResponse_Event()
}

type StreamEventsResponse_Shot struct {
	Shot *StreamEventsResponse_ShotEvent `protobuf:"bytes,4,opt,name=shot,proto3,oneof"`
}

type StreamEventsResponse_Hit struct {
	Hit *StreamEventsResponse_HitEvent `protobuf:"bytes,5,opt,name=hit,proto3,oneof"`
}

type StreamEventsResponse_Takeoff struct {
	Takeoff *StreamEventsResponse_TakeoffEvent `protobuf:"bytes,6,opt,name=takeoff,proto3,oneof"`
}

type StreamEventsResponse_Land struct {
	Land *StreamEventsResponse_LandEvent `protobuf:"bytes,7,opt,name=land,proto3,oneof"`
}

type StreamEventsResponse_Crash struct {
	Crash *StreamEventsResponse_CrashEvent `protobuf:"bytes,8,opt,name=crash,proto3,oneof"`
}

type StreamEventsResponse_Ejection struct {
	Ejection *StreamEventsResponse_EjectionEvent `protobuf:"bytes,9,opt,name=ejection,proto3,oneof"`
}

type StreamEventsResponse_Refueling struct {
	Refueling *StreamEventsResponse_RefuelingEvent `protobuf:"bytes,10,opt,name=refueling,proto3,oneof"`
}

type StreamEventsResponse_Dead struct {
	Dead *StreamEventsResponse_DeadEvent `protobuf:"bytes,11,opt,name=dead,proto3,oneof"`
}

type StreamEventsResponse_PilotDead struct {
	PilotDead *StreamEventsResponse_PilotDeadEvent `protobuf:"bytes,12,opt,name=pilot_dead,json=pilotDead,proto3,oneof"`
}

type StreamEventsResponse_BaseCapture struct {
	BaseCapture *StreamEventsResponse_BaseCaptureEvent `protobuf:"bytes,13,opt,name=base_capture,json=baseCapture,proto3,oneof"`
}

type StreamEventsResponse_MissionStart struct {
	MissionStart *StreamEventsResponse_MissionStartEvent `protobuf:"bytes,14,opt,name=mission_start,json=missionStart,proto3,oneof"`
}

type StreamEventsResponse_MissionEnd struct {
	MissionEnd *StreamEventsResponse_MissionEndEvent `protobuf:"bytes,15,opt,name=mission_end,json=missionEnd,proto3,oneof"`
}

type StreamEventsResponse_RefuelingStop struct {
	// @exclude 16 reserved for S_EVENT_TOOK_CONTROL
	RefuelingStop *StreamEventsResponse_RefuelingStopEvent `protobuf:"bytes,17,opt,name=refueling_stop,json=refuelingStop,proto3,oneof"`
}

type StreamEventsResponse_Birth struct {
	Birth *StreamEventsResponse_BirthEvent `protobuf:"bytes,18,opt,name=birth,proto3,oneof"`
}

type StreamEventsResponse_HumanFailure struct {
	HumanFailure *StreamEventsResponse_HumanFailureEvent `protobuf:"bytes,19,opt,name=human_failure,json=humanFailure,proto3,oneof"`
}

type StreamEventsResponse_DetailedFailure struct {
	DetailedFailure *StreamEventsResponse_DetailedFailureEvent `protobuf:"bytes,20,opt,name=detailed_failure,json=detailedFailure,proto3,oneof"`
}

type StreamEventsResponse_EngineStartup struct {
	EngineStartup *StreamEventsResponse_EngineStartupEvent `protobuf:"bytes,21,opt,name=engine_startup,json=engineStartup,proto3,oneof"`
}

type StreamEventsResponse_EngineShutdown struct {
	EngineShutdown *StreamEventsResponse_EngineShutdownEvent `protobuf:"bytes,22,opt,name=engine_shutdown,json=engineShutdown,proto3,oneof"`
}

type StreamEventsResponse_PlayerEnterUnit struct {
	PlayerEnterUnit *StreamEventsResponse_PlayerEnterUnitEvent `protobuf:"bytes,23,opt,name=player_enter_unit,json=playerEnterUnit,proto3,oneof"`
}

type StreamEventsResponse_PlayerLeaveUnit struct {
	PlayerLeaveUnit *StreamEventsResponse_PlayerLeaveUnitEvent `protobuf:"bytes,24,opt,name=player_leave_unit,json=playerLeaveUnit,proto3,oneof"`
}

type StreamEventsResponse_ShootingStart struct {
	// @exclude 25 reserved for S_EVENT_PLAYER_COMMENT
	ShootingStart *StreamEventsResponse_ShootingStartEvent `protobuf:"bytes,26,opt,name=shooting_start,json=shootingStart,proto3,oneof"`
}

type StreamEventsResponse_ShootingEnd struct {
	ShootingEnd *StreamEventsResponse_ShootingEndEvent `protobuf:"bytes,27,opt,name=shooting_end,json=shootingEnd,proto3,oneof"`
}

type StreamEventsResponse_MarkAdd struct {
	MarkAdd *StreamEventsResponse_MarkAddEvent `protobuf:"bytes,28,opt,name=mark_add,json=markAdd,proto3,oneof"`
}

type StreamEventsResponse_MarkChange struct {
	MarkChange *StreamEventsResponse_MarkChangeEvent `protobuf:"bytes,29,opt,name=mark_change,json=markChange,proto3,oneof"`
}

type StreamEventsResponse_MarkRemove struct {
	MarkRemove *StreamEventsResponse_MarkRemoveEvent `protobuf:"bytes,30,opt,name=mark_remove,json=markRemove,proto3,oneof"`
}

type StreamEventsResponse_Kill struct {
	Kill *StreamEventsResponse_KillEvent `protobuf:"bytes,31,opt,name=kill,proto3,oneof"`
}

type StreamEventsResponse_Score struct {
	Score *StreamEventsResponse_ScoreEvent `protobuf:"bytes,32,opt,name=score,proto3,oneof"`
}

type StreamEventsResponse_UnitLost struct {
	UnitLost *StreamEventsResponse_UnitLostEvent `protobuf:"bytes,33,opt,name=unit_lost,json=unitLost,proto3,oneof"`
}

type StreamEventsResponse_LandingAfterEjection struct {
	LandingAfterEjection *StreamEventsResponse_LandingAfterEjectionEvent `protobuf:"bytes,34,opt,name=landing_after_ejection,json=landingAfterEjection,proto3,oneof"`
}

type StreamEventsResponse_DiscardChairAfterEjection struct {
	// @exclude 35 reserved for S_EVENT_PARATROOPER_LENDING
	DiscardChairAfterEjection *StreamEventsResponse_DiscardChairAfterEjectionEvent `protobuf:"bytes,36,opt,name=discard_chair_after_ejection,json=discardChairAfterEjection,proto3,oneof"`
}

type StreamEventsResponse_WeaponAdd struct {
	WeaponAdd *StreamEventsResponse_WeaponAddEvent `protobuf:"bytes,37,opt,name=weapon_add,json=weaponAdd,proto3,oneof"`
}

type StreamEventsResponse_LandingQualityMark struct {
	// @exclude 38 reserved for S_EVENT_TRIGGER_ZONE
	LandingQualityMark *StreamEventsResponse_LandingQualityMarkEvent `protobuf:"bytes,39,opt,name=landing_quality_mark,json=landingQualityMark,proto3,oneof"` // @exclude 40 reserved for S_EVENT_BDA
}

type StreamEventsResponse_Connect struct {
	// The following events are additions on top of DCS's own event enum,
	// which is why they start at 8192 to give DCS plenty of space for
	// new built-in events.
	Connect *StreamEventsResponse_ConnectEvent `protobuf:"bytes,8192,opt,name=connect,proto3,oneof"`
}

type StreamEventsResponse_Disconnect struct {
	Disconnect *StreamEventsResponse_DisconnectEvent `protobuf:"bytes,8193,opt,name=disconnect,proto3,oneof"`
}

type StreamEventsResponse_PlayerSendChat struct {
	PlayerSendChat *StreamEventsResponse_PlayerSendChatEvent `protobuf:"bytes,8194,opt,name=player_send_chat,json=playerSendChat,proto3,oneof"`
}

type StreamEventsResponse_PlayerChangeSlot struct {
	PlayerChangeSlot *StreamEventsResponse_PlayerChangeSlotEvent `protobuf:"bytes,8195,opt,name=player_change_slot,json=playerChangeSlot,proto3,oneof"`
}

type StreamEventsResponse_MissionCommand struct {
	MissionCommand *StreamEventsResponse_MissionCommandEvent `protobuf:"bytes,8196,opt,name=mission_command,json=missionCommand,proto3,oneof"`
}

type StreamEventsResponse_CoalitionCommand struct {
	CoalitionCommand *StreamEventsResponse_CoalitionCommandEvent `protobuf:"bytes,8197,opt,name=coalition_command,json=coalitionCommand,proto3,oneof"`
}

type StreamEventsResponse_GroupCommand struct {
	GroupCommand *StreamEventsResponse_GroupCommandEvent `protobuf:"bytes,8198,opt,name=group_command,json=groupCommand,proto3,oneof"`
}

func (*StreamEventsResponse_Shot) isStreamEventsResponse_Event() {}

func (*StreamEventsResponse_Hit) isStreamEventsResponse_Event() {}

func (*StreamEventsResponse_Takeoff) isStreamEventsResponse_Event() {}

func (*StreamEventsResponse_Land) isStreamEventsResponse_Event() {}

func (*StreamEventsResponse_Crash) isStreamEventsResponse_Event() {}

func (*StreamEventsResponse_Ejection) isStreamEventsResponse_Event() {}

func (*StreamEventsResponse_Refueling) isStreamEventsResponse_Event() {}

func (*StreamEventsResponse_Dead) isStreamEventsResponse_Event() {}

func (*StreamEventsResponse_PilotDead) isStreamEventsResponse_Event() {}

func (*StreamEventsResponse_BaseCapture) isStreamEventsResponse_Event() {}

func (*StreamEventsResponse_MissionStart) isStreamEventsResponse_Event() {}

func (*StreamEventsResponse_MissionEnd) isStreamEventsResponse_Event() {}

func (*StreamEventsResponse_RefuelingStop) isStreamEventsResponse_Event() {}

func (*StreamEventsResponse_Birth) isStreamEventsResponse_Event() {}

func (*StreamEventsResponse_HumanFailure) isStreamEventsResponse_Event() {}

func (*StreamEventsResponse_DetailedFailure) isStreamEventsResponse_Event() {}

func (*StreamEventsResponse_EngineStartup) isStreamEventsResponse_Event() {}

func (*StreamEventsResponse_EngineShutdown) isStreamEventsResponse_Event() {}

func (*StreamEventsResponse_PlayerEnterUnit) isStreamEventsResponse_Event() {}

func (*StreamEventsResponse_PlayerLeaveUnit) isStreamEventsResponse_Event() {}

func (*StreamEventsResponse_ShootingStart) isStreamEventsResponse_Event() {}

func (*StreamEventsResponse_ShootingEnd) isStreamEventsResponse_Event() {}

func (*StreamEventsResponse_MarkAdd) isStreamEventsResponse_Event() {}

func (*StreamEventsResponse_MarkChange) isStreamEventsResponse_Event() {}

func (*StreamEventsResponse_MarkRemove) isStreamEventsResponse_Event() {}

func (*StreamEventsResponse_Kill) isStreamEventsResponse_Event() {}

func (*StreamEventsResponse_Score) isStreamEventsResponse_Event() {}

func (*StreamEventsResponse_UnitLost) isStreamEventsResponse_Event() {}

func (*StreamEventsResponse_LandingAfterEjection) isStreamEventsResponse_Event() {}

func (*StreamEventsResponse_DiscardChairAfterEjection) isStreamEventsResponse_Event() {}

func (*StreamEventsResponse_WeaponAdd) isStreamEventsResponse_Event() {}

func (*StreamEventsResponse_LandingQualityMark) isStreamEventsResponse_Event() {}

func (*StreamEventsResponse_Connect) isStreamEventsResponse_Event() {}

func (*StreamEventsResponse_Disconnect) isStreamEventsResponse_Event() {}

func (*StreamEventsResponse_PlayerSendChat) isStreamEventsResponse_Event() {}

func (*StreamEventsResponse_PlayerChangeSlot) isStreamEventsResponse_Event() {}

func (*StreamEventsResponse_MissionCommand) isStreamEventsResponse_Event() {}

func (*StreamEventsResponse_CoalitionCommand) isStreamEventsResponse_Event() {}

func (*StreamEventsResponse_GroupCommand) isStreamEventsResponse_Event() {}

type StreamUnitsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The poll rate in seconds at which the gRPC server communicates with the DCS
	// mission to retrieve the latest unit positions. The lower the `poll_rate`
	// the higher the amount of requests send to to the DCS mission. Default: 5
	PollRate *uint32 `protobuf:"varint,1,opt,name=poll_rate,json=pollRate,proto3,oneof" json:"poll_rate,omitempty"`
	// The maximum backoff in seconds which the gRPC postpones polling units that
	// haven't moved recently. This is an optimization to dynamically reduce the
	// poll rate for stationary units. Set it to the same value as `poll_rate` to
	// disable the backoff. Default: 30
	MaxBackoff *uint32 `protobuf:"varint,2,opt,name=max_backoff,json=maxBackoff,proto3,oneof" json:"max_backoff,omitempty"`
	// The type of the unit to stream movements. Different categories of units
	// would move at different speeds, which allows the stream to be configured
	// with the appropriate polling rates. `GROUP_CATEGORY_UNSPECIFIED` would
	// return all the units.
	Category common.GroupCategory `protobuf:"varint,3,opt,name=category,proto3,enum=dcs.common.v0.GroupCategory" json:"category,omitempty"`
}

func (x *StreamUnitsRequest) Reset() {
	*x = StreamUnitsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dcs_mission_v0_mission_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StreamUnitsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StreamUnitsRequest) ProtoMessage() {}

func (x *StreamUnitsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_dcs_mission_v0_mission_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StreamUnitsRequest.ProtoReflect.Descriptor instead.
func (*StreamUnitsRequest) Descriptor() ([]byte, []int) {
	return file_dcs_mission_v0_mission_proto_rawDescGZIP(), []int{2}
}

func (x *StreamUnitsRequest) GetPollRate() uint32 {
	if x != nil && x.PollRate != nil {
		return *x.PollRate
	}
	return 0
}

func (x *StreamUnitsRequest) GetMaxBackoff() uint32 {
	if x != nil && x.MaxBackoff != nil {
		return *x.MaxBackoff
	}
	return 0
}

func (x *StreamUnitsRequest) GetCategory() common.GroupCategory {
	if x != nil {
		return x.Category
	}
	return common.GroupCategory(0)
}

type StreamUnitsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Update:
	//	*StreamUnitsResponse_Unit
	//	*StreamUnitsResponse_Gone
	Update isStreamUnitsResponse_Update `protobuf_oneof:"update"`
}

func (x *StreamUnitsResponse) Reset() {
	*x = StreamUnitsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dcs_mission_v0_mission_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StreamUnitsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StreamUnitsResponse) ProtoMessage() {}

func (x *StreamUnitsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_dcs_mission_v0_mission_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StreamUnitsResponse.ProtoReflect.Descriptor instead.
func (*StreamUnitsResponse) Descriptor() ([]byte, []int) {
	return file_dcs_mission_v0_mission_proto_rawDescGZIP(), []int{3}
}

func (m *StreamUnitsResponse) GetUpdate() isStreamUnitsResponse_Update {
	if m != nil {
		return m.Update
	}
	return nil
}

func (x *StreamUnitsResponse) GetUnit() *common.Unit {
	if x, ok := x.GetUpdate().(*StreamUnitsResponse_Unit); ok {
		return x.Unit
	}
	return nil
}

func (x *StreamUnitsResponse) GetGone() *StreamUnitsResponse_UnitGone {
	if x, ok := x.GetUpdate().(*StreamUnitsResponse_Gone); ok {
		return x.Gone
	}
	return nil
}

type isStreamUnitsResponse_Update interface {
	isStreamUnitsResponse_Update()
}

type StreamUnitsResponse_Unit struct {
	// The unit is either new or its position changed.
	Unit *common.Unit `protobuf:"bytes,1,opt,name=unit,proto3,oneof"`
}

type StreamUnitsResponse_Gone struct {
	// The unit does not exist anymore.
	Gone *StreamUnitsResponse_UnitGone `protobuf:"bytes,2,opt,name=gone,proto3,oneof"`
}

func (*StreamUnitsResponse_Unit) isStreamUnitsResponse_Update() {}

func (*StreamUnitsResponse_Gone) isStreamUnitsResponse_Update() {}

type GetScenarioStartTimeRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *GetScenarioStartTimeRequest) Reset() {
	*x = GetScenarioStartTimeRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dcs_mission_v0_mission_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetScenarioStartTimeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetScenarioStartTimeRequest) ProtoMessage() {}

func (x *GetScenarioStartTimeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_dcs_mission_v0_mission_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetScenarioStartTimeRequest.ProtoReflect.Descriptor instead.
func (*GetScenarioStartTimeRequest) Descriptor() ([]byte, []int) {
	return file_dcs_mission_v0_mission_proto_rawDescGZIP(), []int{4}
}

type GetScenarioStartTimeResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Datetime string `protobuf:"bytes,1,opt,name=datetime,proto3" json:"datetime,omitempty"`
}

func (x *GetScenarioStartTimeResponse) Reset() {
	*x = GetScenarioStartTimeResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dcs_mission_v0_mission_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetScenarioStartTimeResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetScenarioStartTimeResponse) ProtoMessage() {}

func (x *GetScenarioStartTimeResponse) ProtoReflect() protoreflect.Message {
	mi := &file_dcs_mission_v0_mission_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetScenarioStartTimeResponse.ProtoReflect.Descriptor instead.
func (*GetScenarioStartTimeResponse) Descriptor() ([]byte, []int) {
	return file_dcs_mission_v0_mission_proto_rawDescGZIP(), []int{5}
}

func (x *GetScenarioStartTimeResponse) GetDatetime() string {
	if x != nil {
		return x.Datetime
	}
	return ""
}

type GetScenarioCurrentTimeRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *GetScenarioCurrentTimeRequest) Reset() {
	*x = GetScenarioCurrentTimeRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dcs_mission_v0_mission_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetScenarioCurrentTimeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetScenarioCurrentTimeRequest) ProtoMessage() {}

func (x *GetScenarioCurrentTimeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_dcs_mission_v0_mission_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetScenarioCurrentTimeRequest.ProtoReflect.Descriptor instead.
func (*GetScenarioCurrentTimeRequest) Descriptor() ([]byte, []int) {
	return file_dcs_mission_v0_mission_proto_rawDescGZIP(), []int{6}
}

type GetScenarioCurrentTimeResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Datetime string `protobuf:"bytes,1,opt,name=datetime,proto3" json:"datetime,omitempty"`
}

func (x *GetScenarioCurrentTimeResponse) Reset() {
	*x = GetScenarioCurrentTimeResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dcs_mission_v0_mission_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetScenarioCurrentTimeResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetScenarioCurrentTimeResponse) ProtoMessage() {}

func (x *GetScenarioCurrentTimeResponse) ProtoReflect() protoreflect.Message {
	mi := &file_dcs_mission_v0_mission_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetScenarioCurrentTimeResponse.ProtoReflect.Descriptor instead.
func (*GetScenarioCurrentTimeResponse) Descriptor() ([]byte, []int) {
	return file_dcs_mission_v0_mission_proto_rawDescGZIP(), []int{7}
}

func (x *GetScenarioCurrentTimeResponse) GetDatetime() string {
	if x != nil {
		return x.Datetime
	}
	return ""
}

// Adds an F10 radio command visible to all players in all coalitions.
// When the player activates the command then a `missionCommand` event will be
// emitted to all connected DCS-gRPC clients for processing as they see fit.
type AddMissionCommandRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The name of the command that is displayed to the player.
	// It will form the last entry in the returned path.
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// The menu path the command will appear under. This can be empty if you want
	// the command to be on the first level under the F10 menu. This path must
	// already have been created.
	Path []string `protobuf:"bytes,2,rep,name=path,proto3" json:"path,omitempty"`
	// A struct containing data that will be included in the emitted event to the
	// DCS-gRPC clients
	Details *structpb.Struct `protobuf:"bytes,3,opt,name=details,proto3" json:"details,omitempty"`
}

func (x *AddMissionCommandRequest) Reset() {
	*x = AddMissionCommandRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dcs_mission_v0_mission_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AddMissionCommandRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddMissionCommandRequest) ProtoMessage() {}

func (x *AddMissionCommandRequest) ProtoReflect() protoreflect.Message {
	mi := &file_dcs_mission_v0_mission_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddMissionCommandRequest.ProtoReflect.Descriptor instead.
func (*AddMissionCommandRequest) Descriptor() ([]byte, []int) {
	return file_dcs_mission_v0_mission_proto_rawDescGZIP(), []int{8}
}

func (x *AddMissionCommandRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *AddMissionCommandRequest) GetPath() []string {
	if x != nil {
		return x.Path
	}
	return nil
}

func (x *AddMissionCommandRequest) GetDetails() *structpb.Struct {
	if x != nil {
		return x.Details
	}
	return nil
}

type AddMissionCommandResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The full path to the command, including the command name. Use this path to
	// delete the command.
	Path []string `protobuf:"bytes,1,rep,name=path,proto3" json:"path,omitempty"`
}

func (x *AddMissionCommandResponse) Reset() {
	*x = AddMissionCommandResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dcs_mission_v0_mission_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AddMissionCommandResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddMissionCommandResponse) ProtoMessage() {}

func (x *AddMissionCommandResponse) ProtoReflect() protoreflect.Message {
	mi := &file_dcs_mission_v0_mission_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddMissionCommandResponse.ProtoReflect.Descriptor instead.
func (*AddMissionCommandResponse) Descriptor() ([]byte, []int) {
	return file_dcs_mission_v0_mission_proto_rawDescGZIP(), []int{9}
}

func (x *AddMissionCommandResponse) GetPath() []string {
	if x != nil {
		return x.Path
	}
	return nil
}

type AddMissionCommandSubMenuRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The name of the submenu that is displayed to the player.
	// It will form the last entry in the returned path.
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// The menu path the submenu will appear under. This can be empty if you want
	// the submenu to be on the first level under the F10 menu. This path must
	// already have been created using this command. you cannot create a nested
	// submenu tree in one command.
	Path []string `protobuf:"bytes,2,rep,name=path,proto3" json:"path,omitempty"`
}

func (x *AddMissionCommandSubMenuRequest) Reset() {
	*x = AddMissionCommandSubMenuRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dcs_mission_v0_mission_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AddMissionCommandSubMenuRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddMissionCommandSubMenuRequest) ProtoMessage() {}

func (x *AddMissionCommandSubMenuRequest) ProtoReflect() protoreflect.Message {
	mi := &file_dcs_mission_v0_mission_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddMissionCommandSubMenuRequest.ProtoReflect.Descriptor instead.
func (*AddMissionCommandSubMenuRequest) Descriptor() ([]byte, []int) {
	return file_dcs_mission_v0_mission_proto_rawDescGZIP(), []int{10}
}

func (x *AddMissionCommandSubMenuRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *AddMissionCommandSubMenuRequest) GetPath() []string {
	if x != nil {
		return x.Path
	}
	return nil
}

type AddMissionCommandSubMenuResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The full path to the submenu, including the submenu name. Use this path to
	// add another submenu or command underneath it or delete the submenu.
	Path []string `protobuf:"bytes,1,rep,name=path,proto3" json:"path,omitempty"`
}

func (x *AddMissionCommandSubMenuResponse) Reset() {
	*x = AddMissionCommandSubMenuResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dcs_mission_v0_mission_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AddMissionCommandSubMenuResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddMissionCommandSubMenuResponse) ProtoMessage() {}

func (x *AddMissionCommandSubMenuResponse) ProtoReflect() protoreflect.Message {
	mi := &file_dcs_mission_v0_mission_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddMissionCommandSubMenuResponse.ProtoReflect.Descriptor instead.
func (*AddMissionCommandSubMenuResponse) Descriptor() ([]byte, []int) {
	return file_dcs_mission_v0_mission_proto_rawDescGZIP(), []int{11}
}

func (x *AddMissionCommandSubMenuResponse) GetPath() []string {
	if x != nil {
		return x.Path
	}
	return nil
}

type RemoveMissionCommandItemRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The full path to the menu item, which can be a submenu or a command, to be
	// removed. Deleting a menu item will delete all children it may have.
	Path []string `protobuf:"bytes,1,rep,name=path,proto3" json:"path,omitempty"`
}

func (x *RemoveMissionCommandItemRequest) Reset() {
	*x = RemoveMissionCommandItemRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dcs_mission_v0_mission_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RemoveMissionCommandItemRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RemoveMissionCommandItemRequest) ProtoMessage() {}

func (x *RemoveMissionCommandItemRequest) ProtoReflect() protoreflect.Message {
	mi := &file_dcs_mission_v0_mission_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RemoveMissionCommandItemRequest.ProtoReflect.Descriptor instead.
func (*RemoveMissionCommandItemRequest) Descriptor() ([]byte, []int) {
	return file_dcs_mission_v0_mission_proto_rawDescGZIP(), []int{12}
}

func (x *RemoveMissionCommandItemRequest) GetPath() []string {
	if x != nil {
		return x.Path
	}
	return nil
}

type RemoveMissionCommandItemResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *RemoveMissionCommandItemResponse) Reset() {
	*x = RemoveMissionCommandItemResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dcs_mission_v0_mission_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RemoveMissionCommandItemResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RemoveMissionCommandItemResponse) ProtoMessage() {}

func (x *RemoveMissionCommandItemResponse) ProtoReflect() protoreflect.Message {
	mi := &file_dcs_mission_v0_mission_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RemoveMissionCommandItemResponse.ProtoReflect.Descriptor instead.
func (*RemoveMissionCommandItemResponse) Descriptor() ([]byte, []int) {
	return file_dcs_mission_v0_mission_proto_rawDescGZIP(), []int{13}
}

// Adds an F10 radio command visible to all players in the specified coalition.
// When the player activates the command then a `coalitionCommand` event will
// be emitted to all connected DCS-gRPC clients for processing as they see fit.
// The emitted event will include the coalition.
type AddCoalitionCommandRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The coalition whose players will be able to see and run the command
	Coalition common.Coalition `protobuf:"varint,1,opt,name=coalition,proto3,enum=dcs.common.v0.Coalition" json:"coalition,omitempty"`
	// The name of the command that is displayed to the player.
	// It will form the last entry in the returned path.
	Name string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	// The menu path the command will appear under. This can be empty if you want
	// the command to be on the first level under the F10 menu. This path must
	// already have been created.
	Path []string `protobuf:"bytes,3,rep,name=path,proto3" json:"path,omitempty"`
	// A struct containing data that will be included in the emitted event to the
	// DCS-gRPC clients
	Details *structpb.Struct `protobuf:"bytes,4,opt,name=details,proto3" json:"details,omitempty"`
}

func (x *AddCoalitionCommandRequest) Reset() {
	*x = AddCoalitionCommandRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dcs_mission_v0_mission_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AddCoalitionCommandRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddCoalitionCommandRequest) ProtoMessage() {}

func (x *AddCoalitionCommandRequest) ProtoReflect() protoreflect.Message {
	mi := &file_dcs_mission_v0_mission_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddCoalitionCommandRequest.ProtoReflect.Descriptor instead.
func (*AddCoalitionCommandRequest) Descriptor() ([]byte, []int) {
	return file_dcs_mission_v0_mission_proto_rawDescGZIP(), []int{14}
}

func (x *AddCoalitionCommandRequest) GetCoalition() common.Coalition {
	if x != nil {
		return x.Coalition
	}
	return common.Coalition(0)
}

func (x *AddCoalitionCommandRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *AddCoalitionCommandRequest) GetPath() []string {
	if x != nil {
		return x.Path
	}
	return nil
}

func (x *AddCoalitionCommandRequest) GetDetails() *structpb.Struct {
	if x != nil {
		return x.Details
	}
	return nil
}

type AddCoalitionCommandResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The full path to the command, including the command name. Use this path to
	// delete the command.
	Path []string `protobuf:"bytes,1,rep,name=path,proto3" json:"path,omitempty"`
}

func (x *AddCoalitionCommandResponse) Reset() {
	*x = AddCoalitionCommandResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dcs_mission_v0_mission_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AddCoalitionCommandResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddCoalitionCommandResponse) ProtoMessage() {}

func (x *AddCoalitionCommandResponse) ProtoReflect() protoreflect.Message {
	mi := &file_dcs_mission_v0_mission_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddCoalitionCommandResponse.ProtoReflect.Descriptor instead.
func (*AddCoalitionCommandResponse) Descriptor() ([]byte, []int) {
	return file_dcs_mission_v0_mission_proto_rawDescGZIP(), []int{15}
}

func (x *AddCoalitionCommandResponse) GetPath() []string {
	if x != nil {
		return x.Path
	}
	return nil
}

type AddCoalitionCommandSubMenuRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The coalition whose players will be able to see the submenu
	Coalition common.Coalition `protobuf:"varint,1,opt,name=coalition,proto3,enum=dcs.common.v0.Coalition" json:"coalition,omitempty"`
	// The name of the submenu that is displayed to the player.
	// It will form the last entry in the returned path.
	Name string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	// The menu path the submenu will appear under. This can be empty if you want
	// the submenu to be on the first level under the F10 menu. This path must
	// already have been created using this command. you cannot create a nested
	// submenu tree in one command.
	Path []string `protobuf:"bytes,3,rep,name=path,proto3" json:"path,omitempty"`
}

func (x *AddCoalitionCommandSubMenuRequest) Reset() {
	*x = AddCoalitionCommandSubMenuRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dcs_mission_v0_mission_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AddCoalitionCommandSubMenuRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddCoalitionCommandSubMenuRequest) ProtoMessage() {}

func (x *AddCoalitionCommandSubMenuRequest) ProtoReflect() protoreflect.Message {
	mi := &file_dcs_mission_v0_mission_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddCoalitionCommandSubMenuRequest.ProtoReflect.Descriptor instead.
func (*AddCoalitionCommandSubMenuRequest) Descriptor() ([]byte, []int) {
	return file_dcs_mission_v0_mission_proto_rawDescGZIP(), []int{16}
}

func (x *AddCoalitionCommandSubMenuRequest) GetCoalition() common.Coalition {
	if x != nil {
		return x.Coalition
	}
	return common.Coalition(0)
}

func (x *AddCoalitionCommandSubMenuRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *AddCoalitionCommandSubMenuRequest) GetPath() []string {
	if x != nil {
		return x.Path
	}
	return nil
}

type AddCoalitionCommandSubMenuResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The full path to the submenu, including the submenu name. Use this path to
	// add another submenu or command underneath it or delete the submenu.
	Path []string `protobuf:"bytes,1,rep,name=path,proto3" json:"path,omitempty"`
}

func (x *AddCoalitionCommandSubMenuResponse) Reset() {
	*x = AddCoalitionCommandSubMenuResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dcs_mission_v0_mission_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AddCoalitionCommandSubMenuResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddCoalitionCommandSubMenuResponse) ProtoMessage() {}

func (x *AddCoalitionCommandSubMenuResponse) ProtoReflect() protoreflect.Message {
	mi := &file_dcs_mission_v0_mission_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddCoalitionCommandSubMenuResponse.ProtoReflect.Descriptor instead.
func (*AddCoalitionCommandSubMenuResponse) Descriptor() ([]byte, []int) {
	return file_dcs_mission_v0_mission_proto_rawDescGZIP(), []int{17}
}

func (x *AddCoalitionCommandSubMenuResponse) GetPath() []string {
	if x != nil {
		return x.Path
	}
	return nil
}

type RemoveCoalitionCommandItemRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The coalition whose players will have the menu item removed
	Coalition common.Coalition `protobuf:"varint,1,opt,name=coalition,proto3,enum=dcs.common.v0.Coalition" json:"coalition,omitempty"`
	// The full path to the menu item, which can be a submenu or a command, to be
	// removed. Deleting a menu item will delete all children it may have.
	Path []string `protobuf:"bytes,2,rep,name=path,proto3" json:"path,omitempty"`
}

func (x *RemoveCoalitionCommandItemRequest) Reset() {
	*x = RemoveCoalitionCommandItemRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dcs_mission_v0_mission_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RemoveCoalitionCommandItemRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RemoveCoalitionCommandItemRequest) ProtoMessage() {}

func (x *RemoveCoalitionCommandItemRequest) ProtoReflect() protoreflect.Message {
	mi := &file_dcs_mission_v0_mission_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RemoveCoalitionCommandItemRequest.ProtoReflect.Descriptor instead.
func (*RemoveCoalitionCommandItemRequest) Descriptor() ([]byte, []int) {
	return file_dcs_mission_v0_mission_proto_rawDescGZIP(), []int{18}
}

func (x *RemoveCoalitionCommandItemRequest) GetCoalition() common.Coalition {
	if x != nil {
		return x.Coalition
	}
	return common.Coalition(0)
}

func (x *RemoveCoalitionCommandItemRequest) GetPath() []string {
	if x != nil {
		return x.Path
	}
	return nil
}

type RemoveCoalitionCommandItemResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *RemoveCoalitionCommandItemResponse) Reset() {
	*x = RemoveCoalitionCommandItemResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dcs_mission_v0_mission_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RemoveCoalitionCommandItemResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RemoveCoalitionCommandItemResponse) ProtoMessage() {}

func (x *RemoveCoalitionCommandItemResponse) ProtoReflect() protoreflect.Message {
	mi := &file_dcs_mission_v0_mission_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RemoveCoalitionCommandItemResponse.ProtoReflect.Descriptor instead.
func (*RemoveCoalitionCommandItemResponse) Descriptor() ([]byte, []int) {
	return file_dcs_mission_v0_mission_proto_rawDescGZIP(), []int{19}
}

// Adds an F10 radio command visible to all players in the specified group.
// When the player activates the command then a `groupCommand` event will
// be emitted to all connected DCS-gRPC clients for processing as they see fit.
// The emitted event will include the group name.
type AddGroupCommandRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The name of the group whose players will be able to see and execute the
	// command. TODO (Figure out if this persists across spawns)
	GroupName string `protobuf:"bytes,1,opt,name=group_name,json=groupName,proto3" json:"group_name,omitempty"`
	// The name of the command that is displayed to the player.
	// It will form the last entry in the returned path.
	Name string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	// The menu path the command will appear under. This can be empty if you want
	// the command to be on the first level under the F10 menu. This path must
	// already have been created.
	Path []string `protobuf:"bytes,3,rep,name=path,proto3" json:"path,omitempty"`
	// A struct containing data that will be included in the emitted event to the
	// DCS-gRPC clients
	Details *structpb.Struct `protobuf:"bytes,4,opt,name=details,proto3" json:"details,omitempty"`
}

func (x *AddGroupCommandRequest) Reset() {
	*x = AddGroupCommandRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dcs_mission_v0_mission_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AddGroupCommandRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddGroupCommandRequest) ProtoMessage() {}

func (x *AddGroupCommandRequest) ProtoReflect() protoreflect.Message {
	mi := &file_dcs_mission_v0_mission_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddGroupCommandRequest.ProtoReflect.Descriptor instead.
func (*AddGroupCommandRequest) Descriptor() ([]byte, []int) {
	return file_dcs_mission_v0_mission_proto_rawDescGZIP(), []int{20}
}

func (x *AddGroupCommandRequest) GetGroupName() string {
	if x != nil {
		return x.GroupName
	}
	return ""
}

func (x *AddGroupCommandRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *AddGroupCommandRequest) GetPath() []string {
	if x != nil {
		return x.Path
	}
	return nil
}

func (x *AddGroupCommandRequest) GetDetails() *structpb.Struct {
	if x != nil {
		return x.Details
	}
	return nil
}

type AddGroupCommandResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The full path to the command, including the command name. Use this path to
	// delete the command.
	Path []string `protobuf:"bytes,1,rep,name=path,proto3" json:"path,omitempty"`
}

func (x *AddGroupCommandResponse) Reset() {
	*x = AddGroupCommandResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dcs_mission_v0_mission_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AddGroupCommandResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddGroupCommandResponse) ProtoMessage() {}

func (x *AddGroupCommandResponse) ProtoReflect() protoreflect.Message {
	mi := &file_dcs_mission_v0_mission_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddGroupCommandResponse.ProtoReflect.Descriptor instead.
func (*AddGroupCommandResponse) Descriptor() ([]byte, []int) {
	return file_dcs_mission_v0_mission_proto_rawDescGZIP(), []int{21}
}

func (x *AddGroupCommandResponse) GetPath() []string {
	if x != nil {
		return x.Path
	}
	return nil
}

type AddGroupCommandSubMenuRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The name of the group whose players will be able to see the submenu
	GroupName string `protobuf:"bytes,1,opt,name=group_name,json=groupName,proto3" json:"group_name,omitempty"`
	// The name of the submenu that is displayed to the player.
	// It will form the last entry in the returned path.
	Name string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	// The menu path the submenu will appear under. This can be empty if you want
	// the submenu to be on the first level under the F10 menu. This path must
	// already have been created using this command. you cannot create a nested
	// submenu tree in one command.
	Path []string `protobuf:"bytes,3,rep,name=path,proto3" json:"path,omitempty"`
}

func (x *AddGroupCommandSubMenuRequest) Reset() {
	*x = AddGroupCommandSubMenuRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dcs_mission_v0_mission_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AddGroupCommandSubMenuRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddGroupCommandSubMenuRequest) ProtoMessage() {}

func (x *AddGroupCommandSubMenuRequest) ProtoReflect() protoreflect.Message {
	mi := &file_dcs_mission_v0_mission_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddGroupCommandSubMenuRequest.ProtoReflect.Descriptor instead.
func (*AddGroupCommandSubMenuRequest) Descriptor() ([]byte, []int) {
	return file_dcs_mission_v0_mission_proto_rawDescGZIP(), []int{22}
}

func (x *AddGroupCommandSubMenuRequest) GetGroupName() string {
	if x != nil {
		return x.GroupName
	}
	return ""
}

func (x *AddGroupCommandSubMenuRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *AddGroupCommandSubMenuRequest) GetPath() []string {
	if x != nil {
		return x.Path
	}
	return nil
}

type AddGroupCommandSubMenuResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The full path to the submenu, including the submenu name. Use this path to
	// add another submenu or command underneath it or delete the submenu.
	Path []string `protobuf:"bytes,1,rep,name=path,proto3" json:"path,omitempty"`
}

func (x *AddGroupCommandSubMenuResponse) Reset() {
	*x = AddGroupCommandSubMenuResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dcs_mission_v0_mission_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AddGroupCommandSubMenuResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddGroupCommandSubMenuResponse) ProtoMessage() {}

func (x *AddGroupCommandSubMenuResponse) ProtoReflect() protoreflect.Message {
	mi := &file_dcs_mission_v0_mission_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddGroupCommandSubMenuResponse.ProtoReflect.Descriptor instead.
func (*AddGroupCommandSubMenuResponse) Descriptor() ([]byte, []int) {
	return file_dcs_mission_v0_mission_proto_rawDescGZIP(), []int{23}
}

func (x *AddGroupCommandSubMenuResponse) GetPath() []string {
	if x != nil {
		return x.Path
	}
	return nil
}

type RemoveGroupCommandItemRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The group whose players will have the menu item removed
	GroupName string `protobuf:"bytes,1,opt,name=group_name,json=groupName,proto3" json:"group_name,omitempty"`
	// The full path to the menu item, which can be a submenu or a command, to be
	// removed. Deleting a menu item will delete all children it may have.
	Path []string `protobuf:"bytes,2,rep,name=path,proto3" json:"path,omitempty"`
}

func (x *RemoveGroupCommandItemRequest) Reset() {
	*x = RemoveGroupCommandItemRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dcs_mission_v0_mission_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RemoveGroupCommandItemRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RemoveGroupCommandItemRequest) ProtoMessage() {}

func (x *RemoveGroupCommandItemRequest) ProtoReflect() protoreflect.Message {
	mi := &file_dcs_mission_v0_mission_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RemoveGroupCommandItemRequest.ProtoReflect.Descriptor instead.
func (*RemoveGroupCommandItemRequest) Descriptor() ([]byte, []int) {
	return file_dcs_mission_v0_mission_proto_rawDescGZIP(), []int{24}
}

func (x *RemoveGroupCommandItemRequest) GetGroupName() string {
	if x != nil {
		return x.GroupName
	}
	return ""
}

func (x *RemoveGroupCommandItemRequest) GetPath() []string {
	if x != nil {
		return x.Path
	}
	return nil
}

type RemoveGroupCommandItemResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *RemoveGroupCommandItemResponse) Reset() {
	*x = RemoveGroupCommandItemResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dcs_mission_v0_mission_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RemoveGroupCommandItemResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RemoveGroupCommandItemResponse) ProtoMessage() {}

func (x *RemoveGroupCommandItemResponse) ProtoReflect() protoreflect.Message {
	mi := &file_dcs_mission_v0_mission_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RemoveGroupCommandItemResponse.ProtoReflect.Descriptor instead.
func (*RemoveGroupCommandItemResponse) Descriptor() ([]byte, []int) {
	return file_dcs_mission_v0_mission_proto_rawDescGZIP(), []int{25}
}

// Occurs when a unit fires a weapon (but no machine gun- or autocannon-based
// weapons - those are handled by [ShootingStartEvent]).
type StreamEventsResponse_ShotEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The object that fired the weapon.
	Initiator *common.Initiator `protobuf:"bytes,1,opt,name=initiator,proto3" json:"initiator,omitempty"`
	// The weapon that has been fired.
	Weapon *common.Weapon `protobuf:"bytes,2,opt,name=weapon,proto3" json:"weapon,omitempty"`
}

func (x *StreamEventsResponse_ShotEvent) Reset() {
	*x = StreamEventsResponse_ShotEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dcs_mission_v0_mission_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StreamEventsResponse_ShotEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StreamEventsResponse_ShotEvent) ProtoMessage() {}

func (x *StreamEventsResponse_ShotEvent) ProtoReflect() protoreflect.Message {
	mi := &file_dcs_mission_v0_mission_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StreamEventsResponse_ShotEvent.ProtoReflect.Descriptor instead.
func (*StreamEventsResponse_ShotEvent) Descriptor() ([]byte, []int) {
	return file_dcs_mission_v0_mission_proto_rawDescGZIP(), []int{1, 0}
}

func (x *StreamEventsResponse_ShotEvent) GetInitiator() *common.Initiator {
	if x != nil {
		return x.Initiator
	}
	return nil
}

func (x *StreamEventsResponse_ShotEvent) GetWeapon() *common.Weapon {
	if x != nil {
		return x.Weapon
	}
	return nil
}

// Occurs when an object is hit by a weapon.
type StreamEventsResponse_HitEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The object that fired the weapon. Not set when for example fyling an
	// aircraft into a building (building will be the target and weapon_name the
	// name of the aircraft).
	Initiator *common.Initiator `protobuf:"bytes,1,opt,name=initiator,proto3,oneof" json:"initiator,omitempty"`
	// The weapon that the target has been hit with.
	Weapon *common.Weapon `protobuf:"bytes,2,opt,name=weapon,proto3" json:"weapon,omitempty"`
	// The object that has been hit.
	Target *common.Target `protobuf:"bytes,3,opt,name=target,proto3" json:"target,omitempty"`
	// The weapon the target got hit by.
	WeaponName *string `protobuf:"bytes,4,opt,name=weapon_name,json=weaponName,proto3,oneof" json:"weapon_name,omitempty"`
}

func (x *StreamEventsResponse_HitEvent) Reset() {
	*x = StreamEventsResponse_HitEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dcs_mission_v0_mission_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StreamEventsResponse_HitEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StreamEventsResponse_HitEvent) ProtoMessage() {}

func (x *StreamEventsResponse_HitEvent) ProtoReflect() protoreflect.Message {
	mi := &file_dcs_mission_v0_mission_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StreamEventsResponse_HitEvent.ProtoReflect.Descriptor instead.
func (*StreamEventsResponse_HitEvent) Descriptor() ([]byte, []int) {
	return file_dcs_mission_v0_mission_proto_rawDescGZIP(), []int{1, 1}
}

func (x *StreamEventsResponse_HitEvent) GetInitiator() *common.Initiator {
	if x != nil {
		return x.Initiator
	}
	return nil
}

func (x *StreamEventsResponse_HitEvent) GetWeapon() *common.Weapon {
	if x != nil {
		return x.Weapon
	}
	return nil
}

func (x *StreamEventsResponse_HitEvent) GetTarget() *common.Target {
	if x != nil {
		return x.Target
	}
	return nil
}

func (x *StreamEventsResponse_HitEvent) GetWeaponName() string {
	if x != nil && x.WeaponName != nil {
		return *x.WeaponName
	}
	return ""
}

// Occurs when an aircraft takes off from an airbase, farp, or ship.
type StreamEventsResponse_TakeoffEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The object that took off.
	Initiator *common.Initiator `protobuf:"bytes,1,opt,name=initiator,proto3" json:"initiator,omitempty"`
	// The airbase, farp or ship the unit took off from.
	Place *common.Airbase `protobuf:"bytes,2,opt,name=place,proto3" json:"place,omitempty"`
}

func (x *StreamEventsResponse_TakeoffEvent) Reset() {
	*x = StreamEventsResponse_TakeoffEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dcs_mission_v0_mission_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StreamEventsResponse_TakeoffEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StreamEventsResponse_TakeoffEvent) ProtoMessage() {}

func (x *StreamEventsResponse_TakeoffEvent) ProtoReflect() protoreflect.Message {
	mi := &file_dcs_mission_v0_mission_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StreamEventsResponse_TakeoffEvent.ProtoReflect.Descriptor instead.
func (*StreamEventsResponse_TakeoffEvent) Descriptor() ([]byte, []int) {
	return file_dcs_mission_v0_mission_proto_rawDescGZIP(), []int{1, 2}
}

func (x *StreamEventsResponse_TakeoffEvent) GetInitiator() *common.Initiator {
	if x != nil {
		return x.Initiator
	}
	return nil
}

func (x *StreamEventsResponse_TakeoffEvent) GetPlace() *common.Airbase {
	if x != nil {
		return x.Place
	}
	return nil
}

// Occurs when an aircraft lands at an airbase, farp or ship.
type StreamEventsResponse_LandEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The object that landed.
	Initiator *common.Initiator `protobuf:"bytes,1,opt,name=initiator,proto3" json:"initiator,omitempty"`
	// The airbase, farp or ship the unit landed at.
	Place *common.Airbase `protobuf:"bytes,2,opt,name=place,proto3" json:"place,omitempty"`
}

func (x *StreamEventsResponse_LandEvent) Reset() {
	*x = StreamEventsResponse_LandEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dcs_mission_v0_mission_proto_msgTypes[29]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StreamEventsResponse_LandEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StreamEventsResponse_LandEvent) ProtoMessage() {}

func (x *StreamEventsResponse_LandEvent) ProtoReflect() protoreflect.Message {
	mi := &file_dcs_mission_v0_mission_proto_msgTypes[29]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StreamEventsResponse_LandEvent.ProtoReflect.Descriptor instead.
func (*StreamEventsResponse_LandEvent) Descriptor() ([]byte, []int) {
	return file_dcs_mission_v0_mission_proto_rawDescGZIP(), []int{1, 3}
}

func (x *StreamEventsResponse_LandEvent) GetInitiator() *common.Initiator {
	if x != nil {
		return x.Initiator
	}
	return nil
}

func (x *StreamEventsResponse_LandEvent) GetPlace() *common.Airbase {
	if x != nil {
		return x.Place
	}
	return nil
}

// Occurs when an aircraft crashes into the ground and is completely
// destroyed.
type StreamEventsResponse_CrashEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The object that crashed.
	Initiator *common.Initiator `protobuf:"bytes,1,opt,name=initiator,proto3" json:"initiator,omitempty"`
}

func (x *StreamEventsResponse_CrashEvent) Reset() {
	*x = StreamEventsResponse_CrashEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dcs_mission_v0_mission_proto_msgTypes[30]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StreamEventsResponse_CrashEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StreamEventsResponse_CrashEvent) ProtoMessage() {}

func (x *StreamEventsResponse_CrashEvent) ProtoReflect() protoreflect.Message {
	mi := &file_dcs_mission_v0_mission_proto_msgTypes[30]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StreamEventsResponse_CrashEvent.ProtoReflect.Descriptor instead.
func (*StreamEventsResponse_CrashEvent) Descriptor() ([]byte, []int) {
	return file_dcs_mission_v0_mission_proto_rawDescGZIP(), []int{1, 4}
}

func (x *StreamEventsResponse_CrashEvent) GetInitiator() *common.Initiator {
	if x != nil {
		return x.Initiator
	}
	return nil
}

// Occurs when a pilot ejects from its aircraft.
type StreamEventsResponse_EjectionEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The unit a pilot ejected from.
	Initiator *common.Initiator `protobuf:"bytes,1,opt,name=initiator,proto3" json:"initiator,omitempty"`
	// The ejection seat.
	Target *common.Target `protobuf:"bytes,3,opt,name=target,proto3" json:"target,omitempty"`
}

func (x *StreamEventsResponse_EjectionEvent) Reset() {
	*x = StreamEventsResponse_EjectionEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dcs_mission_v0_mission_proto_msgTypes[31]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StreamEventsResponse_EjectionEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StreamEventsResponse_EjectionEvent) ProtoMessage() {}

func (x *StreamEventsResponse_EjectionEvent) ProtoReflect() protoreflect.Message {
	mi := &file_dcs_mission_v0_mission_proto_msgTypes[31]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StreamEventsResponse_EjectionEvent.ProtoReflect.Descriptor instead.
func (*StreamEventsResponse_EjectionEvent) Descriptor() ([]byte, []int) {
	return file_dcs_mission_v0_mission_proto_rawDescGZIP(), []int{1, 5}
}

func (x *StreamEventsResponse_EjectionEvent) GetInitiator() *common.Initiator {
	if x != nil {
		return x.Initiator
	}
	return nil
}

func (x *StreamEventsResponse_EjectionEvent) GetTarget() *common.Target {
	if x != nil {
		return x.Target
	}
	return nil
}

// Occurs when an aircraft connects with a tanker and begins taking on fuel.
type StreamEventsResponse_RefuelingEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The object that is receiving fuel.
	Initiator *common.Initiator `protobuf:"bytes,1,opt,name=initiator,proto3" json:"initiator,omitempty"`
}

func (x *StreamEventsResponse_RefuelingEvent) Reset() {
	*x = StreamEventsResponse_RefuelingEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dcs_mission_v0_mission_proto_msgTypes[32]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StreamEventsResponse_RefuelingEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StreamEventsResponse_RefuelingEvent) ProtoMessage() {}

func (x *StreamEventsResponse_RefuelingEvent) ProtoReflect() protoreflect.Message {
	mi := &file_dcs_mission_v0_mission_proto_msgTypes[32]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StreamEventsResponse_RefuelingEvent.ProtoReflect.Descriptor instead.
func (*StreamEventsResponse_RefuelingEvent) Descriptor() ([]byte, []int) {
	return file_dcs_mission_v0_mission_proto_rawDescGZIP(), []int{1, 6}
}

func (x *StreamEventsResponse_RefuelingEvent) GetInitiator() *common.Initiator {
	if x != nil {
		return x.Initiator
	}
	return nil
}

// Occurs when an object is completely destroyed.
type StreamEventsResponse_DeadEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The object that has been destroyed.
	Initiator *common.Initiator `protobuf:"bytes,1,opt,name=initiator,proto3" json:"initiator,omitempty"`
}

func (x *StreamEventsResponse_DeadEvent) Reset() {
	*x = StreamEventsResponse_DeadEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dcs_mission_v0_mission_proto_msgTypes[33]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StreamEventsResponse_DeadEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StreamEventsResponse_DeadEvent) ProtoMessage() {}

func (x *StreamEventsResponse_DeadEvent) ProtoReflect() protoreflect.Message {
	mi := &file_dcs_mission_v0_mission_proto_msgTypes[33]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StreamEventsResponse_DeadEvent.ProtoReflect.Descriptor instead.
func (*StreamEventsResponse_DeadEvent) Descriptor() ([]byte, []int) {
	return file_dcs_mission_v0_mission_proto_rawDescGZIP(), []int{1, 7}
}

func (x *StreamEventsResponse_DeadEvent) GetInitiator() *common.Initiator {
	if x != nil {
		return x.Initiator
	}
	return nil
}

// Occurs when a pilot of an aircraft is killed. Can occur either if the
// player is alive and crashes (in this case both this and the [CrashEvent]
// event will be fired) or if a weapon kills the pilot without completely
// destroying the plane.
type StreamEventsResponse_PilotDeadEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The unit the pilot has died in.
	Initiator *common.Initiator `protobuf:"bytes,1,opt,name=initiator,proto3" json:"initiator,omitempty"`
}

func (x *StreamEventsResponse_PilotDeadEvent) Reset() {
	*x = StreamEventsResponse_PilotDeadEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dcs_mission_v0_mission_proto_msgTypes[34]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StreamEventsResponse_PilotDeadEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StreamEventsResponse_PilotDeadEvent) ProtoMessage() {}

func (x *StreamEventsResponse_PilotDeadEvent) ProtoReflect() protoreflect.Message {
	mi := &file_dcs_mission_v0_mission_proto_msgTypes[34]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StreamEventsResponse_PilotDeadEvent.ProtoReflect.Descriptor instead.
func (*StreamEventsResponse_PilotDeadEvent) Descriptor() ([]byte, []int) {
	return file_dcs_mission_v0_mission_proto_rawDescGZIP(), []int{1, 8}
}

func (x *StreamEventsResponse_PilotDeadEvent) GetInitiator() *common.Initiator {
	if x != nil {
		return x.Initiator
	}
	return nil
}

// Occurs when a ground unit captures either an airbase or a farp.
type StreamEventsResponse_BaseCaptureEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The object that captured the base.
	Initiator *common.Initiator `protobuf:"bytes,1,opt,name=initiator,proto3" json:"initiator,omitempty"`
	// The airbase that was captured, can be a FARP or Airbase
	Place *common.Airbase `protobuf:"bytes,2,opt,name=place,proto3" json:"place,omitempty"`
}

func (x *StreamEventsResponse_BaseCaptureEvent) Reset() {
	*x = StreamEventsResponse_BaseCaptureEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dcs_mission_v0_mission_proto_msgTypes[35]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StreamEventsResponse_BaseCaptureEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StreamEventsResponse_BaseCaptureEvent) ProtoMessage() {}

func (x *StreamEventsResponse_BaseCaptureEvent) ProtoReflect() protoreflect.Message {
	mi := &file_dcs_mission_v0_mission_proto_msgTypes[35]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StreamEventsResponse_BaseCaptureEvent.ProtoReflect.Descriptor instead.
func (*StreamEventsResponse_BaseCaptureEvent) Descriptor() ([]byte, []int) {
	return file_dcs_mission_v0_mission_proto_rawDescGZIP(), []int{1, 9}
}

func (x *StreamEventsResponse_BaseCaptureEvent) GetInitiator() *common.Initiator {
	if x != nil {
		return x.Initiator
	}
	return nil
}

func (x *StreamEventsResponse_BaseCaptureEvent) GetPlace() *common.Airbase {
	if x != nil {
		return x.Place
	}
	return nil
}

// Occurs when the mission starts.
type StreamEventsResponse_MissionStartEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *StreamEventsResponse_MissionStartEvent) Reset() {
	*x = StreamEventsResponse_MissionStartEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dcs_mission_v0_mission_proto_msgTypes[36]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StreamEventsResponse_MissionStartEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StreamEventsResponse_MissionStartEvent) ProtoMessage() {}

func (x *StreamEventsResponse_MissionStartEvent) ProtoReflect() protoreflect.Message {
	mi := &file_dcs_mission_v0_mission_proto_msgTypes[36]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StreamEventsResponse_MissionStartEvent.ProtoReflect.Descriptor instead.
func (*StreamEventsResponse_MissionStartEvent) Descriptor() ([]byte, []int) {
	return file_dcs_mission_v0_mission_proto_rawDescGZIP(), []int{1, 10}
}

// Occurs when the mission stops.
type StreamEventsResponse_MissionEndEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *StreamEventsResponse_MissionEndEvent) Reset() {
	*x = StreamEventsResponse_MissionEndEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dcs_mission_v0_mission_proto_msgTypes[37]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StreamEventsResponse_MissionEndEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StreamEventsResponse_MissionEndEvent) ProtoMessage() {}

func (x *StreamEventsResponse_MissionEndEvent) ProtoReflect() protoreflect.Message {
	mi := &file_dcs_mission_v0_mission_proto_msgTypes[37]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StreamEventsResponse_MissionEndEvent.ProtoReflect.Descriptor instead.
func (*StreamEventsResponse_MissionEndEvent) Descriptor() ([]byte, []int) {
	return file_dcs_mission_v0_mission_proto_rawDescGZIP(), []int{1, 11}
}

// Occurs when an aircraft is finished taking fuel.
type StreamEventsResponse_RefuelingStopEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// he unit that was receiving fuel.
	Initiator *common.Initiator `protobuf:"bytes,1,opt,name=initiator,proto3" json:"initiator,omitempty"`
}

func (x *StreamEventsResponse_RefuelingStopEvent) Reset() {
	*x = StreamEventsResponse_RefuelingStopEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dcs_mission_v0_mission_proto_msgTypes[38]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StreamEventsResponse_RefuelingStopEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StreamEventsResponse_RefuelingStopEvent) ProtoMessage() {}

func (x *StreamEventsResponse_RefuelingStopEvent) ProtoReflect() protoreflect.Message {
	mi := &file_dcs_mission_v0_mission_proto_msgTypes[38]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StreamEventsResponse_RefuelingStopEvent.ProtoReflect.Descriptor instead.
func (*StreamEventsResponse_RefuelingStopEvent) Descriptor() ([]byte, []int) {
	return file_dcs_mission_v0_mission_proto_rawDescGZIP(), []int{1, 12}
}

func (x *StreamEventsResponse_RefuelingStopEvent) GetInitiator() *common.Initiator {
	if x != nil {
		return x.Initiator
	}
	return nil
}

// Occurs when any object is spawned into the mission.
type StreamEventsResponse_BirthEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The object that was spawned.
	Initiator *common.Initiator `protobuf:"bytes,1,opt,name=initiator,proto3" json:"initiator,omitempty"`
	// The airbase, farp or ship the unit took off from.
	Place *common.Airbase `protobuf:"bytes,2,opt,name=place,proto3,oneof" json:"place,omitempty"`
}

func (x *StreamEventsResponse_BirthEvent) Reset() {
	*x = StreamEventsResponse_BirthEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dcs_mission_v0_mission_proto_msgTypes[39]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StreamEventsResponse_BirthEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StreamEventsResponse_BirthEvent) ProtoMessage() {}

func (x *StreamEventsResponse_BirthEvent) ProtoReflect() protoreflect.Message {
	mi := &file_dcs_mission_v0_mission_proto_msgTypes[39]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StreamEventsResponse_BirthEvent.ProtoReflect.Descriptor instead.
func (*StreamEventsResponse_BirthEvent) Descriptor() ([]byte, []int) {
	return file_dcs_mission_v0_mission_proto_rawDescGZIP(), []int{1, 13}
}

func (x *StreamEventsResponse_BirthEvent) GetInitiator() *common.Initiator {
	if x != nil {
		return x.Initiator
	}
	return nil
}

func (x *StreamEventsResponse_BirthEvent) GetPlace() *common.Airbase {
	if x != nil {
		return x.Place
	}
	return nil
}

// Occurs e.g. when a player controlled aircraft blacks out.
type StreamEventsResponse_HumanFailureEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The unit the system failure occurred in.
	Initiator *common.Initiator `protobuf:"bytes,1,opt,name=initiator,proto3" json:"initiator,omitempty"`
}

func (x *StreamEventsResponse_HumanFailureEvent) Reset() {
	*x = StreamEventsResponse_HumanFailureEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dcs_mission_v0_mission_proto_msgTypes[40]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StreamEventsResponse_HumanFailureEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StreamEventsResponse_HumanFailureEvent) ProtoMessage() {}

func (x *StreamEventsResponse_HumanFailureEvent) ProtoReflect() protoreflect.Message {
	mi := &file_dcs_mission_v0_mission_proto_msgTypes[40]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StreamEventsResponse_HumanFailureEvent.ProtoReflect.Descriptor instead.
func (*StreamEventsResponse_HumanFailureEvent) Descriptor() ([]byte, []int) {
	return file_dcs_mission_v0_mission_proto_rawDescGZIP(), []int{1, 14}
}

func (x *StreamEventsResponse_HumanFailureEvent) GetInitiator() *common.Initiator {
	if x != nil {
		return x.Initiator
	}
	return nil
}

// Occurs when a system on an aircraft fails. This can be due to damage or due
// to random failures set up in the mission editor.
type StreamEventsResponse_DetailedFailureEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The target the failure occurred for.
	Target *common.Target `protobuf:"bytes,1,opt,name=target,proto3" json:"target,omitempty"`
}

func (x *StreamEventsResponse_DetailedFailureEvent) Reset() {
	*x = StreamEventsResponse_DetailedFailureEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dcs_mission_v0_mission_proto_msgTypes[41]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StreamEventsResponse_DetailedFailureEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StreamEventsResponse_DetailedFailureEvent) ProtoMessage() {}

func (x *StreamEventsResponse_DetailedFailureEvent) ProtoReflect() protoreflect.Message {
	mi := &file_dcs_mission_v0_mission_proto_msgTypes[41]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StreamEventsResponse_DetailedFailureEvent.ProtoReflect.Descriptor instead.
func (*StreamEventsResponse_DetailedFailureEvent) Descriptor() ([]byte, []int) {
	return file_dcs_mission_v0_mission_proto_rawDescGZIP(), []int{1, 15}
}

func (x *StreamEventsResponse_DetailedFailureEvent) GetTarget() *common.Target {
	if x != nil {
		return x.Target
	}
	return nil
}

// Occurs when any aircraft starts its engines.
type StreamEventsResponse_EngineStartupEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The object that starts its engines.
	Initiator *common.Initiator `protobuf:"bytes,1,opt,name=initiator,proto3" json:"initiator,omitempty"`
	// The airbase, farp or ship the unit started their engine at.
	Place *common.Airbase `protobuf:"bytes,2,opt,name=place,proto3" json:"place,omitempty"`
}

func (x *StreamEventsResponse_EngineStartupEvent) Reset() {
	*x = StreamEventsResponse_EngineStartupEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dcs_mission_v0_mission_proto_msgTypes[42]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StreamEventsResponse_EngineStartupEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StreamEventsResponse_EngineStartupEvent) ProtoMessage() {}

func (x *StreamEventsResponse_EngineStartupEvent) ProtoReflect() protoreflect.Message {
	mi := &file_dcs_mission_v0_mission_proto_msgTypes[42]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StreamEventsResponse_EngineStartupEvent.ProtoReflect.Descriptor instead.
func (*StreamEventsResponse_EngineStartupEvent) Descriptor() ([]byte, []int) {
	return file_dcs_mission_v0_mission_proto_rawDescGZIP(), []int{1, 16}
}

func (x *StreamEventsResponse_EngineStartupEvent) GetInitiator() *common.Initiator {
	if x != nil {
		return x.Initiator
	}
	return nil
}

func (x *StreamEventsResponse_EngineStartupEvent) GetPlace() *common.Airbase {
	if x != nil {
		return x.Place
	}
	return nil
}

type StreamEventsResponse_EngineShutdownEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Occurs when any aircraft shuts down its engines.
	Initiator *common.Initiator `protobuf:"bytes,1,opt,name=initiator,proto3" json:"initiator,omitempty"`
	// The airbase, farp or ship the unit shut down their engine at.
	Place *common.Airbase `protobuf:"bytes,2,opt,name=place,proto3" json:"place,omitempty"`
}

func (x *StreamEventsResponse_EngineShutdownEvent) Reset() {
	*x = StreamEventsResponse_EngineShutdownEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dcs_mission_v0_mission_proto_msgTypes[43]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StreamEventsResponse_EngineShutdownEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StreamEventsResponse_EngineShutdownEvent) ProtoMessage() {}

func (x *StreamEventsResponse_EngineShutdownEvent) ProtoReflect() protoreflect.Message {
	mi := &file_dcs_mission_v0_mission_proto_msgTypes[43]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StreamEventsResponse_EngineShutdownEvent.ProtoReflect.Descriptor instead.
func (*StreamEventsResponse_EngineShutdownEvent) Descriptor() ([]byte, []int) {
	return file_dcs_mission_v0_mission_proto_rawDescGZIP(), []int{1, 17}
}

func (x *StreamEventsResponse_EngineShutdownEvent) GetInitiator() *common.Initiator {
	if x != nil {
		return x.Initiator
	}
	return nil
}

func (x *StreamEventsResponse_EngineShutdownEvent) GetPlace() *common.Airbase {
	if x != nil {
		return x.Place
	}
	return nil
}

// Occurs when a player takes direct control of a unit.
type StreamEventsResponse_PlayerEnterUnitEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The unit the player took control of.
	Initiator *common.Initiator `protobuf:"bytes,1,opt,name=initiator,proto3" json:"initiator,omitempty"`
}

func (x *StreamEventsResponse_PlayerEnterUnitEvent) Reset() {
	*x = StreamEventsResponse_PlayerEnterUnitEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dcs_mission_v0_mission_proto_msgTypes[44]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StreamEventsResponse_PlayerEnterUnitEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StreamEventsResponse_PlayerEnterUnitEvent) ProtoMessage() {}

func (x *StreamEventsResponse_PlayerEnterUnitEvent) ProtoReflect() protoreflect.Message {
	mi := &file_dcs_mission_v0_mission_proto_msgTypes[44]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StreamEventsResponse_PlayerEnterUnitEvent.ProtoReflect.Descriptor instead.
func (*StreamEventsResponse_PlayerEnterUnitEvent) Descriptor() ([]byte, []int) {
	return file_dcs_mission_v0_mission_proto_rawDescGZIP(), []int{1, 18}
}

func (x *StreamEventsResponse_PlayerEnterUnitEvent) GetInitiator() *common.Initiator {
	if x != nil {
		return x.Initiator
	}
	return nil
}

// Occurs when a player relieves direct control of a unit.
type StreamEventsResponse_PlayerLeaveUnitEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The unit the player relieves control of.
	Initiator *common.Initiator `protobuf:"bytes,1,opt,name=initiator,proto3" json:"initiator,omitempty"`
}

func (x *StreamEventsResponse_PlayerLeaveUnitEvent) Reset() {
	*x = StreamEventsResponse_PlayerLeaveUnitEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dcs_mission_v0_mission_proto_msgTypes[45]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StreamEventsResponse_PlayerLeaveUnitEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StreamEventsResponse_PlayerLeaveUnitEvent) ProtoMessage() {}

func (x *StreamEventsResponse_PlayerLeaveUnitEvent) ProtoReflect() protoreflect.Message {
	mi := &file_dcs_mission_v0_mission_proto_msgTypes[45]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StreamEventsResponse_PlayerLeaveUnitEvent.ProtoReflect.Descriptor instead.
func (*StreamEventsResponse_PlayerLeaveUnitEvent) Descriptor() ([]byte, []int) {
	return file_dcs_mission_v0_mission_proto_rawDescGZIP(), []int{1, 19}
}

func (x *StreamEventsResponse_PlayerLeaveUnitEvent) GetInitiator() *common.Initiator {
	if x != nil {
		return x.Initiator
	}
	return nil
}

// Occurs when a unit begins firing a machine gun- or autocannon-based weapon
// (weapons with a high rate of fire). Other weapons are handled by
// [ShotEvent].
type StreamEventsResponse_ShootingStartEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The object that started firing.
	Initiator *common.Initiator `protobuf:"bytes,1,opt,name=initiator,proto3" json:"initiator,omitempty"`
	// The name of the shoot weapon.
	WeaponName string `protobuf:"bytes,2,opt,name=weapon_name,json=weaponName,proto3" json:"weapon_name,omitempty"`
}

func (x *StreamEventsResponse_ShootingStartEvent) Reset() {
	*x = StreamEventsResponse_ShootingStartEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dcs_mission_v0_mission_proto_msgTypes[46]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StreamEventsResponse_ShootingStartEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StreamEventsResponse_ShootingStartEvent) ProtoMessage() {}

func (x *StreamEventsResponse_ShootingStartEvent) ProtoReflect() protoreflect.Message {
	mi := &file_dcs_mission_v0_mission_proto_msgTypes[46]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StreamEventsResponse_ShootingStartEvent.ProtoReflect.Descriptor instead.
func (*StreamEventsResponse_ShootingStartEvent) Descriptor() ([]byte, []int) {
	return file_dcs_mission_v0_mission_proto_rawDescGZIP(), []int{1, 20}
}

func (x *StreamEventsResponse_ShootingStartEvent) GetInitiator() *common.Initiator {
	if x != nil {
		return x.Initiator
	}
	return nil
}

func (x *StreamEventsResponse_ShootingStartEvent) GetWeaponName() string {
	if x != nil {
		return x.WeaponName
	}
	return ""
}

// Occurs when a unit stops firing a machine gun- or autocannon-based weapon.
// Event will always correspond with a [ShootingStartEvent] event.
type StreamEventsResponse_ShootingEndEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The object that was shooting and has no stopped firing.
	Initiator *common.Initiator `protobuf:"bytes,1,opt,name=initiator,proto3" json:"initiator,omitempty"`
	// The name of the shoot weapon.
	WeaponName string `protobuf:"bytes,2,opt,name=weapon_name,json=weaponName,proto3" json:"weapon_name,omitempty"`
}

func (x *StreamEventsResponse_ShootingEndEvent) Reset() {
	*x = StreamEventsResponse_ShootingEndEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dcs_mission_v0_mission_proto_msgTypes[47]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StreamEventsResponse_ShootingEndEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StreamEventsResponse_ShootingEndEvent) ProtoMessage() {}

func (x *StreamEventsResponse_ShootingEndEvent) ProtoReflect() protoreflect.Message {
	mi := &file_dcs_mission_v0_mission_proto_msgTypes[47]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StreamEventsResponse_ShootingEndEvent.ProtoReflect.Descriptor instead.
func (*StreamEventsResponse_ShootingEndEvent) Descriptor() ([]byte, []int) {
	return file_dcs_mission_v0_mission_proto_rawDescGZIP(), []int{1, 21}
}

func (x *StreamEventsResponse_ShootingEndEvent) GetInitiator() *common.Initiator {
	if x != nil {
		return x.Initiator
	}
	return nil
}

func (x *StreamEventsResponse_ShootingEndEvent) GetWeaponName() string {
	if x != nil {
		return x.WeaponName
	}
	return ""
}

// Occurs when marks get added to the mission by players or scripting
// functions.
type StreamEventsResponse_MarkAddEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The object that added the mark.
	Initiator *common.Initiator `protobuf:"bytes,1,opt,name=initiator,proto3" json:"initiator,omitempty"`
	// Types that are assignable to Visibility:
	//	*StreamEventsResponse_MarkAddEvent_GroupId
	//	*StreamEventsResponse_MarkAddEvent_Coalition
	Visibility isStreamEventsResponse_MarkAddEvent_Visibility `protobuf_oneof:"visibility"`
	// The mark's id.
	Id uint32 `protobuf:"varint,4,opt,name=id,proto3" json:"id,omitempty"`
	// The position the mark has been added at.
	Position *common.Position `protobuf:"bytes,5,opt,name=position,proto3" json:"position,omitempty"`
	// The mark's label.
	Text string `protobuf:"bytes,6,opt,name=text,proto3" json:"text,omitempty"`
}

func (x *StreamEventsResponse_MarkAddEvent) Reset() {
	*x = StreamEventsResponse_MarkAddEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dcs_mission_v0_mission_proto_msgTypes[48]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StreamEventsResponse_MarkAddEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StreamEventsResponse_MarkAddEvent) ProtoMessage() {}

func (x *StreamEventsResponse_MarkAddEvent) ProtoReflect() protoreflect.Message {
	mi := &file_dcs_mission_v0_mission_proto_msgTypes[48]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StreamEventsResponse_MarkAddEvent.ProtoReflect.Descriptor instead.
func (*StreamEventsResponse_MarkAddEvent) Descriptor() ([]byte, []int) {
	return file_dcs_mission_v0_mission_proto_rawDescGZIP(), []int{1, 22}
}

func (x *StreamEventsResponse_MarkAddEvent) GetInitiator() *common.Initiator {
	if x != nil {
		return x.Initiator
	}
	return nil
}

func (m *StreamEventsResponse_MarkAddEvent) GetVisibility() isStreamEventsResponse_MarkAddEvent_Visibility {
	if m != nil {
		return m.Visibility
	}
	return nil
}

func (x *StreamEventsResponse_MarkAddEvent) GetGroupId() uint64 {
	if x, ok := x.GetVisibility().(*StreamEventsResponse_MarkAddEvent_GroupId); ok {
		return x.GroupId
	}
	return 0
}

func (x *StreamEventsResponse_MarkAddEvent) GetCoalition() common.Coalition {
	if x, ok := x.GetVisibility().(*StreamEventsResponse_MarkAddEvent_Coalition); ok {
		return x.Coalition
	}
	return common.Coalition(0)
}

func (x *StreamEventsResponse_MarkAddEvent) GetId() uint32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *StreamEventsResponse_MarkAddEvent) GetPosition() *common.Position {
	if x != nil {
		return x.Position
	}
	return nil
}

func (x *StreamEventsResponse_MarkAddEvent) GetText() string {
	if x != nil {
		return x.Text
	}
	return ""
}

type isStreamEventsResponse_MarkAddEvent_Visibility interface {
	isStreamEventsResponse_MarkAddEvent_Visibility()
}

type StreamEventsResponse_MarkAddEvent_GroupId struct {
	// The group the mark's visibility is restricted for.
	GroupId uint64 `protobuf:"varint,2,opt,name=group_id,json=groupId,proto3,oneof"`
}

type StreamEventsResponse_MarkAddEvent_Coalition struct {
	// The coalition the mark's visibility is restricted for.
	Coalition common.Coalition `protobuf:"varint,3,opt,name=coalition,proto3,enum=dcs.common.v0.Coalition,oneof"`
}

func (*StreamEventsResponse_MarkAddEvent_GroupId) isStreamEventsResponse_MarkAddEvent_Visibility() {}

func (*StreamEventsResponse_MarkAddEvent_Coalition) isStreamEventsResponse_MarkAddEvent_Visibility() {
}

// Occurs when marks got changed.
type StreamEventsResponse_MarkChangeEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The object that changed the mark.
	Initiator *common.Initiator `protobuf:"bytes,1,opt,name=initiator,proto3" json:"initiator,omitempty"`
	// Types that are assignable to Visibility:
	//	*StreamEventsResponse_MarkChangeEvent_GroupId
	//	*StreamEventsResponse_MarkChangeEvent_Coalition
	Visibility isStreamEventsResponse_MarkChangeEvent_Visibility `protobuf_oneof:"visibility"`
	// The mark's id.
	Id uint32 `protobuf:"varint,4,opt,name=id,proto3" json:"id,omitempty"`
	// The position of the changed mark.
	Position *common.Position `protobuf:"bytes,5,opt,name=position,proto3" json:"position,omitempty"`
	// The mark's label.
	Text string `protobuf:"bytes,6,opt,name=text,proto3" json:"text,omitempty"`
}

func (x *StreamEventsResponse_MarkChangeEvent) Reset() {
	*x = StreamEventsResponse_MarkChangeEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dcs_mission_v0_mission_proto_msgTypes[49]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StreamEventsResponse_MarkChangeEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StreamEventsResponse_MarkChangeEvent) ProtoMessage() {}

func (x *StreamEventsResponse_MarkChangeEvent) ProtoReflect() protoreflect.Message {
	mi := &file_dcs_mission_v0_mission_proto_msgTypes[49]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StreamEventsResponse_MarkChangeEvent.ProtoReflect.Descriptor instead.
func (*StreamEventsResponse_MarkChangeEvent) Descriptor() ([]byte, []int) {
	return file_dcs_mission_v0_mission_proto_rawDescGZIP(), []int{1, 23}
}

func (x *StreamEventsResponse_MarkChangeEvent) GetInitiator() *common.Initiator {
	if x != nil {
		return x.Initiator
	}
	return nil
}

func (m *StreamEventsResponse_MarkChangeEvent) GetVisibility() isStreamEventsResponse_MarkChangeEvent_Visibility {
	if m != nil {
		return m.Visibility
	}
	return nil
}

func (x *StreamEventsResponse_MarkChangeEvent) GetGroupId() uint64 {
	if x, ok := x.GetVisibility().(*StreamEventsResponse_MarkChangeEvent_GroupId); ok {
		return x.GroupId
	}
	return 0
}

func (x *StreamEventsResponse_MarkChangeEvent) GetCoalition() common.Coalition {
	if x, ok := x.GetVisibility().(*StreamEventsResponse_MarkChangeEvent_Coalition); ok {
		return x.Coalition
	}
	return common.Coalition(0)
}

func (x *StreamEventsResponse_MarkChangeEvent) GetId() uint32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *StreamEventsResponse_MarkChangeEvent) GetPosition() *common.Position {
	if x != nil {
		return x.Position
	}
	return nil
}

func (x *StreamEventsResponse_MarkChangeEvent) GetText() string {
	if x != nil {
		return x.Text
	}
	return ""
}

type isStreamEventsResponse_MarkChangeEvent_Visibility interface {
	isStreamEventsResponse_MarkChangeEvent_Visibility()
}

type StreamEventsResponse_MarkChangeEvent_GroupId struct {
	// The group the mark's visibility is restricted for.
	GroupId uint64 `protobuf:"varint,2,opt,name=group_id,json=groupId,proto3,oneof"`
}

type StreamEventsResponse_MarkChangeEvent_Coalition struct {
	// The coalition the mark's visibility is restricted for.
	Coalition common.Coalition `protobuf:"varint,3,opt,name=coalition,proto3,enum=dcs.common.v0.Coalition,oneof"`
}

func (*StreamEventsResponse_MarkChangeEvent_GroupId) isStreamEventsResponse_MarkChangeEvent_Visibility() {
}

func (*StreamEventsResponse_MarkChangeEvent_Coalition) isStreamEventsResponse_MarkChangeEvent_Visibility() {
}

// Occurs when marks get removed.
type StreamEventsResponse_MarkRemoveEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The object that removed the mark.
	Initiator *common.Initiator `protobuf:"bytes,1,opt,name=initiator,proto3" json:"initiator,omitempty"`
	// Types that are assignable to Visibility:
	//	*StreamEventsResponse_MarkRemoveEvent_GroupId
	//	*StreamEventsResponse_MarkRemoveEvent_Coalition
	Visibility isStreamEventsResponse_MarkRemoveEvent_Visibility `protobuf_oneof:"visibility"`
	// The mark's id.
	Id uint32 `protobuf:"varint,4,opt,name=id,proto3" json:"id,omitempty"`
	// The position the mark has been removed from.
	Position *common.Position `protobuf:"bytes,5,opt,name=position,proto3" json:"position,omitempty"`
	// The mark's label.
	Text string `protobuf:"bytes,6,opt,name=text,proto3" json:"text,omitempty"`
}

func (x *StreamEventsResponse_MarkRemoveEvent) Reset() {
	*x = StreamEventsResponse_MarkRemoveEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dcs_mission_v0_mission_proto_msgTypes[50]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StreamEventsResponse_MarkRemoveEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StreamEventsResponse_MarkRemoveEvent) ProtoMessage() {}

func (x *StreamEventsResponse_MarkRemoveEvent) ProtoReflect() protoreflect.Message {
	mi := &file_dcs_mission_v0_mission_proto_msgTypes[50]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StreamEventsResponse_MarkRemoveEvent.ProtoReflect.Descriptor instead.
func (*StreamEventsResponse_MarkRemoveEvent) Descriptor() ([]byte, []int) {
	return file_dcs_mission_v0_mission_proto_rawDescGZIP(), []int{1, 24}
}

func (x *StreamEventsResponse_MarkRemoveEvent) GetInitiator() *common.Initiator {
	if x != nil {
		return x.Initiator
	}
	return nil
}

func (m *StreamEventsResponse_MarkRemoveEvent) GetVisibility() isStreamEventsResponse_MarkRemoveEvent_Visibility {
	if m != nil {
		return m.Visibility
	}
	return nil
}

func (x *StreamEventsResponse_MarkRemoveEvent) GetGroupId() uint64 {
	if x, ok := x.GetVisibility().(*StreamEventsResponse_MarkRemoveEvent_GroupId); ok {
		return x.GroupId
	}
	return 0
}

func (x *StreamEventsResponse_MarkRemoveEvent) GetCoalition() common.Coalition {
	if x, ok := x.GetVisibility().(*StreamEventsResponse_MarkRemoveEvent_Coalition); ok {
		return x.Coalition
	}
	return common.Coalition(0)
}

func (x *StreamEventsResponse_MarkRemoveEvent) GetId() uint32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *StreamEventsResponse_MarkRemoveEvent) GetPosition() *common.Position {
	if x != nil {
		return x.Position
	}
	return nil
}

func (x *StreamEventsResponse_MarkRemoveEvent) GetText() string {
	if x != nil {
		return x.Text
	}
	return ""
}

type isStreamEventsResponse_MarkRemoveEvent_Visibility interface {
	isStreamEventsResponse_MarkRemoveEvent_Visibility()
}

type StreamEventsResponse_MarkRemoveEvent_GroupId struct {
	// The group the mark's visibility is restricted for.
	GroupId uint64 `protobuf:"varint,2,opt,name=group_id,json=groupId,proto3,oneof"`
}

type StreamEventsResponse_MarkRemoveEvent_Coalition struct {
	// The coalition the mark's visibility is restricted for.
	Coalition common.Coalition `protobuf:"varint,3,opt,name=coalition,proto3,enum=dcs.common.v0.Coalition,oneof"`
}

func (*StreamEventsResponse_MarkRemoveEvent_GroupId) isStreamEventsResponse_MarkRemoveEvent_Visibility() {
}

func (*StreamEventsResponse_MarkRemoveEvent_Coalition) isStreamEventsResponse_MarkRemoveEvent_Visibility() {
}

// Occurs when an object is killed by a weapon.
type StreamEventsResponse_KillEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The object that fired the weapon.
	Initiator *common.Initiator `protobuf:"bytes,1,opt,name=initiator,proto3" json:"initiator,omitempty"`
	// The weapon that the target has been killed with.
	Weapon *common.Weapon `protobuf:"bytes,2,opt,name=weapon,proto3" json:"weapon,omitempty"`
	// The object that has been killed.
	Target *common.Target `protobuf:"bytes,3,opt,name=target,proto3" json:"target,omitempty"`
	// The name of the weapon that killed the target (exists instead of weapon
	// for weapons that trigger the shooting start and end events).
	WeaponName *string `protobuf:"bytes,4,opt,name=weapon_name,json=weaponName,proto3,oneof" json:"weapon_name,omitempty"`
}

func (x *StreamEventsResponse_KillEvent) Reset() {
	*x = StreamEventsResponse_KillEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dcs_mission_v0_mission_proto_msgTypes[51]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StreamEventsResponse_KillEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StreamEventsResponse_KillEvent) ProtoMessage() {}

func (x *StreamEventsResponse_KillEvent) ProtoReflect() protoreflect.Message {
	mi := &file_dcs_mission_v0_mission_proto_msgTypes[51]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StreamEventsResponse_KillEvent.ProtoReflect.Descriptor instead.
func (*StreamEventsResponse_KillEvent) Descriptor() ([]byte, []int) {
	return file_dcs_mission_v0_mission_proto_rawDescGZIP(), []int{1, 25}
}

func (x *StreamEventsResponse_KillEvent) GetInitiator() *common.Initiator {
	if x != nil {
		return x.Initiator
	}
	return nil
}

func (x *StreamEventsResponse_KillEvent) GetWeapon() *common.Weapon {
	if x != nil {
		return x.Weapon
	}
	return nil
}

func (x *StreamEventsResponse_KillEvent) GetTarget() *common.Target {
	if x != nil {
		return x.Target
	}
	return nil
}

func (x *StreamEventsResponse_KillEvent) GetWeaponName() string {
	if x != nil && x.WeaponName != nil {
		return *x.WeaponName
	}
	return ""
}

// A score change (doesn't contain any useful information)
type StreamEventsResponse_ScoreEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *StreamEventsResponse_ScoreEvent) Reset() {
	*x = StreamEventsResponse_ScoreEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dcs_mission_v0_mission_proto_msgTypes[52]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StreamEventsResponse_ScoreEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StreamEventsResponse_ScoreEvent) ProtoMessage() {}

func (x *StreamEventsResponse_ScoreEvent) ProtoReflect() protoreflect.Message {
	mi := &file_dcs_mission_v0_mission_proto_msgTypes[52]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StreamEventsResponse_ScoreEvent.ProtoReflect.Descriptor instead.
func (*StreamEventsResponse_ScoreEvent) Descriptor() ([]byte, []int) {
	return file_dcs_mission_v0_mission_proto_rawDescGZIP(), []int{1, 26}
}

// A unit got destroyed.
type StreamEventsResponse_UnitLostEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The object that got destroyed weapon.
	Initiator *common.Initiator `protobuf:"bytes,1,opt,name=initiator,proto3" json:"initiator,omitempty"`
}

func (x *StreamEventsResponse_UnitLostEvent) Reset() {
	*x = StreamEventsResponse_UnitLostEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dcs_mission_v0_mission_proto_msgTypes[53]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StreamEventsResponse_UnitLostEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StreamEventsResponse_UnitLostEvent) ProtoMessage() {}

func (x *StreamEventsResponse_UnitLostEvent) ProtoReflect() protoreflect.Message {
	mi := &file_dcs_mission_v0_mission_proto_msgTypes[53]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StreamEventsResponse_UnitLostEvent.ProtoReflect.Descriptor instead.
func (*StreamEventsResponse_UnitLostEvent) Descriptor() ([]byte, []int) {
	return file_dcs_mission_v0_mission_proto_rawDescGZIP(), []int{1, 27}
}

func (x *StreamEventsResponse_UnitLostEvent) GetInitiator() *common.Initiator {
	if x != nil {
		return x.Initiator
	}
	return nil
}

// A pilot detached from their ejection seat.
type StreamEventsResponse_LandingAfterEjectionEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The ejected pilot.
	Initiator *common.Initiator `protobuf:"bytes,1,opt,name=initiator,proto3" json:"initiator,omitempty"`
	// The position the pilot landed at.
	Place *common.Position `protobuf:"bytes,2,opt,name=place,proto3" json:"place,omitempty"`
}

func (x *StreamEventsResponse_LandingAfterEjectionEvent) Reset() {
	*x = StreamEventsResponse_LandingAfterEjectionEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dcs_mission_v0_mission_proto_msgTypes[54]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StreamEventsResponse_LandingAfterEjectionEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StreamEventsResponse_LandingAfterEjectionEvent) ProtoMessage() {}

func (x *StreamEventsResponse_LandingAfterEjectionEvent) ProtoReflect() protoreflect.Message {
	mi := &file_dcs_mission_v0_mission_proto_msgTypes[54]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StreamEventsResponse_LandingAfterEjectionEvent.ProtoReflect.Descriptor instead.
func (*StreamEventsResponse_LandingAfterEjectionEvent) Descriptor() ([]byte, []int) {
	return file_dcs_mission_v0_mission_proto_rawDescGZIP(), []int{1, 28}
}

func (x *StreamEventsResponse_LandingAfterEjectionEvent) GetInitiator() *common.Initiator {
	if x != nil {
		return x.Initiator
	}
	return nil
}

func (x *StreamEventsResponse_LandingAfterEjectionEvent) GetPlace() *common.Position {
	if x != nil {
		return x.Place
	}
	return nil
}

// A pilot detached from their ejection seat.
type StreamEventsResponse_DiscardChairAfterEjectionEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The ejection seat.
	Initiator *common.Initiator `protobuf:"bytes,1,opt,name=initiator,proto3" json:"initiator,omitempty"`
	// The pilot.
	Target *common.Target `protobuf:"bytes,2,opt,name=target,proto3" json:"target,omitempty"`
}

func (x *StreamEventsResponse_DiscardChairAfterEjectionEvent) Reset() {
	*x = StreamEventsResponse_DiscardChairAfterEjectionEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dcs_mission_v0_mission_proto_msgTypes[55]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StreamEventsResponse_DiscardChairAfterEjectionEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StreamEventsResponse_DiscardChairAfterEjectionEvent) ProtoMessage() {}

func (x *StreamEventsResponse_DiscardChairAfterEjectionEvent) ProtoReflect() protoreflect.Message {
	mi := &file_dcs_mission_v0_mission_proto_msgTypes[55]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StreamEventsResponse_DiscardChairAfterEjectionEvent.ProtoReflect.Descriptor instead.
func (*StreamEventsResponse_DiscardChairAfterEjectionEvent) Descriptor() ([]byte, []int) {
	return file_dcs_mission_v0_mission_proto_rawDescGZIP(), []int{1, 29}
}

func (x *StreamEventsResponse_DiscardChairAfterEjectionEvent) GetInitiator() *common.Initiator {
	if x != nil {
		return x.Initiator
	}
	return nil
}

func (x *StreamEventsResponse_DiscardChairAfterEjectionEvent) GetTarget() *common.Target {
	if x != nil {
		return x.Target
	}
	return nil
}

// Fired for each payload of an aircraft spawened midair.
type StreamEventsResponse_WeaponAddEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The object that got spawned.
	Initiator *common.Initiator `protobuf:"bytes,1,opt,name=initiator,proto3" json:"initiator,omitempty"`
	// The name of the payload.
	WeaponName string `protobuf:"bytes,2,opt,name=weapon_name,json=weaponName,proto3" json:"weapon_name,omitempty"`
}

func (x *StreamEventsResponse_WeaponAddEvent) Reset() {
	*x = StreamEventsResponse_WeaponAddEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dcs_mission_v0_mission_proto_msgTypes[56]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StreamEventsResponse_WeaponAddEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StreamEventsResponse_WeaponAddEvent) ProtoMessage() {}

func (x *StreamEventsResponse_WeaponAddEvent) ProtoReflect() protoreflect.Message {
	mi := &file_dcs_mission_v0_mission_proto_msgTypes[56]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StreamEventsResponse_WeaponAddEvent.ProtoReflect.Descriptor instead.
func (*StreamEventsResponse_WeaponAddEvent) Descriptor() ([]byte, []int) {
	return file_dcs_mission_v0_mission_proto_rawDescGZIP(), []int{1, 30}
}

func (x *StreamEventsResponse_WeaponAddEvent) GetInitiator() *common.Initiator {
	if x != nil {
		return x.Initiator
	}
	return nil
}

func (x *StreamEventsResponse_WeaponAddEvent) GetWeaponName() string {
	if x != nil {
		return x.WeaponName
	}
	return ""
}

// Occurs when an aircraft receives an LSO rating after recovering on an
// aircraft carrier.
type StreamEventsResponse_LandingQualityMarkEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The aircraft that received the rating.
	Initiator *common.Initiator `protobuf:"bytes,1,opt,name=initiator,proto3" json:"initiator,omitempty"`
	// The rating.
	Comment string `protobuf:"bytes,2,opt,name=comment,proto3" json:"comment,omitempty"`
	// The ship the unit landed at.
	Place *common.Airbase `protobuf:"bytes,3,opt,name=place,proto3" json:"place,omitempty"`
}

func (x *StreamEventsResponse_LandingQualityMarkEvent) Reset() {
	*x = StreamEventsResponse_LandingQualityMarkEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dcs_mission_v0_mission_proto_msgTypes[57]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StreamEventsResponse_LandingQualityMarkEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StreamEventsResponse_LandingQualityMarkEvent) ProtoMessage() {}

func (x *StreamEventsResponse_LandingQualityMarkEvent) ProtoReflect() protoreflect.Message {
	mi := &file_dcs_mission_v0_mission_proto_msgTypes[57]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StreamEventsResponse_LandingQualityMarkEvent.ProtoReflect.Descriptor instead.
func (*StreamEventsResponse_LandingQualityMarkEvent) Descriptor() ([]byte, []int) {
	return file_dcs_mission_v0_mission_proto_rawDescGZIP(), []int{1, 31}
}

func (x *StreamEventsResponse_LandingQualityMarkEvent) GetInitiator() *common.Initiator {
	if x != nil {
		return x.Initiator
	}
	return nil
}

func (x *StreamEventsResponse_LandingQualityMarkEvent) GetComment() string {
	if x != nil {
		return x.Comment
	}
	return ""
}

func (x *StreamEventsResponse_LandingQualityMarkEvent) GetPlace() *common.Airbase {
	if x != nil {
		return x.Place
	}
	return nil
}

// Occurs when a chat message is sent on the server
type StreamEventsResponse_PlayerSendChatEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The player's id in the current server session.
	PlayerId uint32 `protobuf:"varint,1,opt,name=player_id,json=playerId,proto3" json:"player_id,omitempty"`
	// what was typed
	Message string `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
}

func (x *StreamEventsResponse_PlayerSendChatEvent) Reset() {
	*x = StreamEventsResponse_PlayerSendChatEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dcs_mission_v0_mission_proto_msgTypes[58]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StreamEventsResponse_PlayerSendChatEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StreamEventsResponse_PlayerSendChatEvent) ProtoMessage() {}

func (x *StreamEventsResponse_PlayerSendChatEvent) ProtoReflect() protoreflect.Message {
	mi := &file_dcs_mission_v0_mission_proto_msgTypes[58]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StreamEventsResponse_PlayerSendChatEvent.ProtoReflect.Descriptor instead.
func (*StreamEventsResponse_PlayerSendChatEvent) Descriptor() ([]byte, []int) {
	return file_dcs_mission_v0_mission_proto_rawDescGZIP(), []int{1, 32}
}

func (x *StreamEventsResponse_PlayerSendChatEvent) GetPlayerId() uint32 {
	if x != nil {
		return x.PlayerId
	}
	return 0
}

func (x *StreamEventsResponse_PlayerSendChatEvent) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

// fired when the player changes across to a slot
type StreamEventsResponse_PlayerChangeSlotEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The player's id in the current server session.
	PlayerId uint32 `protobuf:"varint,1,opt,name=player_id,json=playerId,proto3" json:"player_id,omitempty"`
	// The slot's coalition
	Coalition common.Coalition `protobuf:"varint,2,opt,name=coalition,proto3,enum=dcs.common.v0.Coalition" json:"coalition,omitempty"`
	// The slot's identifier
	SlotId string `protobuf:"bytes,3,opt,name=slot_id,json=slotId,proto3" json:"slot_id,omitempty"`
}

func (x *StreamEventsResponse_PlayerChangeSlotEvent) Reset() {
	*x = StreamEventsResponse_PlayerChangeSlotEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dcs_mission_v0_mission_proto_msgTypes[59]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StreamEventsResponse_PlayerChangeSlotEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StreamEventsResponse_PlayerChangeSlotEvent) ProtoMessage() {}

func (x *StreamEventsResponse_PlayerChangeSlotEvent) ProtoReflect() protoreflect.Message {
	mi := &file_dcs_mission_v0_mission_proto_msgTypes[59]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StreamEventsResponse_PlayerChangeSlotEvent.ProtoReflect.Descriptor instead.
func (*StreamEventsResponse_PlayerChangeSlotEvent) Descriptor() ([]byte, []int) {
	return file_dcs_mission_v0_mission_proto_rawDescGZIP(), []int{1, 33}
}

func (x *StreamEventsResponse_PlayerChangeSlotEvent) GetPlayerId() uint32 {
	if x != nil {
		return x.PlayerId
	}
	return 0
}

func (x *StreamEventsResponse_PlayerChangeSlotEvent) GetCoalition() common.Coalition {
	if x != nil {
		return x.Coalition
	}
	return common.Coalition(0)
}

func (x *StreamEventsResponse_PlayerChangeSlotEvent) GetSlotId() string {
	if x != nil {
		return x.SlotId
	}
	return ""
}

//*
// Fired when a player connected to the server.
type StreamEventsResponse_ConnectEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The player's IP and port.
	Addr string `protobuf:"bytes,1,opt,name=addr,proto3" json:"addr,omitempty"`
	// The name of the player.
	Name string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	// The player's unique client identifier (used to ban a player).
	Ucid string `protobuf:"bytes,3,opt,name=ucid,proto3" json:"ucid,omitempty"`
	// The player's id in the current server session
	// (used to for name/slot/... changes).
	Id uint32 `protobuf:"varint,4,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *StreamEventsResponse_ConnectEvent) Reset() {
	*x = StreamEventsResponse_ConnectEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dcs_mission_v0_mission_proto_msgTypes[60]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StreamEventsResponse_ConnectEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StreamEventsResponse_ConnectEvent) ProtoMessage() {}

func (x *StreamEventsResponse_ConnectEvent) ProtoReflect() protoreflect.Message {
	mi := &file_dcs_mission_v0_mission_proto_msgTypes[60]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StreamEventsResponse_ConnectEvent.ProtoReflect.Descriptor instead.
func (*StreamEventsResponse_ConnectEvent) Descriptor() ([]byte, []int) {
	return file_dcs_mission_v0_mission_proto_rawDescGZIP(), []int{1, 34}
}

func (x *StreamEventsResponse_ConnectEvent) GetAddr() string {
	if x != nil {
		return x.Addr
	}
	return ""
}

func (x *StreamEventsResponse_ConnectEvent) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *StreamEventsResponse_ConnectEvent) GetUcid() string {
	if x != nil {
		return x.Ucid
	}
	return ""
}

func (x *StreamEventsResponse_ConnectEvent) GetId() uint32 {
	if x != nil {
		return x.Id
	}
	return 0
}

//*
// Fired when a player disconnected from the server
// (not fired for the server's player).
type StreamEventsResponse_DisconnectEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The player's id in the current server session.
	Id uint32 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	// The reason a player disconnected for.
	Reason StreamEventsResponse_DisconnectReason `protobuf:"varint,2,opt,name=reason,proto3,enum=dcs.mission.v0.StreamEventsResponse_DisconnectReason" json:"reason,omitempty"`
}

func (x *StreamEventsResponse_DisconnectEvent) Reset() {
	*x = StreamEventsResponse_DisconnectEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dcs_mission_v0_mission_proto_msgTypes[61]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StreamEventsResponse_DisconnectEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StreamEventsResponse_DisconnectEvent) ProtoMessage() {}

func (x *StreamEventsResponse_DisconnectEvent) ProtoReflect() protoreflect.Message {
	mi := &file_dcs_mission_v0_mission_proto_msgTypes[61]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StreamEventsResponse_DisconnectEvent.ProtoReflect.Descriptor instead.
func (*StreamEventsResponse_DisconnectEvent) Descriptor() ([]byte, []int) {
	return file_dcs_mission_v0_mission_proto_rawDescGZIP(), []int{1, 35}
}

func (x *StreamEventsResponse_DisconnectEvent) GetId() uint32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *StreamEventsResponse_DisconnectEvent) GetReason() StreamEventsResponse_DisconnectReason {
	if x != nil {
		return x.Reason
	}
	return StreamEventsResponse_DISCONNECT_REASON_UNSPECIFIED
}

type StreamEventsResponse_MissionCommandEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// A struct containing details of the command that was run by a player
	Details *structpb.Struct `protobuf:"bytes,1,opt,name=details,proto3" json:"details,omitempty"`
}

func (x *StreamEventsResponse_MissionCommandEvent) Reset() {
	*x = StreamEventsResponse_MissionCommandEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dcs_mission_v0_mission_proto_msgTypes[62]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StreamEventsResponse_MissionCommandEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StreamEventsResponse_MissionCommandEvent) ProtoMessage() {}

func (x *StreamEventsResponse_MissionCommandEvent) ProtoReflect() protoreflect.Message {
	mi := &file_dcs_mission_v0_mission_proto_msgTypes[62]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StreamEventsResponse_MissionCommandEvent.ProtoReflect.Descriptor instead.
func (*StreamEventsResponse_MissionCommandEvent) Descriptor() ([]byte, []int) {
	return file_dcs_mission_v0_mission_proto_rawDescGZIP(), []int{1, 36}
}

func (x *StreamEventsResponse_MissionCommandEvent) GetDetails() *structpb.Struct {
	if x != nil {
		return x.Details
	}
	return nil
}

type StreamEventsResponse_CoalitionCommandEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The coalition of the player who ran the command
	Coalition common.Coalition `protobuf:"varint,1,opt,name=coalition,proto3,enum=dcs.common.v0.Coalition" json:"coalition,omitempty"`
	// A struct containing details of the command that was run by a player
	Details *structpb.Struct `protobuf:"bytes,2,opt,name=details,proto3" json:"details,omitempty"`
}

func (x *StreamEventsResponse_CoalitionCommandEvent) Reset() {
	*x = StreamEventsResponse_CoalitionCommandEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dcs_mission_v0_mission_proto_msgTypes[63]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StreamEventsResponse_CoalitionCommandEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StreamEventsResponse_CoalitionCommandEvent) ProtoMessage() {}

func (x *StreamEventsResponse_CoalitionCommandEvent) ProtoReflect() protoreflect.Message {
	mi := &file_dcs_mission_v0_mission_proto_msgTypes[63]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StreamEventsResponse_CoalitionCommandEvent.ProtoReflect.Descriptor instead.
func (*StreamEventsResponse_CoalitionCommandEvent) Descriptor() ([]byte, []int) {
	return file_dcs_mission_v0_mission_proto_rawDescGZIP(), []int{1, 37}
}

func (x *StreamEventsResponse_CoalitionCommandEvent) GetCoalition() common.Coalition {
	if x != nil {
		return x.Coalition
	}
	return common.Coalition(0)
}

func (x *StreamEventsResponse_CoalitionCommandEvent) GetDetails() *structpb.Struct {
	if x != nil {
		return x.Details
	}
	return nil
}

type StreamEventsResponse_GroupCommandEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Details of the group to which the player who ran the command is a unit of
	Group *common.Group `protobuf:"bytes,1,opt,name=group,proto3" json:"group,omitempty"`
	// A struct containing details of the command that was run by a player
	Details *structpb.Struct `protobuf:"bytes,2,opt,name=details,proto3" json:"details,omitempty"`
}

func (x *StreamEventsResponse_GroupCommandEvent) Reset() {
	*x = StreamEventsResponse_GroupCommandEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dcs_mission_v0_mission_proto_msgTypes[64]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StreamEventsResponse_GroupCommandEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StreamEventsResponse_GroupCommandEvent) ProtoMessage() {}

func (x *StreamEventsResponse_GroupCommandEvent) ProtoReflect() protoreflect.Message {
	mi := &file_dcs_mission_v0_mission_proto_msgTypes[64]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StreamEventsResponse_GroupCommandEvent.ProtoReflect.Descriptor instead.
func (*StreamEventsResponse_GroupCommandEvent) Descriptor() ([]byte, []int) {
	return file_dcs_mission_v0_mission_proto_rawDescGZIP(), []int{1, 38}
}

func (x *StreamEventsResponse_GroupCommandEvent) GetGroup() *common.Group {
	if x != nil {
		return x.Group
	}
	return nil
}

func (x *StreamEventsResponse_GroupCommandEvent) GetDetails() *structpb.Struct {
	if x != nil {
		return x.Details
	}
	return nil
}

type StreamUnitsResponse_UnitGone struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id   uint32 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Name string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *StreamUnitsResponse_UnitGone) Reset() {
	*x = StreamUnitsResponse_UnitGone{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dcs_mission_v0_mission_proto_msgTypes[65]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StreamUnitsResponse_UnitGone) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StreamUnitsResponse_UnitGone) ProtoMessage() {}

func (x *StreamUnitsResponse_UnitGone) ProtoReflect() protoreflect.Message {
	mi := &file_dcs_mission_v0_mission_proto_msgTypes[65]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StreamUnitsResponse_UnitGone.ProtoReflect.Descriptor instead.
func (*StreamUnitsResponse_UnitGone) Descriptor() ([]byte, []int) {
	return file_dcs_mission_v0_mission_proto_rawDescGZIP(), []int{3, 0}
}

func (x *StreamUnitsResponse_UnitGone) GetId() uint32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *StreamUnitsResponse_UnitGone) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

var File_dcs_mission_v0_mission_proto protoreflect.FileDescriptor

var file_dcs_mission_v0_mission_proto_rawDesc = []byte{
	0x0a, 0x1c, 0x64, 0x63, 0x73, 0x2f, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x2f, 0x76, 0x30,
	0x2f, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0e,
	0x64, 0x63, 0x73, 0x2e, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x2e, 0x76, 0x30, 0x1a, 0x1a,
	0x64, 0x63, 0x73, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2f, 0x76, 0x30, 0x2f, 0x63, 0x6f,
	0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1c, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x73, 0x74, 0x72, 0x75,
	0x63, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x15, 0x0a, 0x13, 0x53, 0x74, 0x72, 0x65,
	0x61, 0x6d, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22,
	0xc3, 0x43, 0x0a, 0x14, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x73,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x69, 0x6d, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x01, 0x52, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x12, 0x44, 0x0a, 0x04,
	0x73, 0x68, 0x6f, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x64, 0x63, 0x73,
	0x2e, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x2e, 0x76, 0x30, 0x2e, 0x53, 0x74, 0x72, 0x65,
	0x61, 0x6d, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x2e, 0x53, 0x68, 0x6f, 0x74, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x48, 0x00, 0x52, 0x04, 0x73, 0x68,
	0x6f, 0x74, 0x12, 0x41, 0x0a, 0x03, 0x68, 0x69, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x2d, 0x2e, 0x64, 0x63, 0x73, 0x2e, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x2e, 0x76, 0x30,
	0x2e, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x48, 0x69, 0x74, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x48, 0x00,
	0x52, 0x03, 0x68, 0x69, 0x74, 0x12, 0x4d, 0x0a, 0x07, 0x74, 0x61, 0x6b, 0x65, 0x6f, 0x66, 0x66,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x31, 0x2e, 0x64, 0x63, 0x73, 0x2e, 0x6d, 0x69, 0x73,
	0x73, 0x69, 0x6f, 0x6e, 0x2e, 0x76, 0x30, 0x2e, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x45, 0x76,
	0x65, 0x6e, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x54, 0x61, 0x6b,
	0x65, 0x6f, 0x66, 0x66, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x48, 0x00, 0x52, 0x07, 0x74, 0x61, 0x6b,
	0x65, 0x6f, 0x66, 0x66, 0x12, 0x44, 0x0a, 0x04, 0x6c, 0x61, 0x6e, 0x64, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x64, 0x63, 0x73, 0x2e, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e,
	0x2e, 0x76, 0x30, 0x2e, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x73,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x4c, 0x61, 0x6e, 0x64, 0x45, 0x76, 0x65,
	0x6e, 0x74, 0x48, 0x00, 0x52, 0x04, 0x6c, 0x61, 0x6e, 0x64, 0x12, 0x47, 0x0a, 0x05, 0x63, 0x72,
	0x61, 0x73, 0x68, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x64, 0x63, 0x73, 0x2e,
	0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x2e, 0x76, 0x30, 0x2e, 0x53, 0x74, 0x72, 0x65, 0x61,
	0x6d, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e,
	0x43, 0x72, 0x61, 0x73, 0x68, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x48, 0x00, 0x52, 0x05, 0x63, 0x72,
	0x61, 0x73, 0x68, 0x12, 0x50, 0x0a, 0x08, 0x65, 0x6a, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18,
	0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x32, 0x2e, 0x64, 0x63, 0x73, 0x2e, 0x6d, 0x69, 0x73, 0x73,
	0x69, 0x6f, 0x6e, 0x2e, 0x76, 0x30, 0x2e, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x45, 0x76, 0x65,
	0x6e, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x45, 0x6a, 0x65, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x48, 0x00, 0x52, 0x08, 0x65, 0x6a, 0x65,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x53, 0x0a, 0x09, 0x72, 0x65, 0x66, 0x75, 0x65, 0x6c, 0x69,
	0x6e, 0x67, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x33, 0x2e, 0x64, 0x63, 0x73, 0x2e, 0x6d,
	0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x2e, 0x76, 0x30, 0x2e, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d,
	0x45, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x52,
	0x65, 0x66, 0x75, 0x65, 0x6c, 0x69, 0x6e, 0x67, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x48, 0x00, 0x52,
	0x09, 0x72, 0x65, 0x66, 0x75, 0x65, 0x6c, 0x69, 0x6e, 0x67, 0x12, 0x44, 0x0a, 0x04, 0x64, 0x65,
	0x61, 0x64, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x64, 0x63, 0x73, 0x2e, 0x6d,
	0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x2e, 0x76, 0x30, 0x2e, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d,
	0x45, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x44,
	0x65, 0x61, 0x64, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x48, 0x00, 0x52, 0x04, 0x64, 0x65, 0x61, 0x64,
	0x12, 0x54, 0x0a, 0x0a, 0x70, 0x69, 0x6c, 0x6f, 0x74, 0x5f, 0x64, 0x65, 0x61, 0x64, 0x18, 0x0c,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x33, 0x2e, 0x64, 0x63, 0x73, 0x2e, 0x6d, 0x69, 0x73, 0x73, 0x69,
	0x6f, 0x6e, 0x2e, 0x76, 0x30, 0x2e, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x45, 0x76, 0x65, 0x6e,
	0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x50, 0x69, 0x6c, 0x6f, 0x74,
	0x44, 0x65, 0x61, 0x64, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x48, 0x00, 0x52, 0x09, 0x70, 0x69, 0x6c,
	0x6f, 0x74, 0x44, 0x65, 0x61, 0x64, 0x12, 0x5a, 0x0a, 0x0c, 0x62, 0x61, 0x73, 0x65, 0x5f, 0x63,
	0x61, 0x70, 0x74, 0x75, 0x72, 0x65, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x35, 0x2e, 0x64,
	0x63, 0x73, 0x2e, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x2e, 0x76, 0x30, 0x2e, 0x53, 0x74,
	0x72, 0x65, 0x61, 0x6d, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x2e, 0x42, 0x61, 0x73, 0x65, 0x43, 0x61, 0x70, 0x74, 0x75, 0x72, 0x65, 0x45, 0x76,
	0x65, 0x6e, 0x74, 0x48, 0x00, 0x52, 0x0b, 0x62, 0x61, 0x73, 0x65, 0x43, 0x61, 0x70, 0x74, 0x75,
	0x72, 0x65, 0x12, 0x5d, 0x0a, 0x0d, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x73, 0x74,
	0x61, 0x72, 0x74, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x36, 0x2e, 0x64, 0x63, 0x73, 0x2e,
	0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x2e, 0x76, 0x30, 0x2e, 0x53, 0x74, 0x72, 0x65, 0x61,
	0x6d, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e,
	0x4d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x72, 0x74, 0x45, 0x76, 0x65, 0x6e,
	0x74, 0x48, 0x00, 0x52, 0x0c, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x72,
	0x74, 0x12, 0x57, 0x0a, 0x0b, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x65, 0x6e, 0x64,
	0x18, 0x0f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x34, 0x2e, 0x64, 0x63, 0x73, 0x2e, 0x6d, 0x69, 0x73,
	0x73, 0x69, 0x6f, 0x6e, 0x2e, 0x76, 0x30, 0x2e, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x45, 0x76,
	0x65, 0x6e, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x4d, 0x69, 0x73,
	0x73, 0x69, 0x6f, 0x6e, 0x45, 0x6e, 0x64, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x48, 0x00, 0x52, 0x0a,
	0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x45, 0x6e, 0x64, 0x12, 0x60, 0x0a, 0x0e, 0x72, 0x65,
	0x66, 0x75, 0x65, 0x6c, 0x69, 0x6e, 0x67, 0x5f, 0x73, 0x74, 0x6f, 0x70, 0x18, 0x11, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x37, 0x2e, 0x64, 0x63, 0x73, 0x2e, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e,
	0x2e, 0x76, 0x30, 0x2e, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x73,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x52, 0x65, 0x66, 0x75, 0x65, 0x6c, 0x69,
	0x6e, 0x67, 0x53, 0x74, 0x6f, 0x70, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x48, 0x00, 0x52, 0x0d, 0x72,
	0x65, 0x66, 0x75, 0x65, 0x6c, 0x69, 0x6e, 0x67, 0x53, 0x74, 0x6f, 0x70, 0x12, 0x47, 0x0a, 0x05,
	0x62, 0x69, 0x72, 0x74, 0x68, 0x18, 0x12, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x64, 0x63,
	0x73, 0x2e, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x2e, 0x76, 0x30, 0x2e, 0x53, 0x74, 0x72,
	0x65, 0x61, 0x6d, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x2e, 0x42, 0x69, 0x72, 0x74, 0x68, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x48, 0x00, 0x52, 0x05,
	0x62, 0x69, 0x72, 0x74, 0x68, 0x12, 0x5d, 0x0a, 0x0d, 0x68, 0x75, 0x6d, 0x61, 0x6e, 0x5f, 0x66,
	0x61, 0x69, 0x6c, 0x75, 0x72, 0x65, 0x18, 0x13, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x36, 0x2e, 0x64,
	0x63, 0x73, 0x2e, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x2e, 0x76, 0x30, 0x2e, 0x53, 0x74,
	0x72, 0x65, 0x61, 0x6d, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x2e, 0x48, 0x75, 0x6d, 0x61, 0x6e, 0x46, 0x61, 0x69, 0x6c, 0x75, 0x72, 0x65, 0x45,
	0x76, 0x65, 0x6e, 0x74, 0x48, 0x00, 0x52, 0x0c, 0x68, 0x75, 0x6d, 0x61, 0x6e, 0x46, 0x61, 0x69,
	0x6c, 0x75, 0x72, 0x65, 0x12, 0x66, 0x0a, 0x10, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x65, 0x64,
	0x5f, 0x66, 0x61, 0x69, 0x6c, 0x75, 0x72, 0x65, 0x18, 0x14, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x39,
	0x2e, 0x64, 0x63, 0x73, 0x2e, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x2e, 0x76, 0x30, 0x2e,
	0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x65, 0x64, 0x46, 0x61, 0x69,
	0x6c, 0x75, 0x72, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x48, 0x00, 0x52, 0x0f, 0x64, 0x65, 0x74,
	0x61, 0x69, 0x6c, 0x65, 0x64, 0x46, 0x61, 0x69, 0x6c, 0x75, 0x72, 0x65, 0x12, 0x60, 0x0a, 0x0e,
	0x65, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x5f, 0x73, 0x74, 0x61, 0x72, 0x74, 0x75, 0x70, 0x18, 0x15,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x37, 0x2e, 0x64, 0x63, 0x73, 0x2e, 0x6d, 0x69, 0x73, 0x73, 0x69,
	0x6f, 0x6e, 0x2e, 0x76, 0x30, 0x2e, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x45, 0x76, 0x65, 0x6e,
	0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x45, 0x6e, 0x67, 0x69, 0x6e,
	0x65, 0x53, 0x74, 0x61, 0x72, 0x74, 0x75, 0x70, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x48, 0x00, 0x52,
	0x0d, 0x65, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x53, 0x74, 0x61, 0x72, 0x74, 0x75, 0x70, 0x12, 0x63,
	0x0a, 0x0f, 0x65, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x5f, 0x73, 0x68, 0x75, 0x74, 0x64, 0x6f, 0x77,
	0x6e, 0x18, 0x16, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x38, 0x2e, 0x64, 0x63, 0x73, 0x2e, 0x6d, 0x69,
	0x73, 0x73, 0x69, 0x6f, 0x6e, 0x2e, 0x76, 0x30, 0x2e, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x45,
	0x76, 0x65, 0x6e, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x45, 0x6e,
	0x67, 0x69, 0x6e, 0x65, 0x53, 0x68, 0x75, 0x74, 0x64, 0x6f, 0x77, 0x6e, 0x45, 0x76, 0x65, 0x6e,
	0x74, 0x48, 0x00, 0x52, 0x0e, 0x65, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x53, 0x68, 0x75, 0x74, 0x64,
	0x6f, 0x77, 0x6e, 0x12, 0x67, 0x0a, 0x11, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x5f, 0x65, 0x6e,
	0x74, 0x65, 0x72, 0x5f, 0x75, 0x6e, 0x69, 0x74, 0x18, 0x17, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x39,
	0x2e, 0x64, 0x63, 0x73, 0x2e, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x2e, 0x76, 0x30, 0x2e,
	0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x45, 0x6e, 0x74, 0x65, 0x72,
	0x55, 0x6e, 0x69, 0x74, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x48, 0x00, 0x52, 0x0f, 0x70, 0x6c, 0x61,
	0x79, 0x65, 0x72, 0x45, 0x6e, 0x74, 0x65, 0x72, 0x55, 0x6e, 0x69, 0x74, 0x12, 0x67, 0x0a, 0x11,
	0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x5f, 0x6c, 0x65, 0x61, 0x76, 0x65, 0x5f, 0x75, 0x6e, 0x69,
	0x74, 0x18, 0x18, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x39, 0x2e, 0x64, 0x63, 0x73, 0x2e, 0x6d, 0x69,
	0x73, 0x73, 0x69, 0x6f, 0x6e, 0x2e, 0x76, 0x30, 0x2e, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x45,
	0x76, 0x65, 0x6e, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x50, 0x6c,
	0x61, 0x79, 0x65, 0x72, 0x4c, 0x65, 0x61, 0x76, 0x65, 0x55, 0x6e, 0x69, 0x74, 0x45, 0x76, 0x65,
	0x6e, 0x74, 0x48, 0x00, 0x52, 0x0f, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x4c, 0x65, 0x61, 0x76,
	0x65, 0x55, 0x6e, 0x69, 0x74, 0x12, 0x60, 0x0a, 0x0e, 0x73, 0x68, 0x6f, 0x6f, 0x74, 0x69, 0x6e,
	0x67, 0x5f, 0x73, 0x74, 0x61, 0x72, 0x74, 0x18, 0x1a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x37, 0x2e,
	0x64, 0x63, 0x73, 0x2e, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x2e, 0x76, 0x30, 0x2e, 0x53,
	0x74, 0x72, 0x65, 0x61, 0x6d, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x2e, 0x53, 0x68, 0x6f, 0x6f, 0x74, 0x69, 0x6e, 0x67, 0x53, 0x74, 0x61, 0x72,
	0x74, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x48, 0x00, 0x52, 0x0d, 0x73, 0x68, 0x6f, 0x6f, 0x74, 0x69,
	0x6e, 0x67, 0x53, 0x74, 0x61, 0x72, 0x74, 0x12, 0x5a, 0x0a, 0x0c, 0x73, 0x68, 0x6f, 0x6f, 0x74,
	0x69, 0x6e, 0x67, 0x5f, 0x65, 0x6e, 0x64, 0x18, 0x1b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x35, 0x2e,
	0x64, 0x63, 0x73, 0x2e, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x2e, 0x76, 0x30, 0x2e, 0x53,
	0x74, 0x72, 0x65, 0x61, 0x6d, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x2e, 0x53, 0x68, 0x6f, 0x6f, 0x74, 0x69, 0x6e, 0x67, 0x45, 0x6e, 0x64, 0x45,
	0x76, 0x65, 0x6e, 0x74, 0x48, 0x00, 0x52, 0x0b, 0x73, 0x68, 0x6f, 0x6f, 0x74, 0x69, 0x6e, 0x67,
	0x45, 0x6e, 0x64, 0x12, 0x4e, 0x0a, 0x08, 0x6d, 0x61, 0x72, 0x6b, 0x5f, 0x61, 0x64, 0x64, 0x18,
	0x1c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x31, 0x2e, 0x64, 0x63, 0x73, 0x2e, 0x6d, 0x69, 0x73, 0x73,
	0x69, 0x6f, 0x6e, 0x2e, 0x76, 0x30, 0x2e, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x45, 0x76, 0x65,
	0x6e, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x4d, 0x61, 0x72, 0x6b,
	0x41, 0x64, 0x64, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x48, 0x00, 0x52, 0x07, 0x6d, 0x61, 0x72, 0x6b,
	0x41, 0x64, 0x64, 0x12, 0x57, 0x0a, 0x0b, 0x6d, 0x61, 0x72, 0x6b, 0x5f, 0x63, 0x68, 0x61, 0x6e,
	0x67, 0x65, 0x18, 0x1d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x34, 0x2e, 0x64, 0x63, 0x73, 0x2e, 0x6d,
	0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x2e, 0x76, 0x30, 0x2e, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d,
	0x45, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x4d,
	0x61, 0x72, 0x6b, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x48, 0x00,
	0x52, 0x0a, 0x6d, 0x61, 0x72, 0x6b, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x12, 0x57, 0x0a, 0x0b,
	0x6d, 0x61, 0x72, 0x6b, 0x5f, 0x72, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x18, 0x1e, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x34, 0x2e, 0x64, 0x63, 0x73, 0x2e, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x2e,
	0x76, 0x30, 0x2e, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x4d, 0x61, 0x72, 0x6b, 0x52, 0x65, 0x6d, 0x6f,
	0x76, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x48, 0x00, 0x52, 0x0a, 0x6d, 0x61, 0x72, 0x6b, 0x52,
	0x65, 0x6d, 0x6f, 0x76, 0x65, 0x12, 0x44, 0x0a, 0x04, 0x6b, 0x69, 0x6c, 0x6c, 0x18, 0x1f, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x64, 0x63, 0x73, 0x2e, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f,
	0x6e, 0x2e, 0x76, 0x30, 0x2e, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x45, 0x76, 0x65, 0x6e, 0x74,
	0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x4b, 0x69, 0x6c, 0x6c, 0x45, 0x76,
	0x65, 0x6e, 0x74, 0x48, 0x00, 0x52, 0x04, 0x6b, 0x69, 0x6c, 0x6c, 0x12, 0x47, 0x0a, 0x05, 0x73,
	0x63, 0x6f, 0x72, 0x65, 0x18, 0x20, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x64, 0x63, 0x73,
	0x2e, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x2e, 0x76, 0x30, 0x2e, 0x53, 0x74, 0x72, 0x65,
	0x61, 0x6d, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x2e, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x48, 0x00, 0x52, 0x05, 0x73,
	0x63, 0x6f, 0x72, 0x65, 0x12, 0x51, 0x0a, 0x09, 0x75, 0x6e, 0x69, 0x74, 0x5f, 0x6c, 0x6f, 0x73,
	0x74, 0x18, 0x21, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x32, 0x2e, 0x64, 0x63, 0x73, 0x2e, 0x6d, 0x69,
	0x73, 0x73, 0x69, 0x6f, 0x6e, 0x2e, 0x76, 0x30, 0x2e, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x45,
	0x76, 0x65, 0x6e, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x55, 0x6e,
	0x69, 0x74, 0x4c, 0x6f, 0x73, 0x74, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x48, 0x00, 0x52, 0x08, 0x75,
	0x6e, 0x69, 0x74, 0x4c, 0x6f, 0x73, 0x74, 0x12, 0x76, 0x0a, 0x16, 0x6c, 0x61, 0x6e, 0x64, 0x69,
	0x6e, 0x67, 0x5f, 0x61, 0x66, 0x74, 0x65, 0x72, 0x5f, 0x65, 0x6a, 0x65, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x18, 0x22, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3e, 0x2e, 0x64, 0x63, 0x73, 0x2e, 0x6d, 0x69,
	0x73, 0x73, 0x69, 0x6f, 0x6e, 0x2e, 0x76, 0x30, 0x2e, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x45,
	0x76, 0x65, 0x6e, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x4c, 0x61,
	0x6e, 0x64, 0x69, 0x6e, 0x67, 0x41, 0x66, 0x74, 0x65, 0x72, 0x45, 0x6a, 0x65, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x48, 0x00, 0x52, 0x14, 0x6c, 0x61, 0x6e, 0x64, 0x69,
	0x6e, 0x67, 0x41, 0x66, 0x74, 0x65, 0x72, 0x45, 0x6a, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x86, 0x01, 0x0a, 0x1c, 0x64, 0x69, 0x73, 0x63, 0x61, 0x72, 0x64, 0x5f, 0x63, 0x68, 0x61, 0x69,
	0x72, 0x5f, 0x61, 0x66, 0x74, 0x65, 0x72, 0x5f, 0x65, 0x6a, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x18, 0x24, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x43, 0x2e, 0x64, 0x63, 0x73, 0x2e, 0x6d, 0x69, 0x73,
	0x73, 0x69, 0x6f, 0x6e, 0x2e, 0x76, 0x30, 0x2e, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x45, 0x76,
	0x65, 0x6e, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x44, 0x69, 0x73,
	0x63, 0x61, 0x72, 0x64, 0x43, 0x68, 0x61, 0x69, 0x72, 0x41, 0x66, 0x74, 0x65, 0x72, 0x45, 0x6a,
	0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x48, 0x00, 0x52, 0x19, 0x64,
	0x69, 0x73, 0x63, 0x61, 0x72, 0x64, 0x43, 0x68, 0x61, 0x69, 0x72, 0x41, 0x66, 0x74, 0x65, 0x72,
	0x45, 0x6a, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x54, 0x0a, 0x0a, 0x77, 0x65, 0x61, 0x70,
	0x6f, 0x6e, 0x5f, 0x61, 0x64, 0x64, 0x18, 0x25, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x33, 0x2e, 0x64,
	0x63, 0x73, 0x2e, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x2e, 0x76, 0x30, 0x2e, 0x53, 0x74,
	0x72, 0x65, 0x61, 0x6d, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x2e, 0x57, 0x65, 0x61, 0x70, 0x6f, 0x6e, 0x41, 0x64, 0x64, 0x45, 0x76, 0x65, 0x6e,
	0x74, 0x48, 0x00, 0x52, 0x09, 0x77, 0x65, 0x61, 0x70, 0x6f, 0x6e, 0x41, 0x64, 0x64, 0x12, 0x70,
	0x0a, 0x14, 0x6c, 0x61, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x5f, 0x71, 0x75, 0x61, 0x6c, 0x69, 0x74,
	0x79, 0x5f, 0x6d, 0x61, 0x72, 0x6b, 0x18, 0x27, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3c, 0x2e, 0x64,
	0x63, 0x73, 0x2e, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x2e, 0x76, 0x30, 0x2e, 0x53, 0x74,
	0x72, 0x65, 0x61, 0x6d, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x2e, 0x4c, 0x61, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x51, 0x75, 0x61, 0x6c, 0x69, 0x74,
	0x79, 0x4d, 0x61, 0x72, 0x6b, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x48, 0x00, 0x52, 0x12, 0x6c, 0x61,
	0x6e, 0x64, 0x69, 0x6e, 0x67, 0x51, 0x75, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x4d, 0x61, 0x72, 0x6b,
	0x12, 0x4e, 0x0a, 0x07, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x18, 0x80, 0x40, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x31, 0x2e, 0x64, 0x63, 0x73, 0x2e, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e,
	0x2e, 0x76, 0x30, 0x2e, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x73,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74,
	0x45, 0x76, 0x65, 0x6e, 0x74, 0x48, 0x00, 0x52, 0x07, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74,
	0x12, 0x57, 0x0a, 0x0a, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x18, 0x81,
	0x40, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x34, 0x2e, 0x64, 0x63, 0x73, 0x2e, 0x6d, 0x69, 0x73, 0x73,
	0x69, 0x6f, 0x6e, 0x2e, 0x76, 0x30, 0x2e, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x45, 0x76, 0x65,
	0x6e, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x44, 0x69, 0x73, 0x63,
	0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x48, 0x00, 0x52, 0x0a, 0x64,
	0x69, 0x73, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x12, 0x65, 0x0a, 0x10, 0x70, 0x6c, 0x61,
	0x79, 0x65, 0x72, 0x5f, 0x73, 0x65, 0x6e, 0x64, 0x5f, 0x63, 0x68, 0x61, 0x74, 0x18, 0x82, 0x40,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x38, 0x2e, 0x64, 0x63, 0x73, 0x2e, 0x6d, 0x69, 0x73, 0x73, 0x69,
	0x6f, 0x6e, 0x2e, 0x76, 0x30, 0x2e, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x45, 0x76, 0x65, 0x6e,
	0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x50, 0x6c, 0x61, 0x79, 0x65,
	0x72, 0x53, 0x65, 0x6e, 0x64, 0x43, 0x68, 0x61, 0x74, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x48, 0x00,
	0x52, 0x0e, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x53, 0x65, 0x6e, 0x64, 0x43, 0x68, 0x61, 0x74,
	0x12, 0x6b, 0x0a, 0x12, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x5f, 0x63, 0x68, 0x61, 0x6e, 0x67,
	0x65, 0x5f, 0x73, 0x6c, 0x6f, 0x74, 0x18, 0x83, 0x40, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3a, 0x2e,
	0x64, 0x63, 0x73, 0x2e, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x2e, 0x76, 0x30, 0x2e, 0x53,
	0x74, 0x72, 0x65, 0x61, 0x6d, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x2e, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65,
	0x53, 0x6c, 0x6f, 0x74, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x48, 0x00, 0x52, 0x10, 0x70, 0x6c, 0x61,
	0x79, 0x65, 0x72, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x53, 0x6c, 0x6f, 0x74, 0x12, 0x64, 0x0a,
	0x0f, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64,
	0x18, 0x84, 0x40, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x38, 0x2e, 0x64, 0x63, 0x73, 0x2e, 0x6d, 0x69,
	0x73, 0x73, 0x69, 0x6f, 0x6e, 0x2e, 0x76, 0x30, 0x2e, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x45,
	0x76, 0x65, 0x6e, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x4d, 0x69,
	0x73, 0x73, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x45, 0x76, 0x65, 0x6e,
	0x74, 0x48, 0x00, 0x52, 0x0e, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6d, 0x6d,
	0x61, 0x6e, 0x64, 0x12, 0x6a, 0x0a, 0x11, 0x63, 0x6f, 0x61, 0x6c, 0x69, 0x74, 0x69, 0x6f, 0x6e,
	0x5f, 0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x18, 0x85, 0x40, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x3a, 0x2e, 0x64, 0x63, 0x73, 0x2e, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x2e, 0x76, 0x30,
	0x2e, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x43, 0x6f, 0x61, 0x6c, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x43,
	0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x48, 0x00, 0x52, 0x10, 0x63,
	0x6f, 0x61, 0x6c, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x12,
	0x5e, 0x0a, 0x0d, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64,
	0x18, 0x86, 0x40, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x36, 0x2e, 0x64, 0x63, 0x73, 0x2e, 0x6d, 0x69,
	0x73, 0x73, 0x69, 0x6f, 0x6e, 0x2e, 0x76, 0x30, 0x2e, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x45,
	0x76, 0x65, 0x6e, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x47, 0x72,
	0x6f, 0x75, 0x70, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x48,
	0x00, 0x52, 0x0c, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x1a,
	0x72, 0x0a, 0x09, 0x53, 0x68, 0x6f, 0x74, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x36, 0x0a, 0x09,
	0x69, 0x6e, 0x69, 0x74, 0x69, 0x61, 0x74, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x18, 0x2e, 0x64, 0x63, 0x73, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x30, 0x2e,
	0x49, 0x6e, 0x69, 0x74, 0x69, 0x61, 0x74, 0x6f, 0x72, 0x52, 0x09, 0x69, 0x6e, 0x69, 0x74, 0x69,
	0x61, 0x74, 0x6f, 0x72, 0x12, 0x2d, 0x0a, 0x06, 0x77, 0x65, 0x61, 0x70, 0x6f, 0x6e, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x64, 0x63, 0x73, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f,
	0x6e, 0x2e, 0x76, 0x30, 0x2e, 0x57, 0x65, 0x61, 0x70, 0x6f, 0x6e, 0x52, 0x06, 0x77, 0x65, 0x61,
	0x70, 0x6f, 0x6e, 0x1a, 0xe9, 0x01, 0x0a, 0x08, 0x48, 0x69, 0x74, 0x45, 0x76, 0x65, 0x6e, 0x74,
	0x12, 0x3b, 0x0a, 0x09, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x61, 0x74, 0x6f, 0x72, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x64, 0x63, 0x73, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e,
	0x2e, 0x76, 0x30, 0x2e, 0x49, 0x6e, 0x69, 0x74, 0x69, 0x61, 0x74, 0x6f, 0x72, 0x48, 0x00, 0x52,
	0x09, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x61, 0x74, 0x6f, 0x72, 0x88, 0x01, 0x01, 0x12, 0x2d, 0x0a,
	0x06, 0x77, 0x65, 0x61, 0x70, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e,
	0x64, 0x63, 0x73, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x30, 0x2e, 0x57, 0x65,
	0x61, 0x70, 0x6f, 0x6e, 0x52, 0x06, 0x77, 0x65, 0x61, 0x70, 0x6f, 0x6e, 0x12, 0x2d, 0x0a, 0x06,
	0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x64,
	0x63, 0x73, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x30, 0x2e, 0x54, 0x61, 0x72,
	0x67, 0x65, 0x74, 0x52, 0x06, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x12, 0x24, 0x0a, 0x0b, 0x77,
	0x65, 0x61, 0x70, 0x6f, 0x6e, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09,
	0x48, 0x01, 0x52, 0x0a, 0x77, 0x65, 0x61, 0x70, 0x6f, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x88, 0x01,
	0x01, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x61, 0x74, 0x6f, 0x72, 0x42,
	0x0e, 0x0a, 0x0c, 0x5f, 0x77, 0x65, 0x61, 0x70, 0x6f, 0x6e, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x1a,
	0x74, 0x0a, 0x0c, 0x54, 0x61, 0x6b, 0x65, 0x6f, 0x66, 0x66, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12,
	0x36, 0x0a, 0x09, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x61, 0x74, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x18, 0x2e, 0x64, 0x63, 0x73, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e,
	0x76, 0x30, 0x2e, 0x49, 0x6e, 0x69, 0x74, 0x69, 0x61, 0x74, 0x6f, 0x72, 0x52, 0x09, 0x69, 0x6e,
	0x69, 0x74, 0x69, 0x61, 0x74, 0x6f, 0x72, 0x12, 0x2c, 0x0a, 0x05, 0x70, 0x6c, 0x61, 0x63, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x64, 0x63, 0x73, 0x2e, 0x63, 0x6f, 0x6d,
	0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x30, 0x2e, 0x41, 0x69, 0x72, 0x62, 0x61, 0x73, 0x65, 0x52, 0x05,
	0x70, 0x6c, 0x61, 0x63, 0x65, 0x1a, 0x71, 0x0a, 0x09, 0x4c, 0x61, 0x6e, 0x64, 0x45, 0x76, 0x65,
	0x6e, 0x74, 0x12, 0x36, 0x0a, 0x09, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x61, 0x74, 0x6f, 0x72, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x64, 0x63, 0x73, 0x2e, 0x63, 0x6f, 0x6d, 0x6d,
	0x6f, 0x6e, 0x2e, 0x76, 0x30, 0x2e, 0x49, 0x6e, 0x69, 0x74, 0x69, 0x61, 0x74, 0x6f, 0x72, 0x52,
	0x09, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x61, 0x74, 0x6f, 0x72, 0x12, 0x2c, 0x0a, 0x05, 0x70, 0x6c,
	0x61, 0x63, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x64, 0x63, 0x73, 0x2e,
	0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x30, 0x2e, 0x41, 0x69, 0x72, 0x62, 0x61, 0x73,
	0x65, 0x52, 0x05, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x1a, 0x44, 0x0a, 0x0a, 0x43, 0x72, 0x61, 0x73,
	0x68, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x36, 0x0a, 0x09, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x61,
	0x74, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x64, 0x63, 0x73, 0x2e,
	0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x30, 0x2e, 0x49, 0x6e, 0x69, 0x74, 0x69, 0x61,
	0x74, 0x6f, 0x72, 0x52, 0x09, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x61, 0x74, 0x6f, 0x72, 0x1a, 0x76,
	0x0a, 0x0d, 0x45, 0x6a, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12,
	0x36, 0x0a, 0x09, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x61, 0x74, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x18, 0x2e, 0x64, 0x63, 0x73, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e,
	0x76, 0x30, 0x2e, 0x49, 0x6e, 0x69, 0x74, 0x69, 0x61, 0x74, 0x6f, 0x72, 0x52, 0x09, 0x69, 0x6e,
	0x69, 0x74, 0x69, 0x61, 0x74, 0x6f, 0x72, 0x12, 0x2d, 0x0a, 0x06, 0x74, 0x61, 0x72, 0x67, 0x65,
	0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x64, 0x63, 0x73, 0x2e, 0x63, 0x6f,
	0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x30, 0x2e, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x52, 0x06,
	0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x1a, 0x48, 0x0a, 0x0e, 0x52, 0x65, 0x66, 0x75, 0x65, 0x6c,
	0x69, 0x6e, 0x67, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x36, 0x0a, 0x09, 0x69, 0x6e, 0x69, 0x74,
	0x69, 0x61, 0x74, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x64, 0x63,
	0x73, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x30, 0x2e, 0x49, 0x6e, 0x69, 0x74,
	0x69, 0x61, 0x74, 0x6f, 0x72, 0x52, 0x09, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x61, 0x74, 0x6f, 0x72,
	0x1a, 0x43, 0x0a, 0x09, 0x44, 0x65, 0x61, 0x64, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x36, 0x0a,
	0x09, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x61, 0x74, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x18, 0x2e, 0x64, 0x63, 0x73, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x30,
	0x2e, 0x49, 0x6e, 0x69, 0x74, 0x69, 0x61, 0x74, 0x6f, 0x72, 0x52, 0x09, 0x69, 0x6e, 0x69, 0x74,
	0x69, 0x61, 0x74, 0x6f, 0x72, 0x1a, 0x48, 0x0a, 0x0e, 0x50, 0x69, 0x6c, 0x6f, 0x74, 0x44, 0x65,
	0x61, 0x64, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x36, 0x0a, 0x09, 0x69, 0x6e, 0x69, 0x74, 0x69,
	0x61, 0x74, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x64, 0x63, 0x73,
	0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x30, 0x2e, 0x49, 0x6e, 0x69, 0x74, 0x69,
	0x61, 0x74, 0x6f, 0x72, 0x52, 0x09, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x61, 0x74, 0x6f, 0x72, 0x1a,
	0x78, 0x0a, 0x10, 0x42, 0x61, 0x73, 0x65, 0x43, 0x61, 0x70, 0x74, 0x75, 0x72, 0x65, 0x45, 0x76,
	0x65, 0x6e, 0x74, 0x12, 0x36, 0x0a, 0x09, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x61, 0x74, 0x6f, 0x72,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x64, 0x63, 0x73, 0x2e, 0x63, 0x6f, 0x6d,
	0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x30, 0x2e, 0x49, 0x6e, 0x69, 0x74, 0x69, 0x61, 0x74, 0x6f, 0x72,
	0x52, 0x09, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x61, 0x74, 0x6f, 0x72, 0x12, 0x2c, 0x0a, 0x05, 0x70,
	0x6c, 0x61, 0x63, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x64, 0x63, 0x73,
	0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x30, 0x2e, 0x41, 0x69, 0x72, 0x62, 0x61,
	0x73, 0x65, 0x52, 0x05, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x1a, 0x13, 0x0a, 0x11, 0x4d, 0x69, 0x73,
	0x73, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x72, 0x74, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x1a, 0x11,
	0x0a, 0x0f, 0x4d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x45, 0x6e, 0x64, 0x45, 0x76, 0x65, 0x6e,
	0x74, 0x1a, 0x4c, 0x0a, 0x12, 0x52, 0x65, 0x66, 0x75, 0x65, 0x6c, 0x69, 0x6e, 0x67, 0x53, 0x74,
	0x6f, 0x70, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x36, 0x0a, 0x09, 0x69, 0x6e, 0x69, 0x74, 0x69,
	0x61, 0x74, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x64, 0x63, 0x73,
	0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x30, 0x2e, 0x49, 0x6e, 0x69, 0x74, 0x69,
	0x61, 0x74, 0x6f, 0x72, 0x52, 0x09, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x61, 0x74, 0x6f, 0x72, 0x1a,
	0x81, 0x01, 0x0a, 0x0a, 0x42, 0x69, 0x72, 0x74, 0x68, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x36,
	0x0a, 0x09, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x61, 0x74, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x18, 0x2e, 0x64, 0x63, 0x73, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76,
	0x30, 0x2e, 0x49, 0x6e, 0x69, 0x74, 0x69, 0x61, 0x74, 0x6f, 0x72, 0x52, 0x09, 0x69, 0x6e, 0x69,
	0x74, 0x69, 0x61, 0x74, 0x6f, 0x72, 0x12, 0x31, 0x0a, 0x05, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x64, 0x63, 0x73, 0x2e, 0x63, 0x6f, 0x6d, 0x6d,
	0x6f, 0x6e, 0x2e, 0x76, 0x30, 0x2e, 0x41, 0x69, 0x72, 0x62, 0x61, 0x73, 0x65, 0x48, 0x00, 0x52,
	0x05, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x88, 0x01, 0x01, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x70, 0x6c,
	0x61, 0x63, 0x65, 0x1a, 0x4b, 0x0a, 0x11, 0x48, 0x75, 0x6d, 0x61, 0x6e, 0x46, 0x61, 0x69, 0x6c,
	0x75, 0x72, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x36, 0x0a, 0x09, 0x69, 0x6e, 0x69, 0x74,
	0x69, 0x61, 0x74, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x64, 0x63,
	0x73, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x30, 0x2e, 0x49, 0x6e, 0x69, 0x74,
	0x69, 0x61, 0x74, 0x6f, 0x72, 0x52, 0x09, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x61, 0x74, 0x6f, 0x72,
	0x1a, 0x45, 0x0a, 0x14, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x65, 0x64, 0x46, 0x61, 0x69, 0x6c,
	0x75, 0x72, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x2d, 0x0a, 0x06, 0x74, 0x61, 0x72, 0x67,
	0x65, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x64, 0x63, 0x73, 0x2e, 0x63,
	0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x30, 0x2e, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x52,
	0x06, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x1a, 0x7a, 0x0a, 0x12, 0x45, 0x6e, 0x67, 0x69, 0x6e,
	0x65, 0x53, 0x74, 0x61, 0x72, 0x74, 0x75, 0x70, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x36, 0x0a,
	0x09, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x61, 0x74, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x18, 0x2e, 0x64, 0x63, 0x73, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x30,
	0x2e, 0x49, 0x6e, 0x69, 0x74, 0x69, 0x61, 0x74, 0x6f, 0x72, 0x52, 0x09, 0x69, 0x6e, 0x69, 0x74,
	0x69, 0x61, 0x74, 0x6f, 0x72, 0x12, 0x2c, 0x0a, 0x05, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x64, 0x63, 0x73, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f,
	0x6e, 0x2e, 0x76, 0x30, 0x2e, 0x41, 0x69, 0x72, 0x62, 0x61, 0x73, 0x65, 0x52, 0x05, 0x70, 0x6c,
	0x61, 0x63, 0x65, 0x1a, 0x7b, 0x0a, 0x13, 0x45, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x53, 0x68, 0x75,
	0x74, 0x64, 0x6f, 0x77, 0x6e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x36, 0x0a, 0x09, 0x69, 0x6e,
	0x69, 0x74, 0x69, 0x61, 0x74, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e,
	0x64, 0x63, 0x73, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x30, 0x2e, 0x49, 0x6e,
	0x69, 0x74, 0x69, 0x61, 0x74, 0x6f, 0x72, 0x52, 0x09, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x61, 0x74,
	0x6f, 0x72, 0x12, 0x2c, 0x0a, 0x05, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x16, 0x2e, 0x64, 0x63, 0x73, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76,
	0x30, 0x2e, 0x41, 0x69, 0x72, 0x62, 0x61, 0x73, 0x65, 0x52, 0x05, 0x70, 0x6c, 0x61, 0x63, 0x65,
	0x1a, 0x4e, 0x0a, 0x14, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x45, 0x6e, 0x74, 0x65, 0x72, 0x55,
	0x6e, 0x69, 0x74, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x36, 0x0a, 0x09, 0x69, 0x6e, 0x69, 0x74,
	0x69, 0x61, 0x74, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x64, 0x63,
	0x73, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x30, 0x2e, 0x49, 0x6e, 0x69, 0x74,
	0x69, 0x61, 0x74, 0x6f, 0x72, 0x52, 0x09, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x61, 0x74, 0x6f, 0x72,
	0x1a, 0x4e, 0x0a, 0x14, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x4c, 0x65, 0x61, 0x76, 0x65, 0x55,
	0x6e, 0x69, 0x74, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x36, 0x0a, 0x09, 0x69, 0x6e, 0x69, 0x74,
	0x69, 0x61, 0x74, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x64, 0x63,
	0x73, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x30, 0x2e, 0x49, 0x6e, 0x69, 0x74,
	0x69, 0x61, 0x74, 0x6f, 0x72, 0x52, 0x09, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x61, 0x74, 0x6f, 0x72,
	0x1a, 0x6d, 0x0a, 0x12, 0x53, 0x68, 0x6f, 0x6f, 0x74, 0x69, 0x6e, 0x67, 0x53, 0x74, 0x61, 0x72,
	0x74, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x36, 0x0a, 0x09, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x61,
	0x74, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x64, 0x63, 0x73, 0x2e,
	0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x30, 0x2e, 0x49, 0x6e, 0x69, 0x74, 0x69, 0x61,
	0x74, 0x6f, 0x72, 0x52, 0x09, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x61, 0x74, 0x6f, 0x72, 0x12, 0x1f,
	0x0a, 0x0b, 0x77, 0x65, 0x61, 0x70, 0x6f, 0x6e, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0a, 0x77, 0x65, 0x61, 0x70, 0x6f, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x1a,
	0x6b, 0x0a, 0x10, 0x53, 0x68, 0x6f, 0x6f, 0x74, 0x69, 0x6e, 0x67, 0x45, 0x6e, 0x64, 0x45, 0x76,
	0x65, 0x6e, 0x74, 0x12, 0x36, 0x0a, 0x09, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x61, 0x74, 0x6f, 0x72,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x64, 0x63, 0x73, 0x2e, 0x63, 0x6f, 0x6d,
	0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x30, 0x2e, 0x49, 0x6e, 0x69, 0x74, 0x69, 0x61, 0x74, 0x6f, 0x72,
	0x52, 0x09, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x61, 0x74, 0x6f, 0x72, 0x12, 0x1f, 0x0a, 0x0b, 0x77,
	0x65, 0x61, 0x70, 0x6f, 0x6e, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0a, 0x77, 0x65, 0x61, 0x70, 0x6f, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x1a, 0x84, 0x02, 0x0a,
	0x0c, 0x4d, 0x61, 0x72, 0x6b, 0x41, 0x64, 0x64, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x36, 0x0a,
	0x09, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x61, 0x74, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x18, 0x2e, 0x64, 0x63, 0x73, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x30,
	0x2e, 0x49, 0x6e, 0x69, 0x74, 0x69, 0x61, 0x74, 0x6f, 0x72, 0x52, 0x09, 0x69, 0x6e, 0x69, 0x74,
	0x69, 0x61, 0x74, 0x6f, 0x72, 0x12, 0x1b, 0x0a, 0x08, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x69,
	0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x48, 0x00, 0x52, 0x07, 0x67, 0x72, 0x6f, 0x75, 0x70,
	0x49, 0x64, 0x12, 0x38, 0x0a, 0x09, 0x63, 0x6f, 0x61, 0x6c, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x18, 0x2e, 0x64, 0x63, 0x73, 0x2e, 0x63, 0x6f, 0x6d, 0x6d,
	0x6f, 0x6e, 0x2e, 0x76, 0x30, 0x2e, 0x43, 0x6f, 0x61, 0x6c, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x48,
	0x00, 0x52, 0x09, 0x63, 0x6f, 0x61, 0x6c, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x0e, 0x0a, 0x02,
	0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x02, 0x69, 0x64, 0x12, 0x33, 0x0a, 0x08,
	0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17,
	0x2e, 0x64, 0x63, 0x73, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x30, 0x2e, 0x50,
	0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x08, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x65, 0x78, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x74, 0x65, 0x78, 0x74, 0x42, 0x0c, 0x0a, 0x0a, 0x76, 0x69, 0x73, 0x69, 0x62, 0x69, 0x6c,
	0x69, 0x74, 0x79, 0x1a, 0x87, 0x02, 0x0a, 0x0f, 0x4d, 0x61, 0x72, 0x6b, 0x43, 0x68, 0x61, 0x6e,
	0x67, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x36, 0x0a, 0x09, 0x69, 0x6e, 0x69, 0x74, 0x69,
	0x61, 0x74, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x64, 0x63, 0x73,
	0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x30, 0x2e, 0x49, 0x6e, 0x69, 0x74, 0x69,
	0x61, 0x74, 0x6f, 0x72, 0x52, 0x09, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x61, 0x74, 0x6f, 0x72, 0x12,
	0x1b, 0x0a, 0x08, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x04, 0x48, 0x00, 0x52, 0x07, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x12, 0x38, 0x0a, 0x09,
	0x63, 0x6f, 0x61, 0x6c, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x18, 0x2e, 0x64, 0x63, 0x73, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x30, 0x2e,
	0x43, 0x6f, 0x61, 0x6c, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x00, 0x52, 0x09, 0x63, 0x6f, 0x61,
	0x6c, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x02, 0x69, 0x64, 0x12, 0x33, 0x0a, 0x08, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x64, 0x63, 0x73, 0x2e, 0x63,
	0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x30, 0x2e, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x52, 0x08, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x12, 0x0a, 0x04, 0x74,
	0x65, 0x78, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x65, 0x78, 0x74, 0x42,
	0x0c, 0x0a, 0x0a, 0x76, 0x69, 0x73, 0x69, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x1a, 0x87, 0x02,
	0x0a, 0x0f, 0x4d, 0x61, 0x72, 0x6b, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x45, 0x76, 0x65, 0x6e,
	0x74, 0x12, 0x36, 0x0a, 0x09, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x61, 0x74, 0x6f, 0x72, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x64, 0x63, 0x73, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f,
	0x6e, 0x2e, 0x76, 0x30, 0x2e, 0x49, 0x6e, 0x69, 0x74, 0x69, 0x61, 0x74, 0x6f, 0x72, 0x52, 0x09,
	0x69, 0x6e, 0x69, 0x74, 0x69, 0x61, 0x74, 0x6f, 0x72, 0x12, 0x1b, 0x0a, 0x08, 0x67, 0x72, 0x6f,
	0x75, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x48, 0x00, 0x52, 0x07, 0x67,
	0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x12, 0x38, 0x0a, 0x09, 0x63, 0x6f, 0x61, 0x6c, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x18, 0x2e, 0x64, 0x63, 0x73, 0x2e,
	0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x30, 0x2e, 0x43, 0x6f, 0x61, 0x6c, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x48, 0x00, 0x52, 0x09, 0x63, 0x6f, 0x61, 0x6c, 0x69, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x02, 0x69, 0x64,
	0x12, 0x33, 0x0a, 0x08, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x17, 0x2e, 0x64, 0x63, 0x73, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e,
	0x76, 0x30, 0x2e, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x08, 0x70, 0x6f, 0x73,
	0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x65, 0x78, 0x74, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x65, 0x78, 0x74, 0x42, 0x0c, 0x0a, 0x0a, 0x76, 0x69, 0x73,
	0x69, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x1a, 0xd7, 0x01, 0x0a, 0x09, 0x4b, 0x69, 0x6c, 0x6c,
	0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x36, 0x0a, 0x09, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x61, 0x74,
	0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x64, 0x63, 0x73, 0x2e, 0x63,
	0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x30, 0x2e, 0x49, 0x6e, 0x69, 0x74, 0x69, 0x61, 0x74,
	0x6f, 0x72, 0x52, 0x09, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x61, 0x74, 0x6f, 0x72, 0x12, 0x2d, 0x0a,
	0x06, 0x77, 0x65, 0x61, 0x70, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e,
	0x64, 0x63, 0x73, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x30, 0x2e, 0x57, 0x65,
	0x61, 0x70, 0x6f, 0x6e, 0x52, 0x06, 0x77, 0x65, 0x61, 0x70, 0x6f, 0x6e, 0x12, 0x2d, 0x0a, 0x06,
	0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x64,
	0x63, 0x73, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x30, 0x2e, 0x54, 0x61, 0x72,
	0x67, 0x65, 0x74, 0x52, 0x06, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x12, 0x24, 0x0a, 0x0b, 0x77,
	0x65, 0x61, 0x70, 0x6f, 0x6e, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09,
	0x48, 0x00, 0x52, 0x0a, 0x77, 0x65, 0x61, 0x70, 0x6f, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x88, 0x01,
	0x01, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x77, 0x65, 0x61, 0x70, 0x6f, 0x6e, 0x5f, 0x6e, 0x61, 0x6d,
	0x65, 0x1a, 0x0c, 0x0a, 0x0a, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x1a,
	0x47, 0x0a, 0x0d, 0x55, 0x6e, 0x69, 0x74, 0x4c, 0x6f, 0x73, 0x74, 0x45, 0x76, 0x65, 0x6e, 0x74,
	0x12, 0x36, 0x0a, 0x09, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x61, 0x74, 0x6f, 0x72, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x64, 0x63, 0x73, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e,
	0x2e, 0x76, 0x30, 0x2e, 0x49, 0x6e, 0x69, 0x74, 0x69, 0x61, 0x74, 0x6f, 0x72, 0x52, 0x09, 0x69,
	0x6e, 0x69, 0x74, 0x69, 0x61, 0x74, 0x6f, 0x72, 0x1a, 0x82, 0x01, 0x0a, 0x19, 0x4c, 0x61, 0x6e,
	0x64, 0x69, 0x6e, 0x67, 0x41, 0x66, 0x74, 0x65, 0x72, 0x45, 0x6a, 0x65, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x36, 0x0a, 0x09, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x61,
	0x74, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x64, 0x63, 0x73, 0x2e,
	0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x30, 0x2e, 0x49, 0x6e, 0x69, 0x74, 0x69, 0x61,
	0x74, 0x6f, 0x72, 0x52, 0x09, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x61, 0x74, 0x6f, 0x72, 0x12, 0x2d,
	0x0a, 0x05, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e,
	0x64, 0x63, 0x73, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x30, 0x2e, 0x50, 0x6f,
	0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x05, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x1a, 0x87, 0x01,
	0x0a, 0x1e, 0x44, 0x69, 0x73, 0x63, 0x61, 0x72, 0x64, 0x43, 0x68, 0x61, 0x69, 0x72, 0x41, 0x66,
	0x74, 0x65, 0x72, 0x45, 0x6a, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x76, 0x65, 0x6e, 0x74,
	0x12, 0x36, 0x0a, 0x09, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x61, 0x74, 0x6f, 0x72, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x64, 0x63, 0x73, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e,
	0x2e, 0x76, 0x30, 0x2e, 0x49, 0x6e, 0x69, 0x74, 0x69, 0x61, 0x74, 0x6f, 0x72, 0x52, 0x09, 0x69,
	0x6e, 0x69, 0x74, 0x69, 0x61, 0x74, 0x6f, 0x72, 0x12, 0x2d, 0x0a, 0x06, 0x74, 0x61, 0x72, 0x67,
	0x65, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x64, 0x63, 0x73, 0x2e, 0x63,
	0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x30, 0x2e, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x52,
	0x06, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x1a, 0x69, 0x0a, 0x0e, 0x57, 0x65, 0x61, 0x70, 0x6f,
	0x6e, 0x41, 0x64, 0x64, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x36, 0x0a, 0x09, 0x69, 0x6e, 0x69,
	0x74, 0x69, 0x61, 0x74, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x64,
	0x63, 0x73, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x30, 0x2e, 0x49, 0x6e, 0x69,
	0x74, 0x69, 0x61, 0x74, 0x6f, 0x72, 0x52, 0x09, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x61, 0x74, 0x6f,
	0x72, 0x12, 0x1f, 0x0a, 0x0b, 0x77, 0x65, 0x61, 0x70, 0x6f, 0x6e, 0x5f, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x77, 0x65, 0x61, 0x70, 0x6f, 0x6e, 0x4e, 0x61,
	0x6d, 0x65, 0x1a, 0x99, 0x01, 0x0a, 0x17, 0x4c, 0x61, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x51, 0x75,
	0x61, 0x6c, 0x69, 0x74, 0x79, 0x4d, 0x61, 0x72, 0x6b, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x36,
	0x0a, 0x09, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x61, 0x74, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x18, 0x2e, 0x64, 0x63, 0x73, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76,
	0x30, 0x2e, 0x49, 0x6e, 0x69, 0x74, 0x69, 0x61, 0x74, 0x6f, 0x72, 0x52, 0x09, 0x69, 0x6e, 0x69,
	0x74, 0x69, 0x61, 0x74, 0x6f, 0x72, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e,
	0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74,
	0x12, 0x2c, 0x0a, 0x05, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x16, 0x2e, 0x64, 0x63, 0x73, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x30, 0x2e,
	0x41, 0x69, 0x72, 0x62, 0x61, 0x73, 0x65, 0x52, 0x05, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x1a, 0x4c,
	0x0a, 0x13, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x53, 0x65, 0x6e, 0x64, 0x43, 0x68, 0x61, 0x74,
	0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x5f,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72,
	0x49, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x1a, 0x85, 0x01, 0x0a,
	0x15, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x53, 0x6c, 0x6f,
	0x74, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72,
	0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x70, 0x6c, 0x61, 0x79, 0x65,
	0x72, 0x49, 0x64, 0x12, 0x36, 0x0a, 0x09, 0x63, 0x6f, 0x61, 0x6c, 0x69, 0x74, 0x69, 0x6f, 0x6e,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x18, 0x2e, 0x64, 0x63, 0x73, 0x2e, 0x63, 0x6f, 0x6d,
	0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x30, 0x2e, 0x43, 0x6f, 0x61, 0x6c, 0x69, 0x74, 0x69, 0x6f, 0x6e,
	0x52, 0x09, 0x63, 0x6f, 0x61, 0x6c, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x17, 0x0a, 0x07, 0x73,
	0x6c, 0x6f, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x6c,
	0x6f, 0x74, 0x49, 0x64, 0x1a, 0x5a, 0x0a, 0x0c, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x45,
	0x76, 0x65, 0x6e, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x61, 0x64, 0x64, 0x72, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x61, 0x64, 0x64, 0x72, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04,
	0x75, 0x63, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x75, 0x63, 0x69, 0x64,
	0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x02, 0x69, 0x64,
	0x1a, 0x70, 0x0a, 0x0f, 0x44, 0x69, 0x73, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x45, 0x76,
	0x65, 0x6e, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x02, 0x69, 0x64, 0x12, 0x4d, 0x0a, 0x06, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x35, 0x2e, 0x64, 0x63, 0x73, 0x2e, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f,
	0x6e, 0x2e, 0x76, 0x30, 0x2e, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x45, 0x76, 0x65, 0x6e, 0x74,
	0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x44, 0x69, 0x73, 0x63, 0x6f, 0x6e,
	0x6e, 0x65, 0x63, 0x74, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x52, 0x06, 0x72, 0x65, 0x61, 0x73,
	0x6f, 0x6e, 0x1a, 0x48, 0x0a, 0x13, 0x4d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6d,
	0x6d, 0x61, 0x6e, 0x64, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x31, 0x0a, 0x07, 0x64, 0x65, 0x74,
	0x61, 0x69, 0x6c, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72,
	0x75, 0x63, 0x74, 0x52, 0x07, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x1a, 0x82, 0x01, 0x0a,
	0x15, 0x43, 0x6f, 0x61, 0x6c, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e,
	0x64, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x36, 0x0a, 0x09, 0x63, 0x6f, 0x61, 0x6c, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x18, 0x2e, 0x64, 0x63, 0x73, 0x2e,
	0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x30, 0x2e, 0x43, 0x6f, 0x61, 0x6c, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x52, 0x09, 0x63, 0x6f, 0x61, 0x6c, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x31,
	0x0a, 0x07, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x17, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x52, 0x07, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c,
	0x73, 0x1a, 0x72, 0x0a, 0x11, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e,
	0x64, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x2a, 0x0a, 0x05, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x64, 0x63, 0x73, 0x2e, 0x63, 0x6f, 0x6d, 0x6d,
	0x6f, 0x6e, 0x2e, 0x76, 0x30, 0x2e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x05, 0x67, 0x72, 0x6f,
	0x75, 0x70, 0x12, 0x31, 0x0a, 0x07, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x52, 0x07, 0x64, 0x65,
	0x74, 0x61, 0x69, 0x6c, 0x73, 0x22, 0x84, 0x04, 0x0a, 0x10, 0x44, 0x69, 0x73, 0x63, 0x6f, 0x6e,
	0x6e, 0x65, 0x63, 0x74, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x12, 0x21, 0x0a, 0x1d, 0x44, 0x49,
	0x53, 0x43, 0x4f, 0x4e, 0x4e, 0x45, 0x43, 0x54, 0x5f, 0x52, 0x45, 0x41, 0x53, 0x4f, 0x4e, 0x5f,
	0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x20, 0x0a,
	0x1c, 0x44, 0x49, 0x53, 0x43, 0x4f, 0x4e, 0x4e, 0x45, 0x43, 0x54, 0x5f, 0x52, 0x45, 0x41, 0x53,
	0x4f, 0x4e, 0x5f, 0x54, 0x48, 0x41, 0x54, 0x53, 0x5f, 0x4f, 0x4b, 0x41, 0x59, 0x10, 0x01, 0x12,
	0x25, 0x0a, 0x21, 0x44, 0x49, 0x53, 0x43, 0x4f, 0x4e, 0x4e, 0x45, 0x43, 0x54, 0x5f, 0x52, 0x45,
	0x41, 0x53, 0x4f, 0x4e, 0x5f, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f, 0x41, 0x44, 0x44,
	0x52, 0x45, 0x53, 0x53, 0x10, 0x02, 0x12, 0x24, 0x0a, 0x20, 0x44, 0x49, 0x53, 0x43, 0x4f, 0x4e,
	0x4e, 0x45, 0x43, 0x54, 0x5f, 0x52, 0x45, 0x41, 0x53, 0x4f, 0x4e, 0x5f, 0x43, 0x4f, 0x4e, 0x4e,
	0x45, 0x43, 0x54, 0x5f, 0x46, 0x41, 0x49, 0x4c, 0x45, 0x44, 0x10, 0x03, 0x12, 0x23, 0x0a, 0x1f,
	0x44, 0x49, 0x53, 0x43, 0x4f, 0x4e, 0x4e, 0x45, 0x43, 0x54, 0x5f, 0x52, 0x45, 0x41, 0x53, 0x4f,
	0x4e, 0x5f, 0x57, 0x52, 0x4f, 0x4e, 0x47, 0x5f, 0x56, 0x45, 0x52, 0x53, 0x49, 0x4f, 0x4e, 0x10,
	0x04, 0x12, 0x24, 0x0a, 0x20, 0x44, 0x49, 0x53, 0x43, 0x4f, 0x4e, 0x4e, 0x45, 0x43, 0x54, 0x5f,
	0x52, 0x45, 0x41, 0x53, 0x4f, 0x4e, 0x5f, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x43, 0x4f, 0x4c, 0x5f,
	0x45, 0x52, 0x52, 0x4f, 0x52, 0x10, 0x05, 0x12, 0x1d, 0x0a, 0x19, 0x44, 0x49, 0x53, 0x43, 0x4f,
	0x4e, 0x4e, 0x45, 0x43, 0x54, 0x5f, 0x52, 0x45, 0x41, 0x53, 0x4f, 0x4e, 0x5f, 0x54, 0x49, 0x4d,
	0x45, 0x4f, 0x55, 0x54, 0x10, 0x06, 0x12, 0x26, 0x0a, 0x22, 0x44, 0x49, 0x53, 0x43, 0x4f, 0x4e,
	0x4e, 0x45, 0x43, 0x54, 0x5f, 0x52, 0x45, 0x41, 0x53, 0x4f, 0x4e, 0x5f, 0x49, 0x4e, 0x56, 0x41,
	0x4c, 0x49, 0x44, 0x5f, 0x50, 0x41, 0x53, 0x53, 0x57, 0x4f, 0x52, 0x44, 0x10, 0x65, 0x12, 0x1c,
	0x0a, 0x18, 0x44, 0x49, 0x53, 0x43, 0x4f, 0x4e, 0x4e, 0x45, 0x43, 0x54, 0x5f, 0x52, 0x45, 0x41,
	0x53, 0x4f, 0x4e, 0x5f, 0x42, 0x41, 0x4e, 0x4e, 0x45, 0x44, 0x10, 0x66, 0x12, 0x22, 0x0a, 0x1e,
	0x44, 0x49, 0x53, 0x43, 0x4f, 0x4e, 0x4e, 0x45, 0x43, 0x54, 0x5f, 0x52, 0x45, 0x41, 0x53, 0x4f,
	0x4e, 0x5f, 0x42, 0x41, 0x44, 0x5f, 0x43, 0x41, 0x4c, 0x4c, 0x53, 0x49, 0x47, 0x4e, 0x10, 0x67,
	0x12, 0x24, 0x0a, 0x20, 0x44, 0x49, 0x53, 0x43, 0x4f, 0x4e, 0x4e, 0x45, 0x43, 0x54, 0x5f, 0x52,
	0x45, 0x41, 0x53, 0x4f, 0x4e, 0x5f, 0x54, 0x41, 0x49, 0x4e, 0x54, 0x45, 0x44, 0x5f, 0x43, 0x4c,
	0x49, 0x45, 0x4e, 0x54, 0x10, 0x68, 0x12, 0x1c, 0x0a, 0x18, 0x44, 0x49, 0x53, 0x43, 0x4f, 0x4e,
	0x4e, 0x45, 0x43, 0x54, 0x5f, 0x52, 0x45, 0x41, 0x53, 0x4f, 0x4e, 0x5f, 0x4b, 0x49, 0x43, 0x4b,
	0x45, 0x44, 0x10, 0x69, 0x12, 0x1d, 0x0a, 0x19, 0x44, 0x49, 0x53, 0x43, 0x4f, 0x4e, 0x4e, 0x45,
	0x43, 0x54, 0x5f, 0x52, 0x45, 0x41, 0x53, 0x4f, 0x4e, 0x5f, 0x52, 0x45, 0x46, 0x55, 0x53, 0x45,
	0x44, 0x10, 0x6a, 0x12, 0x27, 0x0a, 0x23, 0x44, 0x49, 0x53, 0x43, 0x4f, 0x4e, 0x4e, 0x45, 0x43,
	0x54, 0x5f, 0x52, 0x45, 0x41, 0x53, 0x4f, 0x4e, 0x5f, 0x44, 0x45, 0x4e, 0x49, 0x45, 0x44, 0x5f,
	0x54, 0x52, 0x49, 0x41, 0x4c, 0x5f, 0x4f, 0x4e, 0x4c, 0x59, 0x10, 0x6b, 0x42, 0x07, 0x0a, 0x05,
	0x65, 0x76, 0x65, 0x6e, 0x74, 0x22, 0xb4, 0x01, 0x0a, 0x12, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d,
	0x55, 0x6e, 0x69, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x20, 0x0a, 0x09,
	0x70, 0x6f, 0x6c, 0x6c, 0x5f, 0x72, 0x61, 0x74, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x48,
	0x00, 0x52, 0x08, 0x70, 0x6f, 0x6c, 0x6c, 0x52, 0x61, 0x74, 0x65, 0x88, 0x01, 0x01, 0x12, 0x24,
	0x0a, 0x0b, 0x6d, 0x61, 0x78, 0x5f, 0x62, 0x61, 0x63, 0x6b, 0x6f, 0x66, 0x66, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0d, 0x48, 0x01, 0x52, 0x0a, 0x6d, 0x61, 0x78, 0x42, 0x61, 0x63, 0x6b, 0x6f, 0x66,
	0x66, 0x88, 0x01, 0x01, 0x12, 0x38, 0x0a, 0x08, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1c, 0x2e, 0x64, 0x63, 0x73, 0x2e, 0x63, 0x6f, 0x6d,
	0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x30, 0x2e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x43, 0x61, 0x74, 0x65,
	0x67, 0x6f, 0x72, 0x79, 0x52, 0x08, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x42, 0x0c,
	0x0a, 0x0a, 0x5f, 0x70, 0x6f, 0x6c, 0x6c, 0x5f, 0x72, 0x61, 0x74, 0x65, 0x42, 0x0e, 0x0a, 0x0c,
	0x5f, 0x6d, 0x61, 0x78, 0x5f, 0x62, 0x61, 0x63, 0x6b, 0x6f, 0x66, 0x66, 0x22, 0xbe, 0x01, 0x0a,
	0x13, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x55, 0x6e, 0x69, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x29, 0x0a, 0x04, 0x75, 0x6e, 0x69, 0x74, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x13, 0x2e, 0x64, 0x63, 0x73, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e,
	0x76, 0x30, 0x2e, 0x55, 0x6e, 0x69, 0x74, 0x48, 0x00, 0x52, 0x04, 0x75, 0x6e, 0x69, 0x74, 0x12,
	0x42, 0x0a, 0x04, 0x67, 0x6f, 0x6e, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2c, 0x2e,
	0x64, 0x63, 0x73, 0x2e, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x2e, 0x76, 0x30, 0x2e, 0x53,
	0x74, 0x72, 0x65, 0x61, 0x6d, 0x55, 0x6e, 0x69, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x2e, 0x55, 0x6e, 0x69, 0x74, 0x47, 0x6f, 0x6e, 0x65, 0x48, 0x00, 0x52, 0x04, 0x67,
	0x6f, 0x6e, 0x65, 0x1a, 0x2e, 0x0a, 0x08, 0x55, 0x6e, 0x69, 0x74, 0x47, 0x6f, 0x6e, 0x65, 0x12,
	0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x02, 0x69, 0x64, 0x12,
	0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x42, 0x08, 0x0a, 0x06, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x22, 0x1d, 0x0a,
	0x1b, 0x47, 0x65, 0x74, 0x53, 0x63, 0x65, 0x6e, 0x61, 0x72, 0x69, 0x6f, 0x53, 0x74, 0x61, 0x72,
	0x74, 0x54, 0x69, 0x6d, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x3a, 0x0a, 0x1c,
	0x47, 0x65, 0x74, 0x53, 0x63, 0x65, 0x6e, 0x61, 0x72, 0x69, 0x6f, 0x53, 0x74, 0x61, 0x72, 0x74,
	0x54, 0x69, 0x6d, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1a, 0x0a, 0x08,
	0x64, 0x61, 0x74, 0x65, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x64, 0x61, 0x74, 0x65, 0x74, 0x69, 0x6d, 0x65, 0x22, 0x1f, 0x0a, 0x1d, 0x47, 0x65, 0x74, 0x53,
	0x63, 0x65, 0x6e, 0x61, 0x72, 0x69, 0x6f, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x54, 0x69,
	0x6d, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x3c, 0x0a, 0x1e, 0x47, 0x65, 0x74,
	0x53, 0x63, 0x65, 0x6e, 0x61, 0x72, 0x69, 0x6f, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x54,
	0x69, 0x6d, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x64,
	0x61, 0x74, 0x65, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x64,
	0x61, 0x74, 0x65, 0x74, 0x69, 0x6d, 0x65, 0x22, 0x75, 0x0a, 0x18, 0x41, 0x64, 0x64, 0x4d, 0x69,
	0x73, 0x73, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x61, 0x74, 0x68, 0x18,
	0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x04, 0x70, 0x61, 0x74, 0x68, 0x12, 0x31, 0x0a, 0x07, 0x64,
	0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53,
	0x74, 0x72, 0x75, 0x63, 0x74, 0x52, 0x07, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x22, 0x2f,
	0x0a, 0x19, 0x41, 0x64, 0x64, 0x4d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6d, 0x6d,
	0x61, 0x6e, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x70,
	0x61, 0x74, 0x68, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x04, 0x70, 0x61, 0x74, 0x68, 0x22,
	0x49, 0x0a, 0x1f, 0x41, 0x64, 0x64, 0x4d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6d,
	0x6d, 0x61, 0x6e, 0x64, 0x53, 0x75, 0x62, 0x4d, 0x65, 0x6e, 0x75, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x61, 0x74, 0x68, 0x18, 0x02,
	0x20, 0x03, 0x28, 0x09, 0x52, 0x04, 0x70, 0x61, 0x74, 0x68, 0x22, 0x36, 0x0a, 0x20, 0x41, 0x64,
	0x64, 0x4d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x53,
	0x75, 0x62, 0x4d, 0x65, 0x6e, 0x75, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x12,
	0x0a, 0x04, 0x70, 0x61, 0x74, 0x68, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x04, 0x70, 0x61,
	0x74, 0x68, 0x22, 0x35, 0x0a, 0x1f, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x4d, 0x69, 0x73, 0x73,
	0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x49, 0x74, 0x65, 0x6d, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x61, 0x74, 0x68, 0x18, 0x01, 0x20,
	0x03, 0x28, 0x09, 0x52, 0x04, 0x70, 0x61, 0x74, 0x68, 0x22, 0x22, 0x0a, 0x20, 0x52, 0x65, 0x6d,
	0x6f, 0x76, 0x65, 0x4d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e,
	0x64, 0x49, 0x74, 0x65, 0x6d, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0xaf, 0x01,
	0x0a, 0x1a, 0x41, 0x64, 0x64, 0x43, 0x6f, 0x61, 0x6c, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f,
	0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x36, 0x0a, 0x09,
	0x63, 0x6f, 0x61, 0x6c, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x18, 0x2e, 0x64, 0x63, 0x73, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x30, 0x2e,
	0x43, 0x6f, 0x61, 0x6c, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x63, 0x6f, 0x61, 0x6c, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x61, 0x74, 0x68,
	0x18, 0x03, 0x20, 0x03, 0x28, 0x09, 0x52, 0x04, 0x70, 0x61, 0x74, 0x68, 0x12, 0x31, 0x0a, 0x07,
	0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x52, 0x07, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x22,
	0x31, 0x0a, 0x1b, 0x41, 0x64, 0x64, 0x43, 0x6f, 0x61, 0x6c, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x43,
	0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x12,
	0x0a, 0x04, 0x70, 0x61, 0x74, 0x68, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x04, 0x70, 0x61,
	0x74, 0x68, 0x22, 0x83, 0x01, 0x0a, 0x21, 0x41, 0x64, 0x64, 0x43, 0x6f, 0x61, 0x6c, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x53, 0x75, 0x62, 0x4d, 0x65, 0x6e,
	0x75, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x36, 0x0a, 0x09, 0x63, 0x6f, 0x61, 0x6c,
	0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x18, 0x2e, 0x64, 0x63,
	0x73, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x30, 0x2e, 0x43, 0x6f, 0x61, 0x6c,
	0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x63, 0x6f, 0x61, 0x6c, 0x69, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x61, 0x74, 0x68, 0x18, 0x03, 0x20, 0x03,
	0x28, 0x09, 0x52, 0x04, 0x70, 0x61, 0x74, 0x68, 0x22, 0x38, 0x0a, 0x22, 0x41, 0x64, 0x64, 0x43,
	0x6f, 0x61, 0x6c, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x53,
	0x75, 0x62, 0x4d, 0x65, 0x6e, 0x75, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x12,
	0x0a, 0x04, 0x70, 0x61, 0x74, 0x68, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x04, 0x70, 0x61,
	0x74, 0x68, 0x22, 0x6f, 0x0a, 0x21, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x43, 0x6f, 0x61, 0x6c,
	0x69, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x49, 0x74, 0x65, 0x6d,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x36, 0x0a, 0x09, 0x63, 0x6f, 0x61, 0x6c, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x18, 0x2e, 0x64, 0x63, 0x73,
	0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x30, 0x2e, 0x43, 0x6f, 0x61, 0x6c, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x63, 0x6f, 0x61, 0x6c, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x12, 0x0a, 0x04, 0x70, 0x61, 0x74, 0x68, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x04, 0x70,
	0x61, 0x74, 0x68, 0x22, 0x24, 0x0a, 0x22, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x43, 0x6f, 0x61,
	0x6c, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x49, 0x74, 0x65,
	0x6d, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x92, 0x01, 0x0a, 0x16, 0x41, 0x64,
	0x64, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x4e,
	0x61, 0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x61, 0x74, 0x68, 0x18,
	0x03, 0x20, 0x03, 0x28, 0x09, 0x52, 0x04, 0x70, 0x61, 0x74, 0x68, 0x12, 0x31, 0x0a, 0x07, 0x64,
	0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53,
	0x74, 0x72, 0x75, 0x63, 0x74, 0x52, 0x07, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x22, 0x2d,
	0x0a, 0x17, 0x41, 0x64, 0x64, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e,
	0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x61, 0x74,
	0x68, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x04, 0x70, 0x61, 0x74, 0x68, 0x22, 0x66, 0x0a,
	0x1d, 0x41, 0x64, 0x64, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64,
	0x53, 0x75, 0x62, 0x4d, 0x65, 0x6e, 0x75, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1d,
	0x0a, 0x0a, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x09, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x12, 0x0a,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x61, 0x74, 0x68, 0x18, 0x03, 0x20, 0x03, 0x28, 0x09, 0x52,
	0x04, 0x70, 0x61, 0x74, 0x68, 0x22, 0x34, 0x0a, 0x1e, 0x41, 0x64, 0x64, 0x47, 0x72, 0x6f, 0x75,
	0x70, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x53, 0x75, 0x62, 0x4d, 0x65, 0x6e, 0x75, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x61, 0x74, 0x68, 0x18,
	0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x04, 0x70, 0x61, 0x74, 0x68, 0x22, 0x52, 0x0a, 0x1d, 0x52,
	0x65, 0x6d, 0x6f, 0x76, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e,
	0x64, 0x49, 0x74, 0x65, 0x6d, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1d, 0x0a, 0x0a,
	0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x09, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x70,
	0x61, 0x74, 0x68, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x04, 0x70, 0x61, 0x74, 0x68, 0x22,
	0x20, 0x0a, 0x1e, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x43, 0x6f,
	0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x49, 0x74, 0x65, 0x6d, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x32, 0x87, 0x0c, 0x0a, 0x0e, 0x4d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x12, 0x5d, 0x0a, 0x0c, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x45, 0x76,
	0x65, 0x6e, 0x74, 0x73, 0x12, 0x23, 0x2e, 0x64, 0x63, 0x73, 0x2e, 0x6d, 0x69, 0x73, 0x73, 0x69,
	0x6f, 0x6e, 0x2e, 0x76, 0x30, 0x2e, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x45, 0x76, 0x65, 0x6e,
	0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x24, 0x2e, 0x64, 0x63, 0x73, 0x2e,
	0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x2e, 0x76, 0x30, 0x2e, 0x53, 0x74, 0x72, 0x65, 0x61,
	0x6d, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22,
	0x00, 0x30, 0x01, 0x12, 0x5a, 0x0a, 0x0b, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x55, 0x6e, 0x69,
	0x74, 0x73, 0x12, 0x22, 0x2e, 0x64, 0x63, 0x73, 0x2e, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e,
	0x2e, 0x76, 0x30, 0x2e, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x55, 0x6e, 0x69, 0x74, 0x73, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x23, 0x2e, 0x64, 0x63, 0x73, 0x2e, 0x6d, 0x69, 0x73,
	0x73, 0x69, 0x6f, 0x6e, 0x2e, 0x76, 0x30, 0x2e, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x55, 0x6e,
	0x69, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x30, 0x01, 0x12,
	0x73, 0x0a, 0x14, 0x47, 0x65, 0x74, 0x53, 0x63, 0x65, 0x6e, 0x61, 0x72, 0x69, 0x6f, 0x53, 0x74,
	0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x2b, 0x2e, 0x64, 0x63, 0x73, 0x2e, 0x6d, 0x69,
	0x73, 0x73, 0x69, 0x6f, 0x6e, 0x2e, 0x76, 0x30, 0x2e, 0x47, 0x65, 0x74, 0x53, 0x63, 0x65, 0x6e,
	0x61, 0x72, 0x69, 0x6f, 0x53, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x2c, 0x2e, 0x64, 0x63, 0x73, 0x2e, 0x6d, 0x69, 0x73, 0x73, 0x69,
	0x6f, 0x6e, 0x2e, 0x76, 0x30, 0x2e, 0x47, 0x65, 0x74, 0x53, 0x63, 0x65, 0x6e, 0x61, 0x72, 0x69,
	0x6f, 0x53, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x22, 0x00, 0x12, 0x79, 0x0a, 0x16, 0x47, 0x65, 0x74, 0x53, 0x63, 0x65, 0x6e, 0x61,
	0x72, 0x69, 0x6f, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x2d,
	0x2e, 0x64, 0x63, 0x73, 0x2e, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x2e, 0x76, 0x30, 0x2e,
	0x47, 0x65, 0x74, 0x53, 0x63, 0x65, 0x6e, 0x61, 0x72, 0x69, 0x6f, 0x43, 0x75, 0x72, 0x72, 0x65,
	0x6e, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2e, 0x2e,
	0x64, 0x63, 0x73, 0x2e, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x2e, 0x76, 0x30, 0x2e, 0x47,
	0x65, 0x74, 0x53, 0x63, 0x65, 0x6e, 0x61, 0x72, 0x69, 0x6f, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e,
	0x74, 0x54, 0x69, 0x6d, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12,
	0x6a, 0x0a, 0x11, 0x41, 0x64, 0x64, 0x4d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6d,
	0x6d, 0x61, 0x6e, 0x64, 0x12, 0x28, 0x2e, 0x64, 0x63, 0x73, 0x2e, 0x6d, 0x69, 0x73, 0x73, 0x69,
	0x6f, 0x6e, 0x2e, 0x76, 0x30, 0x2e, 0x41, 0x64, 0x64, 0x4d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e,
	0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x29,
	0x2e, 0x64, 0x63, 0x73, 0x2e, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x2e, 0x76, 0x30, 0x2e,
	0x41, 0x64, 0x64, 0x4d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e,
	0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x7f, 0x0a, 0x18, 0x41,
	0x64, 0x64, 0x4d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64,
	0x53, 0x75, 0x62, 0x4d, 0x65, 0x6e, 0x75, 0x12, 0x2f, 0x2e, 0x64, 0x63, 0x73, 0x2e, 0x6d, 0x69,
	0x73, 0x73, 0x69, 0x6f, 0x6e, 0x2e, 0x76, 0x30, 0x2e, 0x41, 0x64, 0x64, 0x4d, 0x69, 0x73, 0x73,
	0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x53, 0x75, 0x62, 0x4d, 0x65, 0x6e,
	0x75, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x30, 0x2e, 0x64, 0x63, 0x73, 0x2e, 0x6d,
	0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x2e, 0x76, 0x30, 0x2e, 0x41, 0x64, 0x64, 0x4d, 0x69, 0x73,
	0x73, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x53, 0x75, 0x62, 0x4d, 0x65,
	0x6e, 0x75, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x7f, 0x0a, 0x18,
	0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x4d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6d,
	0x6d, 0x61, 0x6e, 0x64, 0x49, 0x74, 0x65, 0x6d, 0x12, 0x2f, 0x2e, 0x64, 0x63, 0x73, 0x2e, 0x6d,
	0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x2e, 0x76, 0x30, 0x2e, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65,
	0x4d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x49, 0x74,
	0x65, 0x6d, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x30, 0x2e, 0x64, 0x63, 0x73, 0x2e,
	0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x2e, 0x76, 0x30, 0x2e, 0x52, 0x65, 0x6d, 0x6f, 0x76,
	0x65, 0x4d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x49,
	0x74, 0x65, 0x6d, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x70, 0x0a,
	0x13, 0x41, 0x64, 0x64, 0x43, 0x6f, 0x61, 0x6c, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6d,
	0x6d, 0x61, 0x6e, 0x64, 0x12, 0x2a, 0x2e, 0x64, 0x63, 0x73, 0x2e, 0x6d, 0x69, 0x73, 0x73, 0x69,
	0x6f, 0x6e, 0x2e, 0x76, 0x30, 0x2e, 0x41, 0x64, 0x64, 0x43, 0x6f, 0x61, 0x6c, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x2b, 0x2e, 0x64, 0x63, 0x73, 0x2e, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x2e, 0x76,
	0x30, 0x2e, 0x41, 0x64, 0x64, 0x43, 0x6f, 0x61, 0x6c, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f,
	0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12,
	0x85, 0x01, 0x0a, 0x1a, 0x41, 0x64, 0x64, 0x43, 0x6f, 0x61, 0x6c, 0x69, 0x74, 0x69, 0x6f, 0x6e,
	0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x53, 0x75, 0x62, 0x4d, 0x65, 0x6e, 0x75, 0x12, 0x31,
	0x2e, 0x64, 0x63, 0x73, 0x2e, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x2e, 0x76, 0x30, 0x2e,
	0x41, 0x64, 0x64, 0x43, 0x6f, 0x61, 0x6c, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6d, 0x6d,
	0x61, 0x6e, 0x64, 0x53, 0x75, 0x62, 0x4d, 0x65, 0x6e, 0x75, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x32, 0x2e, 0x64, 0x63, 0x73, 0x2e, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x2e,
	0x76, 0x30, 0x2e, 0x41, 0x64, 0x64, 0x43, 0x6f, 0x61, 0x6c, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x43,
	0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x53, 0x75, 0x62, 0x4d, 0x65, 0x6e, 0x75, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x85, 0x01, 0x0a, 0x1a, 0x52, 0x65, 0x6d, 0x6f,
	0x76, 0x65, 0x43, 0x6f, 0x61, 0x6c, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6d, 0x6d, 0x61,
	0x6e, 0x64, 0x49, 0x74, 0x65, 0x6d, 0x12, 0x31, 0x2e, 0x64, 0x63, 0x73, 0x2e, 0x6d, 0x69, 0x73,
	0x73, 0x69, 0x6f, 0x6e, 0x2e, 0x76, 0x30, 0x2e, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x43, 0x6f,
	0x61, 0x6c, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x49, 0x74,
	0x65, 0x6d, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x32, 0x2e, 0x64, 0x63, 0x73, 0x2e,
	0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x2e, 0x76, 0x30, 0x2e, 0x52, 0x65, 0x6d, 0x6f, 0x76,
	0x65, 0x43, 0x6f, 0x61, 0x6c, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e,
	0x64, 0x49, 0x74, 0x65, 0x6d, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12,
	0x64, 0x0a, 0x0f, 0x41, 0x64, 0x64, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x43, 0x6f, 0x6d, 0x6d, 0x61,
	0x6e, 0x64, 0x12, 0x26, 0x2e, 0x64, 0x63, 0x73, 0x2e, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e,
	0x2e, 0x76, 0x30, 0x2e, 0x41, 0x64, 0x64, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x43, 0x6f, 0x6d, 0x6d,
	0x61, 0x6e, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x27, 0x2e, 0x64, 0x63, 0x73,
	0x2e, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x2e, 0x76, 0x30, 0x2e, 0x41, 0x64, 0x64, 0x47,
	0x72, 0x6f, 0x75, 0x70, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x79, 0x0a, 0x16, 0x41, 0x64, 0x64, 0x47, 0x72, 0x6f, 0x75,
	0x70, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x53, 0x75, 0x62, 0x4d, 0x65, 0x6e, 0x75, 0x12,
	0x2d, 0x2e, 0x64, 0x63, 0x73, 0x2e, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x2e, 0x76, 0x30,
	0x2e, 0x41, 0x64, 0x64, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64,
	0x53, 0x75, 0x62, 0x4d, 0x65, 0x6e, 0x75, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2e,
	0x2e, 0x64, 0x63, 0x73, 0x2e, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x2e, 0x76, 0x30, 0x2e,
	0x41, 0x64, 0x64, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x53,
	0x75, 0x62, 0x4d, 0x65, 0x6e, 0x75, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00,
	0x12, 0x79, 0x0a, 0x16, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x43,
	0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x49, 0x74, 0x65, 0x6d, 0x12, 0x2d, 0x2e, 0x64, 0x63, 0x73,
	0x2e, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x2e, 0x76, 0x30, 0x2e, 0x52, 0x65, 0x6d, 0x6f,
	0x76, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x49, 0x74,
	0x65, 0x6d, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2e, 0x2e, 0x64, 0x63, 0x73, 0x2e,
	0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x2e, 0x76, 0x30, 0x2e, 0x52, 0x65, 0x6d, 0x6f, 0x76,
	0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x49, 0x74, 0x65,
	0x6d, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x42, 0x53, 0x5a, 0x2e, 0x67,
	0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x44, 0x43, 0x53, 0x2d, 0x67, 0x52,
	0x50, 0x43, 0x2f, 0x67, 0x6f, 0x2d, 0x62, 0x69, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x73, 0x2f, 0x64,
	0x63, 0x73, 0x2f, 0x76, 0x30, 0x2f, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0xaa, 0x02, 0x20,
	0x52, 0x75, 0x72, 0x6f, 0x75, 0x6e, 0x69, 0x4a, 0x6f, 0x6e, 0x65, 0x73, 0x2e, 0x44, 0x63, 0x73,
	0x2e, 0x47, 0x72, 0x70, 0x63, 0x2e, 0x56, 0x30, 0x2e, 0x4d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e,
	0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_dcs_mission_v0_mission_proto_rawDescOnce sync.Once
	file_dcs_mission_v0_mission_proto_rawDescData = file_dcs_mission_v0_mission_proto_rawDesc
)

func file_dcs_mission_v0_mission_proto_rawDescGZIP() []byte {
	file_dcs_mission_v0_mission_proto_rawDescOnce.Do(func() {
		file_dcs_mission_v0_mission_proto_rawDescData = protoimpl.X.CompressGZIP(file_dcs_mission_v0_mission_proto_rawDescData)
	})
	return file_dcs_mission_v0_mission_proto_rawDescData
}

var file_dcs_mission_v0_mission_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_dcs_mission_v0_mission_proto_msgTypes = make([]protoimpl.MessageInfo, 66)
var file_dcs_mission_v0_mission_proto_goTypes = []interface{}{
	(StreamEventsResponse_DisconnectReason)(0),                  // 0: dcs.mission.v0.StreamEventsResponse.DisconnectReason
	(*StreamEventsRequest)(nil),                                 // 1: dcs.mission.v0.StreamEventsRequest
	(*StreamEventsResponse)(nil),                                // 2: dcs.mission.v0.StreamEventsResponse
	(*StreamUnitsRequest)(nil),                                  // 3: dcs.mission.v0.StreamUnitsRequest
	(*StreamUnitsResponse)(nil),                                 // 4: dcs.mission.v0.StreamUnitsResponse
	(*GetScenarioStartTimeRequest)(nil),                         // 5: dcs.mission.v0.GetScenarioStartTimeRequest
	(*GetScenarioStartTimeResponse)(nil),                        // 6: dcs.mission.v0.GetScenarioStartTimeResponse
	(*GetScenarioCurrentTimeRequest)(nil),                       // 7: dcs.mission.v0.GetScenarioCurrentTimeRequest
	(*GetScenarioCurrentTimeResponse)(nil),                      // 8: dcs.mission.v0.GetScenarioCurrentTimeResponse
	(*AddMissionCommandRequest)(nil),                            // 9: dcs.mission.v0.AddMissionCommandRequest
	(*AddMissionCommandResponse)(nil),                           // 10: dcs.mission.v0.AddMissionCommandResponse
	(*AddMissionCommandSubMenuRequest)(nil),                     // 11: dcs.mission.v0.AddMissionCommandSubMenuRequest
	(*AddMissionCommandSubMenuResponse)(nil),                    // 12: dcs.mission.v0.AddMissionCommandSubMenuResponse
	(*RemoveMissionCommandItemRequest)(nil),                     // 13: dcs.mission.v0.RemoveMissionCommandItemRequest
	(*RemoveMissionCommandItemResponse)(nil),                    // 14: dcs.mission.v0.RemoveMissionCommandItemResponse
	(*AddCoalitionCommandRequest)(nil),                          // 15: dcs.mission.v0.AddCoalitionCommandRequest
	(*AddCoalitionCommandResponse)(nil),                         // 16: dcs.mission.v0.AddCoalitionCommandResponse
	(*AddCoalitionCommandSubMenuRequest)(nil),                   // 17: dcs.mission.v0.AddCoalitionCommandSubMenuRequest
	(*AddCoalitionCommandSubMenuResponse)(nil),                  // 18: dcs.mission.v0.AddCoalitionCommandSubMenuResponse
	(*RemoveCoalitionCommandItemRequest)(nil),                   // 19: dcs.mission.v0.RemoveCoalitionCommandItemRequest
	(*RemoveCoalitionCommandItemResponse)(nil),                  // 20: dcs.mission.v0.RemoveCoalitionCommandItemResponse
	(*AddGroupCommandRequest)(nil),                              // 21: dcs.mission.v0.AddGroupCommandRequest
	(*AddGroupCommandResponse)(nil),                             // 22: dcs.mission.v0.AddGroupCommandResponse
	(*AddGroupCommandSubMenuRequest)(nil),                       // 23: dcs.mission.v0.AddGroupCommandSubMenuRequest
	(*AddGroupCommandSubMenuResponse)(nil),                      // 24: dcs.mission.v0.AddGroupCommandSubMenuResponse
	(*RemoveGroupCommandItemRequest)(nil),                       // 25: dcs.mission.v0.RemoveGroupCommandItemRequest
	(*RemoveGroupCommandItemResponse)(nil),                      // 26: dcs.mission.v0.RemoveGroupCommandItemResponse
	(*StreamEventsResponse_ShotEvent)(nil),                      // 27: dcs.mission.v0.StreamEventsResponse.ShotEvent
	(*StreamEventsResponse_HitEvent)(nil),                       // 28: dcs.mission.v0.StreamEventsResponse.HitEvent
	(*StreamEventsResponse_TakeoffEvent)(nil),                   // 29: dcs.mission.v0.StreamEventsResponse.TakeoffEvent
	(*StreamEventsResponse_LandEvent)(nil),                      // 30: dcs.mission.v0.StreamEventsResponse.LandEvent
	(*StreamEventsResponse_CrashEvent)(nil),                     // 31: dcs.mission.v0.StreamEventsResponse.CrashEvent
	(*StreamEventsResponse_EjectionEvent)(nil),                  // 32: dcs.mission.v0.StreamEventsResponse.EjectionEvent
	(*StreamEventsResponse_RefuelingEvent)(nil),                 // 33: dcs.mission.v0.StreamEventsResponse.RefuelingEvent
	(*StreamEventsResponse_DeadEvent)(nil),                      // 34: dcs.mission.v0.StreamEventsResponse.DeadEvent
	(*StreamEventsResponse_PilotDeadEvent)(nil),                 // 35: dcs.mission.v0.StreamEventsResponse.PilotDeadEvent
	(*StreamEventsResponse_BaseCaptureEvent)(nil),               // 36: dcs.mission.v0.StreamEventsResponse.BaseCaptureEvent
	(*StreamEventsResponse_MissionStartEvent)(nil),              // 37: dcs.mission.v0.StreamEventsResponse.MissionStartEvent
	(*StreamEventsResponse_MissionEndEvent)(nil),                // 38: dcs.mission.v0.StreamEventsResponse.MissionEndEvent
	(*StreamEventsResponse_RefuelingStopEvent)(nil),             // 39: dcs.mission.v0.StreamEventsResponse.RefuelingStopEvent
	(*StreamEventsResponse_BirthEvent)(nil),                     // 40: dcs.mission.v0.StreamEventsResponse.BirthEvent
	(*StreamEventsResponse_HumanFailureEvent)(nil),              // 41: dcs.mission.v0.StreamEventsResponse.HumanFailureEvent
	(*StreamEventsResponse_DetailedFailureEvent)(nil),           // 42: dcs.mission.v0.StreamEventsResponse.DetailedFailureEvent
	(*StreamEventsResponse_EngineStartupEvent)(nil),             // 43: dcs.mission.v0.StreamEventsResponse.EngineStartupEvent
	(*StreamEventsResponse_EngineShutdownEvent)(nil),            // 44: dcs.mission.v0.StreamEventsResponse.EngineShutdownEvent
	(*StreamEventsResponse_PlayerEnterUnitEvent)(nil),           // 45: dcs.mission.v0.StreamEventsResponse.PlayerEnterUnitEvent
	(*StreamEventsResponse_PlayerLeaveUnitEvent)(nil),           // 46: dcs.mission.v0.StreamEventsResponse.PlayerLeaveUnitEvent
	(*StreamEventsResponse_ShootingStartEvent)(nil),             // 47: dcs.mission.v0.StreamEventsResponse.ShootingStartEvent
	(*StreamEventsResponse_ShootingEndEvent)(nil),               // 48: dcs.mission.v0.StreamEventsResponse.ShootingEndEvent
	(*StreamEventsResponse_MarkAddEvent)(nil),                   // 49: dcs.mission.v0.StreamEventsResponse.MarkAddEvent
	(*StreamEventsResponse_MarkChangeEvent)(nil),                // 50: dcs.mission.v0.StreamEventsResponse.MarkChangeEvent
	(*StreamEventsResponse_MarkRemoveEvent)(nil),                // 51: dcs.mission.v0.StreamEventsResponse.MarkRemoveEvent
	(*StreamEventsResponse_KillEvent)(nil),                      // 52: dcs.mission.v0.StreamEventsResponse.KillEvent
	(*StreamEventsResponse_ScoreEvent)(nil),                     // 53: dcs.mission.v0.StreamEventsResponse.ScoreEvent
	(*StreamEventsResponse_UnitLostEvent)(nil),                  // 54: dcs.mission.v0.StreamEventsResponse.UnitLostEvent
	(*StreamEventsResponse_LandingAfterEjectionEvent)(nil),      // 55: dcs.mission.v0.StreamEventsResponse.LandingAfterEjectionEvent
	(*StreamEventsResponse_DiscardChairAfterEjectionEvent)(nil), // 56: dcs.mission.v0.StreamEventsResponse.DiscardChairAfterEjectionEvent
	(*StreamEventsResponse_WeaponAddEvent)(nil),                 // 57: dcs.mission.v0.StreamEventsResponse.WeaponAddEvent
	(*StreamEventsResponse_LandingQualityMarkEvent)(nil),        // 58: dcs.mission.v0.StreamEventsResponse.LandingQualityMarkEvent
	(*StreamEventsResponse_PlayerSendChatEvent)(nil),            // 59: dcs.mission.v0.StreamEventsResponse.PlayerSendChatEvent
	(*StreamEventsResponse_PlayerChangeSlotEvent)(nil),          // 60: dcs.mission.v0.StreamEventsResponse.PlayerChangeSlotEvent
	(*StreamEventsResponse_ConnectEvent)(nil),                   // 61: dcs.mission.v0.StreamEventsResponse.ConnectEvent
	(*StreamEventsResponse_DisconnectEvent)(nil),                // 62: dcs.mission.v0.StreamEventsResponse.DisconnectEvent
	(*StreamEventsResponse_MissionCommandEvent)(nil),            // 63: dcs.mission.v0.StreamEventsResponse.MissionCommandEvent
	(*StreamEventsResponse_CoalitionCommandEvent)(nil),          // 64: dcs.mission.v0.StreamEventsResponse.CoalitionCommandEvent
	(*StreamEventsResponse_GroupCommandEvent)(nil),              // 65: dcs.mission.v0.StreamEventsResponse.GroupCommandEvent
	(*StreamUnitsResponse_UnitGone)(nil),                        // 66: dcs.mission.v0.StreamUnitsResponse.UnitGone
	(common.GroupCategory)(0),                                   // 67: dcs.common.v0.GroupCategory
	(*common.Unit)(nil),                                         // 68: dcs.common.v0.Unit
	(*structpb.Struct)(nil),                                     // 69: google.protobuf.Struct
	(common.Coalition)(0),                                       // 70: dcs.common.v0.Coalition
	(*common.Initiator)(nil),                                    // 71: dcs.common.v0.Initiator
	(*common.Weapon)(nil),                                       // 72: dcs.common.v0.Weapon
	(*common.Target)(nil),                                       // 73: dcs.common.v0.Target
	(*common.Airbase)(nil),                                      // 74: dcs.common.v0.Airbase
	(*common.Position)(nil),                                     // 75: dcs.common.v0.Position
	(*common.Group)(nil),                                        // 76: dcs.common.v0.Group
}
var file_dcs_mission_v0_mission_proto_depIdxs = []int32{
	27,  // 0: dcs.mission.v0.StreamEventsResponse.shot:type_name -> dcs.mission.v0.StreamEventsResponse.ShotEvent
	28,  // 1: dcs.mission.v0.StreamEventsResponse.hit:type_name -> dcs.mission.v0.StreamEventsResponse.HitEvent
	29,  // 2: dcs.mission.v0.StreamEventsResponse.takeoff:type_name -> dcs.mission.v0.StreamEventsResponse.TakeoffEvent
	30,  // 3: dcs.mission.v0.StreamEventsResponse.land:type_name -> dcs.mission.v0.StreamEventsResponse.LandEvent
	31,  // 4: dcs.mission.v0.StreamEventsResponse.crash:type_name -> dcs.mission.v0.StreamEventsResponse.CrashEvent
	32,  // 5: dcs.mission.v0.StreamEventsResponse.ejection:type_name -> dcs.mission.v0.StreamEventsResponse.EjectionEvent
	33,  // 6: dcs.mission.v0.StreamEventsResponse.refueling:type_name -> dcs.mission.v0.StreamEventsResponse.RefuelingEvent
	34,  // 7: dcs.mission.v0.StreamEventsResponse.dead:type_name -> dcs.mission.v0.StreamEventsResponse.DeadEvent
	35,  // 8: dcs.mission.v0.StreamEventsResponse.pilot_dead:type_name -> dcs.mission.v0.StreamEventsResponse.PilotDeadEvent
	36,  // 9: dcs.mission.v0.StreamEventsResponse.base_capture:type_name -> dcs.mission.v0.StreamEventsResponse.BaseCaptureEvent
	37,  // 10: dcs.mission.v0.StreamEventsResponse.mission_start:type_name -> dcs.mission.v0.StreamEventsResponse.MissionStartEvent
	38,  // 11: dcs.mission.v0.StreamEventsResponse.mission_end:type_name -> dcs.mission.v0.StreamEventsResponse.MissionEndEvent
	39,  // 12: dcs.mission.v0.StreamEventsResponse.refueling_stop:type_name -> dcs.mission.v0.StreamEventsResponse.RefuelingStopEvent
	40,  // 13: dcs.mission.v0.StreamEventsResponse.birth:type_name -> dcs.mission.v0.StreamEventsResponse.BirthEvent
	41,  // 14: dcs.mission.v0.StreamEventsResponse.human_failure:type_name -> dcs.mission.v0.StreamEventsResponse.HumanFailureEvent
	42,  // 15: dcs.mission.v0.StreamEventsResponse.detailed_failure:type_name -> dcs.mission.v0.StreamEventsResponse.DetailedFailureEvent
	43,  // 16: dcs.mission.v0.StreamEventsResponse.engine_startup:type_name -> dcs.mission.v0.StreamEventsResponse.EngineStartupEvent
	44,  // 17: dcs.mission.v0.StreamEventsResponse.engine_shutdown:type_name -> dcs.mission.v0.StreamEventsResponse.EngineShutdownEvent
	45,  // 18: dcs.mission.v0.StreamEventsResponse.player_enter_unit:type_name -> dcs.mission.v0.StreamEventsResponse.PlayerEnterUnitEvent
	46,  // 19: dcs.mission.v0.StreamEventsResponse.player_leave_unit:type_name -> dcs.mission.v0.StreamEventsResponse.PlayerLeaveUnitEvent
	47,  // 20: dcs.mission.v0.StreamEventsResponse.shooting_start:type_name -> dcs.mission.v0.StreamEventsResponse.ShootingStartEvent
	48,  // 21: dcs.mission.v0.StreamEventsResponse.shooting_end:type_name -> dcs.mission.v0.StreamEventsResponse.ShootingEndEvent
	49,  // 22: dcs.mission.v0.StreamEventsResponse.mark_add:type_name -> dcs.mission.v0.StreamEventsResponse.MarkAddEvent
	50,  // 23: dcs.mission.v0.StreamEventsResponse.mark_change:type_name -> dcs.mission.v0.StreamEventsResponse.MarkChangeEvent
	51,  // 24: dcs.mission.v0.StreamEventsResponse.mark_remove:type_name -> dcs.mission.v0.StreamEventsResponse.MarkRemoveEvent
	52,  // 25: dcs.mission.v0.StreamEventsResponse.kill:type_name -> dcs.mission.v0.StreamEventsResponse.KillEvent
	53,  // 26: dcs.mission.v0.StreamEventsResponse.score:type_name -> dcs.mission.v0.StreamEventsResponse.ScoreEvent
	54,  // 27: dcs.mission.v0.StreamEventsResponse.unit_lost:type_name -> dcs.mission.v0.StreamEventsResponse.UnitLostEvent
	55,  // 28: dcs.mission.v0.StreamEventsResponse.landing_after_ejection:type_name -> dcs.mission.v0.StreamEventsResponse.LandingAfterEjectionEvent
	56,  // 29: dcs.mission.v0.StreamEventsResponse.discard_chair_after_ejection:type_name -> dcs.mission.v0.StreamEventsResponse.DiscardChairAfterEjectionEvent
	57,  // 30: dcs.mission.v0.StreamEventsResponse.weapon_add:type_name -> dcs.mission.v0.StreamEventsResponse.WeaponAddEvent
	58,  // 31: dcs.mission.v0.StreamEventsResponse.landing_quality_mark:type_name -> dcs.mission.v0.StreamEventsResponse.LandingQualityMarkEvent
	61,  // 32: dcs.mission.v0.StreamEventsResponse.connect:type_name -> dcs.mission.v0.StreamEventsResponse.ConnectEvent
	62,  // 33: dcs.mission.v0.StreamEventsResponse.disconnect:type_name -> dcs.mission.v0.StreamEventsResponse.DisconnectEvent
	59,  // 34: dcs.mission.v0.StreamEventsResponse.player_send_chat:type_name -> dcs.mission.v0.StreamEventsResponse.PlayerSendChatEvent
	60,  // 35: dcs.mission.v0.StreamEventsResponse.player_change_slot:type_name -> dcs.mission.v0.StreamEventsResponse.PlayerChangeSlotEvent
	63,  // 36: dcs.mission.v0.StreamEventsResponse.mission_command:type_name -> dcs.mission.v0.StreamEventsResponse.MissionCommandEvent
	64,  // 37: dcs.mission.v0.StreamEventsResponse.coalition_command:type_name -> dcs.mission.v0.StreamEventsResponse.CoalitionCommandEvent
	65,  // 38: dcs.mission.v0.StreamEventsResponse.group_command:type_name -> dcs.mission.v0.StreamEventsResponse.GroupCommandEvent
	67,  // 39: dcs.mission.v0.StreamUnitsRequest.category:type_name -> dcs.common.v0.GroupCategory
	68,  // 40: dcs.mission.v0.StreamUnitsResponse.unit:type_name -> dcs.common.v0.Unit
	66,  // 41: dcs.mission.v0.StreamUnitsResponse.gone:type_name -> dcs.mission.v0.StreamUnitsResponse.UnitGone
	69,  // 42: dcs.mission.v0.AddMissionCommandRequest.details:type_name -> google.protobuf.Struct
	70,  // 43: dcs.mission.v0.AddCoalitionCommandRequest.coalition:type_name -> dcs.common.v0.Coalition
	69,  // 44: dcs.mission.v0.AddCoalitionCommandRequest.details:type_name -> google.protobuf.Struct
	70,  // 45: dcs.mission.v0.AddCoalitionCommandSubMenuRequest.coalition:type_name -> dcs.common.v0.Coalition
	70,  // 46: dcs.mission.v0.RemoveCoalitionCommandItemRequest.coalition:type_name -> dcs.common.v0.Coalition
	69,  // 47: dcs.mission.v0.AddGroupCommandRequest.details:type_name -> google.protobuf.Struct
	71,  // 48: dcs.mission.v0.StreamEventsResponse.ShotEvent.initiator:type_name -> dcs.common.v0.Initiator
	72,  // 49: dcs.mission.v0.StreamEventsResponse.ShotEvent.weapon:type_name -> dcs.common.v0.Weapon
	71,  // 50: dcs.mission.v0.StreamEventsResponse.HitEvent.initiator:type_name -> dcs.common.v0.Initiator
	72,  // 51: dcs.mission.v0.StreamEventsResponse.HitEvent.weapon:type_name -> dcs.common.v0.Weapon
	73,  // 52: dcs.mission.v0.StreamEventsResponse.HitEvent.target:type_name -> dcs.common.v0.Target
	71,  // 53: dcs.mission.v0.StreamEventsResponse.TakeoffEvent.initiator:type_name -> dcs.common.v0.Initiator
	74,  // 54: dcs.mission.v0.StreamEventsResponse.TakeoffEvent.place:type_name -> dcs.common.v0.Airbase
	71,  // 55: dcs.mission.v0.StreamEventsResponse.LandEvent.initiator:type_name -> dcs.common.v0.Initiator
	74,  // 56: dcs.mission.v0.StreamEventsResponse.LandEvent.place:type_name -> dcs.common.v0.Airbase
	71,  // 57: dcs.mission.v0.StreamEventsResponse.CrashEvent.initiator:type_name -> dcs.common.v0.Initiator
	71,  // 58: dcs.mission.v0.StreamEventsResponse.EjectionEvent.initiator:type_name -> dcs.common.v0.Initiator
	73,  // 59: dcs.mission.v0.StreamEventsResponse.EjectionEvent.target:type_name -> dcs.common.v0.Target
	71,  // 60: dcs.mission.v0.StreamEventsResponse.RefuelingEvent.initiator:type_name -> dcs.common.v0.Initiator
	71,  // 61: dcs.mission.v0.StreamEventsResponse.DeadEvent.initiator:type_name -> dcs.common.v0.Initiator
	71,  // 62: dcs.mission.v0.StreamEventsResponse.PilotDeadEvent.initiator:type_name -> dcs.common.v0.Initiator
	71,  // 63: dcs.mission.v0.StreamEventsResponse.BaseCaptureEvent.initiator:type_name -> dcs.common.v0.Initiator
	74,  // 64: dcs.mission.v0.StreamEventsResponse.BaseCaptureEvent.place:type_name -> dcs.common.v0.Airbase
	71,  // 65: dcs.mission.v0.StreamEventsResponse.RefuelingStopEvent.initiator:type_name -> dcs.common.v0.Initiator
	71,  // 66: dcs.mission.v0.StreamEventsResponse.BirthEvent.initiator:type_name -> dcs.common.v0.Initiator
	74,  // 67: dcs.mission.v0.StreamEventsResponse.BirthEvent.place:type_name -> dcs.common.v0.Airbase
	71,  // 68: dcs.mission.v0.StreamEventsResponse.HumanFailureEvent.initiator:type_name -> dcs.common.v0.Initiator
	73,  // 69: dcs.mission.v0.StreamEventsResponse.DetailedFailureEvent.target:type_name -> dcs.common.v0.Target
	71,  // 70: dcs.mission.v0.StreamEventsResponse.EngineStartupEvent.initiator:type_name -> dcs.common.v0.Initiator
	74,  // 71: dcs.mission.v0.StreamEventsResponse.EngineStartupEvent.place:type_name -> dcs.common.v0.Airbase
	71,  // 72: dcs.mission.v0.StreamEventsResponse.EngineShutdownEvent.initiator:type_name -> dcs.common.v0.Initiator
	74,  // 73: dcs.mission.v0.StreamEventsResponse.EngineShutdownEvent.place:type_name -> dcs.common.v0.Airbase
	71,  // 74: dcs.mission.v0.StreamEventsResponse.PlayerEnterUnitEvent.initiator:type_name -> dcs.common.v0.Initiator
	71,  // 75: dcs.mission.v0.StreamEventsResponse.PlayerLeaveUnitEvent.initiator:type_name -> dcs.common.v0.Initiator
	71,  // 76: dcs.mission.v0.StreamEventsResponse.ShootingStartEvent.initiator:type_name -> dcs.common.v0.Initiator
	71,  // 77: dcs.mission.v0.StreamEventsResponse.ShootingEndEvent.initiator:type_name -> dcs.common.v0.Initiator
	71,  // 78: dcs.mission.v0.StreamEventsResponse.MarkAddEvent.initiator:type_name -> dcs.common.v0.Initiator
	70,  // 79: dcs.mission.v0.StreamEventsResponse.MarkAddEvent.coalition:type_name -> dcs.common.v0.Coalition
	75,  // 80: dcs.mission.v0.StreamEventsResponse.MarkAddEvent.position:type_name -> dcs.common.v0.Position
	71,  // 81: dcs.mission.v0.StreamEventsResponse.MarkChangeEvent.initiator:type_name -> dcs.common.v0.Initiator
	70,  // 82: dcs.mission.v0.StreamEventsResponse.MarkChangeEvent.coalition:type_name -> dcs.common.v0.Coalition
	75,  // 83: dcs.mission.v0.StreamEventsResponse.MarkChangeEvent.position:type_name -> dcs.common.v0.Position
	71,  // 84: dcs.mission.v0.StreamEventsResponse.MarkRemoveEvent.initiator:type_name -> dcs.common.v0.Initiator
	70,  // 85: dcs.mission.v0.StreamEventsResponse.MarkRemoveEvent.coalition:type_name -> dcs.common.v0.Coalition
	75,  // 86: dcs.mission.v0.StreamEventsResponse.MarkRemoveEvent.position:type_name -> dcs.common.v0.Position
	71,  // 87: dcs.mission.v0.StreamEventsResponse.KillEvent.initiator:type_name -> dcs.common.v0.Initiator
	72,  // 88: dcs.mission.v0.StreamEventsResponse.KillEvent.weapon:type_name -> dcs.common.v0.Weapon
	73,  // 89: dcs.mission.v0.StreamEventsResponse.KillEvent.target:type_name -> dcs.common.v0.Target
	71,  // 90: dcs.mission.v0.StreamEventsResponse.UnitLostEvent.initiator:type_name -> dcs.common.v0.Initiator
	71,  // 91: dcs.mission.v0.StreamEventsResponse.LandingAfterEjectionEvent.initiator:type_name -> dcs.common.v0.Initiator
	75,  // 92: dcs.mission.v0.StreamEventsResponse.LandingAfterEjectionEvent.place:type_name -> dcs.common.v0.Position
	71,  // 93: dcs.mission.v0.StreamEventsResponse.DiscardChairAfterEjectionEvent.initiator:type_name -> dcs.common.v0.Initiator
	73,  // 94: dcs.mission.v0.StreamEventsResponse.DiscardChairAfterEjectionEvent.target:type_name -> dcs.common.v0.Target
	71,  // 95: dcs.mission.v0.StreamEventsResponse.WeaponAddEvent.initiator:type_name -> dcs.common.v0.Initiator
	71,  // 96: dcs.mission.v0.StreamEventsResponse.LandingQualityMarkEvent.initiator:type_name -> dcs.common.v0.Initiator
	74,  // 97: dcs.mission.v0.StreamEventsResponse.LandingQualityMarkEvent.place:type_name -> dcs.common.v0.Airbase
	70,  // 98: dcs.mission.v0.StreamEventsResponse.PlayerChangeSlotEvent.coalition:type_name -> dcs.common.v0.Coalition
	0,   // 99: dcs.mission.v0.StreamEventsResponse.DisconnectEvent.reason:type_name -> dcs.mission.v0.StreamEventsResponse.DisconnectReason
	69,  // 100: dcs.mission.v0.StreamEventsResponse.MissionCommandEvent.details:type_name -> google.protobuf.Struct
	70,  // 101: dcs.mission.v0.StreamEventsResponse.CoalitionCommandEvent.coalition:type_name -> dcs.common.v0.Coalition
	69,  // 102: dcs.mission.v0.StreamEventsResponse.CoalitionCommandEvent.details:type_name -> google.protobuf.Struct
	76,  // 103: dcs.mission.v0.StreamEventsResponse.GroupCommandEvent.group:type_name -> dcs.common.v0.Group
	69,  // 104: dcs.mission.v0.StreamEventsResponse.GroupCommandEvent.details:type_name -> google.protobuf.Struct
	1,   // 105: dcs.mission.v0.MissionService.StreamEvents:input_type -> dcs.mission.v0.StreamEventsRequest
	3,   // 106: dcs.mission.v0.MissionService.StreamUnits:input_type -> dcs.mission.v0.StreamUnitsRequest
	5,   // 107: dcs.mission.v0.MissionService.GetScenarioStartTime:input_type -> dcs.mission.v0.GetScenarioStartTimeRequest
	7,   // 108: dcs.mission.v0.MissionService.GetScenarioCurrentTime:input_type -> dcs.mission.v0.GetScenarioCurrentTimeRequest
	9,   // 109: dcs.mission.v0.MissionService.AddMissionCommand:input_type -> dcs.mission.v0.AddMissionCommandRequest
	11,  // 110: dcs.mission.v0.MissionService.AddMissionCommandSubMenu:input_type -> dcs.mission.v0.AddMissionCommandSubMenuRequest
	13,  // 111: dcs.mission.v0.MissionService.RemoveMissionCommandItem:input_type -> dcs.mission.v0.RemoveMissionCommandItemRequest
	15,  // 112: dcs.mission.v0.MissionService.AddCoalitionCommand:input_type -> dcs.mission.v0.AddCoalitionCommandRequest
	17,  // 113: dcs.mission.v0.MissionService.AddCoalitionCommandSubMenu:input_type -> dcs.mission.v0.AddCoalitionCommandSubMenuRequest
	19,  // 114: dcs.mission.v0.MissionService.RemoveCoalitionCommandItem:input_type -> dcs.mission.v0.RemoveCoalitionCommandItemRequest
	21,  // 115: dcs.mission.v0.MissionService.AddGroupCommand:input_type -> dcs.mission.v0.AddGroupCommandRequest
	23,  // 116: dcs.mission.v0.MissionService.AddGroupCommandSubMenu:input_type -> dcs.mission.v0.AddGroupCommandSubMenuRequest
	25,  // 117: dcs.mission.v0.MissionService.RemoveGroupCommandItem:input_type -> dcs.mission.v0.RemoveGroupCommandItemRequest
	2,   // 118: dcs.mission.v0.MissionService.StreamEvents:output_type -> dcs.mission.v0.StreamEventsResponse
	4,   // 119: dcs.mission.v0.MissionService.StreamUnits:output_type -> dcs.mission.v0.StreamUnitsResponse
	6,   // 120: dcs.mission.v0.MissionService.GetScenarioStartTime:output_type -> dcs.mission.v0.GetScenarioStartTimeResponse
	8,   // 121: dcs.mission.v0.MissionService.GetScenarioCurrentTime:output_type -> dcs.mission.v0.GetScenarioCurrentTimeResponse
	10,  // 122: dcs.mission.v0.MissionService.AddMissionCommand:output_type -> dcs.mission.v0.AddMissionCommandResponse
	12,  // 123: dcs.mission.v0.MissionService.AddMissionCommandSubMenu:output_type -> dcs.mission.v0.AddMissionCommandSubMenuResponse
	14,  // 124: dcs.mission.v0.MissionService.RemoveMissionCommandItem:output_type -> dcs.mission.v0.RemoveMissionCommandItemResponse
	16,  // 125: dcs.mission.v0.MissionService.AddCoalitionCommand:output_type -> dcs.mission.v0.AddCoalitionCommandResponse
	18,  // 126: dcs.mission.v0.MissionService.AddCoalitionCommandSubMenu:output_type -> dcs.mission.v0.AddCoalitionCommandSubMenuResponse
	20,  // 127: dcs.mission.v0.MissionService.RemoveCoalitionCommandItem:output_type -> dcs.mission.v0.RemoveCoalitionCommandItemResponse
	22,  // 128: dcs.mission.v0.MissionService.AddGroupCommand:output_type -> dcs.mission.v0.AddGroupCommandResponse
	24,  // 129: dcs.mission.v0.MissionService.AddGroupCommandSubMenu:output_type -> dcs.mission.v0.AddGroupCommandSubMenuResponse
	26,  // 130: dcs.mission.v0.MissionService.RemoveGroupCommandItem:output_type -> dcs.mission.v0.RemoveGroupCommandItemResponse
	118, // [118:131] is the sub-list for method output_type
	105, // [105:118] is the sub-list for method input_type
	105, // [105:105] is the sub-list for extension type_name
	105, // [105:105] is the sub-list for extension extendee
	0,   // [0:105] is the sub-list for field type_name
}

func init() { file_dcs_mission_v0_mission_proto_init() }
func file_dcs_mission_v0_mission_proto_init() {
	if File_dcs_mission_v0_mission_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_dcs_mission_v0_mission_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StreamEventsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dcs_mission_v0_mission_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StreamEventsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dcs_mission_v0_mission_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StreamUnitsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dcs_mission_v0_mission_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StreamUnitsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dcs_mission_v0_mission_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetScenarioStartTimeRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dcs_mission_v0_mission_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetScenarioStartTimeResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dcs_mission_v0_mission_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetScenarioCurrentTimeRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dcs_mission_v0_mission_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetScenarioCurrentTimeResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dcs_mission_v0_mission_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AddMissionCommandRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dcs_mission_v0_mission_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AddMissionCommandResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dcs_mission_v0_mission_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AddMissionCommandSubMenuRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dcs_mission_v0_mission_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AddMissionCommandSubMenuResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dcs_mission_v0_mission_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RemoveMissionCommandItemRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dcs_mission_v0_mission_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RemoveMissionCommandItemResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dcs_mission_v0_mission_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AddCoalitionCommandRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dcs_mission_v0_mission_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AddCoalitionCommandResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dcs_mission_v0_mission_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AddCoalitionCommandSubMenuRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dcs_mission_v0_mission_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AddCoalitionCommandSubMenuResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dcs_mission_v0_mission_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RemoveCoalitionCommandItemRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dcs_mission_v0_mission_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RemoveCoalitionCommandItemResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dcs_mission_v0_mission_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AddGroupCommandRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dcs_mission_v0_mission_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AddGroupCommandResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dcs_mission_v0_mission_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AddGroupCommandSubMenuRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dcs_mission_v0_mission_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AddGroupCommandSubMenuResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dcs_mission_v0_mission_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RemoveGroupCommandItemRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dcs_mission_v0_mission_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RemoveGroupCommandItemResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dcs_mission_v0_mission_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StreamEventsResponse_ShotEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dcs_mission_v0_mission_proto_msgTypes[27].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StreamEventsResponse_HitEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dcs_mission_v0_mission_proto_msgTypes[28].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StreamEventsResponse_TakeoffEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dcs_mission_v0_mission_proto_msgTypes[29].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StreamEventsResponse_LandEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dcs_mission_v0_mission_proto_msgTypes[30].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StreamEventsResponse_CrashEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dcs_mission_v0_mission_proto_msgTypes[31].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StreamEventsResponse_EjectionEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dcs_mission_v0_mission_proto_msgTypes[32].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StreamEventsResponse_RefuelingEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dcs_mission_v0_mission_proto_msgTypes[33].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StreamEventsResponse_DeadEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dcs_mission_v0_mission_proto_msgTypes[34].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StreamEventsResponse_PilotDeadEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dcs_mission_v0_mission_proto_msgTypes[35].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StreamEventsResponse_BaseCaptureEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dcs_mission_v0_mission_proto_msgTypes[36].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StreamEventsResponse_MissionStartEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dcs_mission_v0_mission_proto_msgTypes[37].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StreamEventsResponse_MissionEndEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dcs_mission_v0_mission_proto_msgTypes[38].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StreamEventsResponse_RefuelingStopEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dcs_mission_v0_mission_proto_msgTypes[39].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StreamEventsResponse_BirthEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dcs_mission_v0_mission_proto_msgTypes[40].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StreamEventsResponse_HumanFailureEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dcs_mission_v0_mission_proto_msgTypes[41].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StreamEventsResponse_DetailedFailureEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dcs_mission_v0_mission_proto_msgTypes[42].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StreamEventsResponse_EngineStartupEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dcs_mission_v0_mission_proto_msgTypes[43].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StreamEventsResponse_EngineShutdownEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dcs_mission_v0_mission_proto_msgTypes[44].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StreamEventsResponse_PlayerEnterUnitEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dcs_mission_v0_mission_proto_msgTypes[45].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StreamEventsResponse_PlayerLeaveUnitEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dcs_mission_v0_mission_proto_msgTypes[46].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StreamEventsResponse_ShootingStartEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dcs_mission_v0_mission_proto_msgTypes[47].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StreamEventsResponse_ShootingEndEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dcs_mission_v0_mission_proto_msgTypes[48].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StreamEventsResponse_MarkAddEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dcs_mission_v0_mission_proto_msgTypes[49].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StreamEventsResponse_MarkChangeEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dcs_mission_v0_mission_proto_msgTypes[50].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StreamEventsResponse_MarkRemoveEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dcs_mission_v0_mission_proto_msgTypes[51].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StreamEventsResponse_KillEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dcs_mission_v0_mission_proto_msgTypes[52].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StreamEventsResponse_ScoreEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dcs_mission_v0_mission_proto_msgTypes[53].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StreamEventsResponse_UnitLostEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dcs_mission_v0_mission_proto_msgTypes[54].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StreamEventsResponse_LandingAfterEjectionEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dcs_mission_v0_mission_proto_msgTypes[55].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StreamEventsResponse_DiscardChairAfterEjectionEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dcs_mission_v0_mission_proto_msgTypes[56].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StreamEventsResponse_WeaponAddEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dcs_mission_v0_mission_proto_msgTypes[57].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StreamEventsResponse_LandingQualityMarkEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dcs_mission_v0_mission_proto_msgTypes[58].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StreamEventsResponse_PlayerSendChatEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dcs_mission_v0_mission_proto_msgTypes[59].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StreamEventsResponse_PlayerChangeSlotEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dcs_mission_v0_mission_proto_msgTypes[60].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StreamEventsResponse_ConnectEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dcs_mission_v0_mission_proto_msgTypes[61].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StreamEventsResponse_DisconnectEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dcs_mission_v0_mission_proto_msgTypes[62].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StreamEventsResponse_MissionCommandEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dcs_mission_v0_mission_proto_msgTypes[63].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StreamEventsResponse_CoalitionCommandEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dcs_mission_v0_mission_proto_msgTypes[64].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StreamEventsResponse_GroupCommandEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dcs_mission_v0_mission_proto_msgTypes[65].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StreamUnitsResponse_UnitGone); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_dcs_mission_v0_mission_proto_msgTypes[1].OneofWrappers = []interface{}{
		(*StreamEventsResponse_Shot)(nil),
		(*StreamEventsResponse_Hit)(nil),
		(*StreamEventsResponse_Takeoff)(nil),
		(*StreamEventsResponse_Land)(nil),
		(*StreamEventsResponse_Crash)(nil),
		(*StreamEventsResponse_Ejection)(nil),
		(*StreamEventsResponse_Refueling)(nil),
		(*StreamEventsResponse_Dead)(nil),
		(*StreamEventsResponse_PilotDead)(nil),
		(*StreamEventsResponse_BaseCapture)(nil),
		(*StreamEventsResponse_MissionStart)(nil),
		(*StreamEventsResponse_MissionEnd)(nil),
		(*StreamEventsResponse_RefuelingStop)(nil),
		(*StreamEventsResponse_Birth)(nil),
		(*StreamEventsResponse_HumanFailure)(nil),
		(*StreamEventsResponse_DetailedFailure)(nil),
		(*StreamEventsResponse_EngineStartup)(nil),
		(*StreamEventsResponse_EngineShutdown)(nil),
		(*StreamEventsResponse_PlayerEnterUnit)(nil),
		(*StreamEventsResponse_PlayerLeaveUnit)(nil),
		(*StreamEventsResponse_ShootingStart)(nil),
		(*StreamEventsResponse_ShootingEnd)(nil),
		(*StreamEventsResponse_MarkAdd)(nil),
		(*StreamEventsResponse_MarkChange)(nil),
		(*StreamEventsResponse_MarkRemove)(nil),
		(*StreamEventsResponse_Kill)(nil),
		(*StreamEventsResponse_Score)(nil),
		(*StreamEventsResponse_UnitLost)(nil),
		(*StreamEventsResponse_LandingAfterEjection)(nil),
		(*StreamEventsResponse_DiscardChairAfterEjection)(nil),
		(*StreamEventsResponse_WeaponAdd)(nil),
		(*StreamEventsResponse_LandingQualityMark)(nil),
		(*StreamEventsResponse_Connect)(nil),
		(*StreamEventsResponse_Disconnect)(nil),
		(*StreamEventsResponse_PlayerSendChat)(nil),
		(*StreamEventsResponse_PlayerChangeSlot)(nil),
		(*StreamEventsResponse_MissionCommand)(nil),
		(*StreamEventsResponse_CoalitionCommand)(nil),
		(*StreamEventsResponse_GroupCommand)(nil),
	}
	file_dcs_mission_v0_mission_proto_msgTypes[2].OneofWrappers = []interface{}{}
	file_dcs_mission_v0_mission_proto_msgTypes[3].OneofWrappers = []interface{}{
		(*StreamUnitsResponse_Unit)(nil),
		(*StreamUnitsResponse_Gone)(nil),
	}
	file_dcs_mission_v0_mission_proto_msgTypes[27].OneofWrappers = []interface{}{}
	file_dcs_mission_v0_mission_proto_msgTypes[39].OneofWrappers = []interface{}{}
	file_dcs_mission_v0_mission_proto_msgTypes[48].OneofWrappers = []interface{}{
		(*StreamEventsResponse_MarkAddEvent_GroupId)(nil),
		(*StreamEventsResponse_MarkAddEvent_Coalition)(nil),
	}
	file_dcs_mission_v0_mission_proto_msgTypes[49].OneofWrappers = []interface{}{
		(*StreamEventsResponse_MarkChangeEvent_GroupId)(nil),
		(*StreamEventsResponse_MarkChangeEvent_Coalition)(nil),
	}
	file_dcs_mission_v0_mission_proto_msgTypes[50].OneofWrappers = []interface{}{
		(*StreamEventsResponse_MarkRemoveEvent_GroupId)(nil),
		(*StreamEventsResponse_MarkRemoveEvent_Coalition)(nil),
	}
	file_dcs_mission_v0_mission_proto_msgTypes[51].OneofWrappers = []interface{}{}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_dcs_mission_v0_mission_proto_rawDesc,
			NumEnums:      1,
			NumMessages:   66,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_dcs_mission_v0_mission_proto_goTypes,
		DependencyIndexes: file_dcs_mission_v0_mission_proto_depIdxs,
		EnumInfos:         file_dcs_mission_v0_mission_proto_enumTypes,
		MessageInfos:      file_dcs_mission_v0_mission_proto_msgTypes,
	}.Build()
	File_dcs_mission_v0_mission_proto = out.File
	file_dcs_mission_v0_mission_proto_rawDesc = nil
	file_dcs_mission_v0_mission_proto_goTypes = nil
	file_dcs_mission_v0_mission_proto_depIdxs = nil
}
