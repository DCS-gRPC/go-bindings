// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package mission

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// MissionServiceClient is the client API for MissionService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type MissionServiceClient interface {
	// Streams DCS game generated Events.
	// See https://wiki.hoggitworld.com/view/Category:Events
	StreamEvents(ctx context.Context, in *StreamEventsRequest, opts ...grpc.CallOption) (MissionService_StreamEventsClient, error)
	// Streams unit updates
	// Provides similar functionality as Tacview but at a much lower update rate
	// so puts less load on the server. Suitable for things like online maps but
	// not as a Tacview replacement.
	StreamUnits(ctx context.Context, in *StreamUnitsRequest, opts ...grpc.CallOption) (MissionService_StreamUnitsClient, error)
	// Returns the mission's in-game starttime as an ISO 8601 formatted datetime
	// string.
	GetScenarioStartTime(ctx context.Context, in *GetScenarioStartTimeRequest, opts ...grpc.CallOption) (*GetScenarioStartTimeResponse, error)
	// Returns the mission's in-game current time as an ISO 8601 formatted
	// datetime string.
	GetScenarioCurrentTime(ctx context.Context, in *GetScenarioCurrentTimeRequest, opts ...grpc.CallOption) (*GetScenarioCurrentTimeResponse, error)
}

type missionServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewMissionServiceClient(cc grpc.ClientConnInterface) MissionServiceClient {
	return &missionServiceClient{cc}
}

func (c *missionServiceClient) StreamEvents(ctx context.Context, in *StreamEventsRequest, opts ...grpc.CallOption) (MissionService_StreamEventsClient, error) {
	stream, err := c.cc.NewStream(ctx, &MissionService_ServiceDesc.Streams[0], "/dcs.mission.v0.MissionService/StreamEvents", opts...)
	if err != nil {
		return nil, err
	}
	x := &missionServiceStreamEventsClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type MissionService_StreamEventsClient interface {
	Recv() (*StreamEventsResponse, error)
	grpc.ClientStream
}

type missionServiceStreamEventsClient struct {
	grpc.ClientStream
}

func (x *missionServiceStreamEventsClient) Recv() (*StreamEventsResponse, error) {
	m := new(StreamEventsResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *missionServiceClient) StreamUnits(ctx context.Context, in *StreamUnitsRequest, opts ...grpc.CallOption) (MissionService_StreamUnitsClient, error) {
	stream, err := c.cc.NewStream(ctx, &MissionService_ServiceDesc.Streams[1], "/dcs.mission.v0.MissionService/StreamUnits", opts...)
	if err != nil {
		return nil, err
	}
	x := &missionServiceStreamUnitsClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type MissionService_StreamUnitsClient interface {
	Recv() (*StreamUnitsResponse, error)
	grpc.ClientStream
}

type missionServiceStreamUnitsClient struct {
	grpc.ClientStream
}

func (x *missionServiceStreamUnitsClient) Recv() (*StreamUnitsResponse, error) {
	m := new(StreamUnitsResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *missionServiceClient) GetScenarioStartTime(ctx context.Context, in *GetScenarioStartTimeRequest, opts ...grpc.CallOption) (*GetScenarioStartTimeResponse, error) {
	out := new(GetScenarioStartTimeResponse)
	err := c.cc.Invoke(ctx, "/dcs.mission.v0.MissionService/GetScenarioStartTime", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *missionServiceClient) GetScenarioCurrentTime(ctx context.Context, in *GetScenarioCurrentTimeRequest, opts ...grpc.CallOption) (*GetScenarioCurrentTimeResponse, error) {
	out := new(GetScenarioCurrentTimeResponse)
	err := c.cc.Invoke(ctx, "/dcs.mission.v0.MissionService/GetScenarioCurrentTime", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MissionServiceServer is the server API for MissionService service.
// All implementations must embed UnimplementedMissionServiceServer
// for forward compatibility
type MissionServiceServer interface {
	// Streams DCS game generated Events.
	// See https://wiki.hoggitworld.com/view/Category:Events
	StreamEvents(*StreamEventsRequest, MissionService_StreamEventsServer) error
	// Streams unit updates
	// Provides similar functionality as Tacview but at a much lower update rate
	// so puts less load on the server. Suitable for things like online maps but
	// not as a Tacview replacement.
	StreamUnits(*StreamUnitsRequest, MissionService_StreamUnitsServer) error
	// Returns the mission's in-game starttime as an ISO 8601 formatted datetime
	// string.
	GetScenarioStartTime(context.Context, *GetScenarioStartTimeRequest) (*GetScenarioStartTimeResponse, error)
	// Returns the mission's in-game current time as an ISO 8601 formatted
	// datetime string.
	GetScenarioCurrentTime(context.Context, *GetScenarioCurrentTimeRequest) (*GetScenarioCurrentTimeResponse, error)
	mustEmbedUnimplementedMissionServiceServer()
}

// UnimplementedMissionServiceServer must be embedded to have forward compatible implementations.
type UnimplementedMissionServiceServer struct {
}

func (UnimplementedMissionServiceServer) StreamEvents(*StreamEventsRequest, MissionService_StreamEventsServer) error {
	return status.Errorf(codes.Unimplemented, "method StreamEvents not implemented")
}
func (UnimplementedMissionServiceServer) StreamUnits(*StreamUnitsRequest, MissionService_StreamUnitsServer) error {
	return status.Errorf(codes.Unimplemented, "method StreamUnits not implemented")
}
func (UnimplementedMissionServiceServer) GetScenarioStartTime(context.Context, *GetScenarioStartTimeRequest) (*GetScenarioStartTimeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetScenarioStartTime not implemented")
}
func (UnimplementedMissionServiceServer) GetScenarioCurrentTime(context.Context, *GetScenarioCurrentTimeRequest) (*GetScenarioCurrentTimeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetScenarioCurrentTime not implemented")
}
func (UnimplementedMissionServiceServer) mustEmbedUnimplementedMissionServiceServer() {}

// UnsafeMissionServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MissionServiceServer will
// result in compilation errors.
type UnsafeMissionServiceServer interface {
	mustEmbedUnimplementedMissionServiceServer()
}

func RegisterMissionServiceServer(s grpc.ServiceRegistrar, srv MissionServiceServer) {
	s.RegisterService(&MissionService_ServiceDesc, srv)
}

func _MissionService_StreamEvents_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(StreamEventsRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(MissionServiceServer).StreamEvents(m, &missionServiceStreamEventsServer{stream})
}

type MissionService_StreamEventsServer interface {
	Send(*StreamEventsResponse) error
	grpc.ServerStream
}

type missionServiceStreamEventsServer struct {
	grpc.ServerStream
}

func (x *missionServiceStreamEventsServer) Send(m *StreamEventsResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _MissionService_StreamUnits_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(StreamUnitsRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(MissionServiceServer).StreamUnits(m, &missionServiceStreamUnitsServer{stream})
}

type MissionService_StreamUnitsServer interface {
	Send(*StreamUnitsResponse) error
	grpc.ServerStream
}

type missionServiceStreamUnitsServer struct {
	grpc.ServerStream
}

func (x *missionServiceStreamUnitsServer) Send(m *StreamUnitsResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _MissionService_GetScenarioStartTime_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetScenarioStartTimeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MissionServiceServer).GetScenarioStartTime(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dcs.mission.v0.MissionService/GetScenarioStartTime",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MissionServiceServer).GetScenarioStartTime(ctx, req.(*GetScenarioStartTimeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MissionService_GetScenarioCurrentTime_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetScenarioCurrentTimeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MissionServiceServer).GetScenarioCurrentTime(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dcs.mission.v0.MissionService/GetScenarioCurrentTime",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MissionServiceServer).GetScenarioCurrentTime(ctx, req.(*GetScenarioCurrentTimeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// MissionService_ServiceDesc is the grpc.ServiceDesc for MissionService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var MissionService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "dcs.mission.v0.MissionService",
	HandlerType: (*MissionServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetScenarioStartTime",
			Handler:    _MissionService_GetScenarioStartTime_Handler,
		},
		{
			MethodName: "GetScenarioCurrentTime",
			Handler:    _MissionService_GetScenarioCurrentTime_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "StreamEvents",
			Handler:       _MissionService_StreamEvents_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "StreamUnits",
			Handler:       _MissionService_StreamUnits_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "dcs/mission/v0/mission.proto",
}
