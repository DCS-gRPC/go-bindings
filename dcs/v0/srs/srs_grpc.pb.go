// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.12
// source: dcs/srs/v0/srs.proto

package srs

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// SrsServiceClient is the client API for SrsService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type SrsServiceClient interface {
	// Synthesize text to speech and transmit it over SRS. By default, this blocks until a
	// transmission completed (unless `async` is set to `true`). This can be used to prevent
	// transmission to overlap each other, by not sending another transmission on the same frequency
	// until you've received the response from the previous transmission on that frequency. However,
	// it does not block or prevent any other client from transmitting over the same frequency at the
	// same time.
	Transmit(ctx context.Context, in *TransmitRequest, opts ...grpc.CallOption) (*TransmitResponse, error)
	// Retrieve a list of units (players) and their active frequencies that are connected to SRS.
	GetClients(ctx context.Context, in *GetClientsRequest, opts ...grpc.CallOption) (*GetClientsResponse, error)
}

type srsServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewSrsServiceClient(cc grpc.ClientConnInterface) SrsServiceClient {
	return &srsServiceClient{cc}
}

func (c *srsServiceClient) Transmit(ctx context.Context, in *TransmitRequest, opts ...grpc.CallOption) (*TransmitResponse, error) {
	out := new(TransmitResponse)
	err := c.cc.Invoke(ctx, "/dcs.srs.v0.SrsService/Transmit", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *srsServiceClient) GetClients(ctx context.Context, in *GetClientsRequest, opts ...grpc.CallOption) (*GetClientsResponse, error) {
	out := new(GetClientsResponse)
	err := c.cc.Invoke(ctx, "/dcs.srs.v0.SrsService/GetClients", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SrsServiceServer is the server API for SrsService service.
// All implementations must embed UnimplementedSrsServiceServer
// for forward compatibility
type SrsServiceServer interface {
	// Synthesize text to speech and transmit it over SRS. By default, this blocks until a
	// transmission completed (unless `async` is set to `true`). This can be used to prevent
	// transmission to overlap each other, by not sending another transmission on the same frequency
	// until you've received the response from the previous transmission on that frequency. However,
	// it does not block or prevent any other client from transmitting over the same frequency at the
	// same time.
	Transmit(context.Context, *TransmitRequest) (*TransmitResponse, error)
	// Retrieve a list of units (players) and their active frequencies that are connected to SRS.
	GetClients(context.Context, *GetClientsRequest) (*GetClientsResponse, error)
	mustEmbedUnimplementedSrsServiceServer()
}

// UnimplementedSrsServiceServer must be embedded to have forward compatible implementations.
type UnimplementedSrsServiceServer struct {
}

func (UnimplementedSrsServiceServer) Transmit(context.Context, *TransmitRequest) (*TransmitResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Transmit not implemented")
}
func (UnimplementedSrsServiceServer) GetClients(context.Context, *GetClientsRequest) (*GetClientsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetClients not implemented")
}
func (UnimplementedSrsServiceServer) mustEmbedUnimplementedSrsServiceServer() {}

// UnsafeSrsServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SrsServiceServer will
// result in compilation errors.
type UnsafeSrsServiceServer interface {
	mustEmbedUnimplementedSrsServiceServer()
}

func RegisterSrsServiceServer(s grpc.ServiceRegistrar, srv SrsServiceServer) {
	s.RegisterService(&SrsService_ServiceDesc, srv)
}

func _SrsService_Transmit_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TransmitRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SrsServiceServer).Transmit(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dcs.srs.v0.SrsService/Transmit",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SrsServiceServer).Transmit(ctx, req.(*TransmitRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SrsService_GetClients_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetClientsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SrsServiceServer).GetClients(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dcs.srs.v0.SrsService/GetClients",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SrsServiceServer).GetClients(ctx, req.(*GetClientsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// SrsService_ServiceDesc is the grpc.ServiceDesc for SrsService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var SrsService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "dcs.srs.v0.SrsService",
	HandlerType: (*SrsServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Transmit",
			Handler:    _SrsService_Transmit_Handler,
		},
		{
			MethodName: "GetClients",
			Handler:    _SrsService_GetClients_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "dcs/srs/v0/srs.proto",
}
