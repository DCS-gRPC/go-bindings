// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.12
// source: dcs/timer/v0/timer.proto

package timer

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// TimerServiceClient is the client API for TimerService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type TimerServiceClient interface {
	// https://wiki.hoggitworld.com/view/DCS_func_getTime
	GetTime(ctx context.Context, in *GetTimeRequest, opts ...grpc.CallOption) (*GetTimeResponse, error)
	// https://wiki.hoggitworld.com/view/DCS_func_getAbsTime
	GetAbsoluteTime(ctx context.Context, in *GetAbsoluteTimeRequest, opts ...grpc.CallOption) (*GetAbsoluteTimeResponse, error)
	// https://wiki.hoggitworld.com/view/DCS_func_getTime0
	GetTimeZero(ctx context.Context, in *GetTimeZeroRequest, opts ...grpc.CallOption) (*GetTimeZeroResponse, error)
}

type timerServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewTimerServiceClient(cc grpc.ClientConnInterface) TimerServiceClient {
	return &timerServiceClient{cc}
}

func (c *timerServiceClient) GetTime(ctx context.Context, in *GetTimeRequest, opts ...grpc.CallOption) (*GetTimeResponse, error) {
	out := new(GetTimeResponse)
	err := c.cc.Invoke(ctx, "/dcs.timer.v0.TimerService/GetTime", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *timerServiceClient) GetAbsoluteTime(ctx context.Context, in *GetAbsoluteTimeRequest, opts ...grpc.CallOption) (*GetAbsoluteTimeResponse, error) {
	out := new(GetAbsoluteTimeResponse)
	err := c.cc.Invoke(ctx, "/dcs.timer.v0.TimerService/GetAbsoluteTime", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *timerServiceClient) GetTimeZero(ctx context.Context, in *GetTimeZeroRequest, opts ...grpc.CallOption) (*GetTimeZeroResponse, error) {
	out := new(GetTimeZeroResponse)
	err := c.cc.Invoke(ctx, "/dcs.timer.v0.TimerService/GetTimeZero", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TimerServiceServer is the server API for TimerService service.
// All implementations must embed UnimplementedTimerServiceServer
// for forward compatibility
type TimerServiceServer interface {
	// https://wiki.hoggitworld.com/view/DCS_func_getTime
	GetTime(context.Context, *GetTimeRequest) (*GetTimeResponse, error)
	// https://wiki.hoggitworld.com/view/DCS_func_getAbsTime
	GetAbsoluteTime(context.Context, *GetAbsoluteTimeRequest) (*GetAbsoluteTimeResponse, error)
	// https://wiki.hoggitworld.com/view/DCS_func_getTime0
	GetTimeZero(context.Context, *GetTimeZeroRequest) (*GetTimeZeroResponse, error)
	mustEmbedUnimplementedTimerServiceServer()
}

// UnimplementedTimerServiceServer must be embedded to have forward compatible implementations.
type UnimplementedTimerServiceServer struct {
}

func (UnimplementedTimerServiceServer) GetTime(context.Context, *GetTimeRequest) (*GetTimeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTime not implemented")
}
func (UnimplementedTimerServiceServer) GetAbsoluteTime(context.Context, *GetAbsoluteTimeRequest) (*GetAbsoluteTimeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAbsoluteTime not implemented")
}
func (UnimplementedTimerServiceServer) GetTimeZero(context.Context, *GetTimeZeroRequest) (*GetTimeZeroResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTimeZero not implemented")
}
func (UnimplementedTimerServiceServer) mustEmbedUnimplementedTimerServiceServer() {}

// UnsafeTimerServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to TimerServiceServer will
// result in compilation errors.
type UnsafeTimerServiceServer interface {
	mustEmbedUnimplementedTimerServiceServer()
}

func RegisterTimerServiceServer(s grpc.ServiceRegistrar, srv TimerServiceServer) {
	s.RegisterService(&TimerService_ServiceDesc, srv)
}

func _TimerService_GetTime_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTimeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TimerServiceServer).GetTime(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dcs.timer.v0.TimerService/GetTime",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TimerServiceServer).GetTime(ctx, req.(*GetTimeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TimerService_GetAbsoluteTime_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAbsoluteTimeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TimerServiceServer).GetAbsoluteTime(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dcs.timer.v0.TimerService/GetAbsoluteTime",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TimerServiceServer).GetAbsoluteTime(ctx, req.(*GetAbsoluteTimeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TimerService_GetTimeZero_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTimeZeroRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TimerServiceServer).GetTimeZero(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dcs.timer.v0.TimerService/GetTimeZero",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TimerServiceServer).GetTimeZero(ctx, req.(*GetTimeZeroRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// TimerService_ServiceDesc is the grpc.ServiceDesc for TimerService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var TimerService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "dcs.timer.v0.TimerService",
	HandlerType: (*TimerServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetTime",
			Handler:    _TimerService_GetTime_Handler,
		},
		{
			MethodName: "GetAbsoluteTime",
			Handler:    _TimerService_GetAbsoluteTime_Handler,
		},
		{
			MethodName: "GetTimeZero",
			Handler:    _TimerService_GetTimeZero_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "dcs/timer/v0/timer.proto",
}
