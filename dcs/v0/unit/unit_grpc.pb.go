// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.12
// source: dcs/unit/v0/unit.proto

package unit

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// UnitServiceClient is the client API for UnitService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type UnitServiceClient interface {
	// https://wiki.hoggitworld.com/view/DCS_func_getRadar
	GetRadar(ctx context.Context, in *GetRadarRequest, opts ...grpc.CallOption) (*GetRadarResponse, error)
	// https://wiki.hoggitworld.com/view/DCS_func_getPoint
	GetPosition(ctx context.Context, in *GetPositionRequest, opts ...grpc.CallOption) (*GetPositionResponse, error)
	// https://wiki.hoggitworld.com/view/DCS_func_getPlayerName
	GetPlayerName(ctx context.Context, in *GetPlayerNameRequest, opts ...grpc.CallOption) (*GetPlayerNameResponse, error)
	GetDescriptor(ctx context.Context, in *GetDescriptorRequest, opts ...grpc.CallOption) (*GetDescriptorResponse, error)
	// https://wiki.hoggitworld.com/view/DCS_func_enableEmission
	SetEmission(ctx context.Context, in *SetEmissionRequest, opts ...grpc.CallOption) (*SetEmissionResponse, error)
	// https://wiki.hoggitworld.com/view/DCS_func_getByName
	Get(ctx context.Context, in *GetRequest, opts ...grpc.CallOption) (*GetResponse, error)
	// *
	// Get information about the unit in 3D space, including its position,
	// orientation and velocity.
	GetTransform(ctx context.Context, in *GetTransformRequest, opts ...grpc.CallOption) (*GetTransformResponse, error)
	// https://wiki.hoggitworld.com/view/DCS_func_destroy
	Destroy(ctx context.Context, in *DestroyRequest, opts ...grpc.CallOption) (*DestroyResponse, error)
	// https://wiki.hoggitworld.com/view/DCS_func_getDrawArgumentValue
	GetDrawArgumentValue(ctx context.Context, in *GetDrawArgumentValueRequest, opts ...grpc.CallOption) (*GetDrawArgumentValueResponse, error)
}

type unitServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewUnitServiceClient(cc grpc.ClientConnInterface) UnitServiceClient {
	return &unitServiceClient{cc}
}

func (c *unitServiceClient) GetRadar(ctx context.Context, in *GetRadarRequest, opts ...grpc.CallOption) (*GetRadarResponse, error) {
	out := new(GetRadarResponse)
	err := c.cc.Invoke(ctx, "/dcs.unit.v0.UnitService/GetRadar", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *unitServiceClient) GetPosition(ctx context.Context, in *GetPositionRequest, opts ...grpc.CallOption) (*GetPositionResponse, error) {
	out := new(GetPositionResponse)
	err := c.cc.Invoke(ctx, "/dcs.unit.v0.UnitService/GetPosition", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *unitServiceClient) GetPlayerName(ctx context.Context, in *GetPlayerNameRequest, opts ...grpc.CallOption) (*GetPlayerNameResponse, error) {
	out := new(GetPlayerNameResponse)
	err := c.cc.Invoke(ctx, "/dcs.unit.v0.UnitService/GetPlayerName", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *unitServiceClient) GetDescriptor(ctx context.Context, in *GetDescriptorRequest, opts ...grpc.CallOption) (*GetDescriptorResponse, error) {
	out := new(GetDescriptorResponse)
	err := c.cc.Invoke(ctx, "/dcs.unit.v0.UnitService/GetDescriptor", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *unitServiceClient) SetEmission(ctx context.Context, in *SetEmissionRequest, opts ...grpc.CallOption) (*SetEmissionResponse, error) {
	out := new(SetEmissionResponse)
	err := c.cc.Invoke(ctx, "/dcs.unit.v0.UnitService/SetEmission", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *unitServiceClient) Get(ctx context.Context, in *GetRequest, opts ...grpc.CallOption) (*GetResponse, error) {
	out := new(GetResponse)
	err := c.cc.Invoke(ctx, "/dcs.unit.v0.UnitService/Get", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *unitServiceClient) GetTransform(ctx context.Context, in *GetTransformRequest, opts ...grpc.CallOption) (*GetTransformResponse, error) {
	out := new(GetTransformResponse)
	err := c.cc.Invoke(ctx, "/dcs.unit.v0.UnitService/GetTransform", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *unitServiceClient) Destroy(ctx context.Context, in *DestroyRequest, opts ...grpc.CallOption) (*DestroyResponse, error) {
	out := new(DestroyResponse)
	err := c.cc.Invoke(ctx, "/dcs.unit.v0.UnitService/Destroy", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *unitServiceClient) GetDrawArgumentValue(ctx context.Context, in *GetDrawArgumentValueRequest, opts ...grpc.CallOption) (*GetDrawArgumentValueResponse, error) {
	out := new(GetDrawArgumentValueResponse)
	err := c.cc.Invoke(ctx, "/dcs.unit.v0.UnitService/GetDrawArgumentValue", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// UnitServiceServer is the server API for UnitService service.
// All implementations must embed UnimplementedUnitServiceServer
// for forward compatibility
type UnitServiceServer interface {
	// https://wiki.hoggitworld.com/view/DCS_func_getRadar
	GetRadar(context.Context, *GetRadarRequest) (*GetRadarResponse, error)
	// https://wiki.hoggitworld.com/view/DCS_func_getPoint
	GetPosition(context.Context, *GetPositionRequest) (*GetPositionResponse, error)
	// https://wiki.hoggitworld.com/view/DCS_func_getPlayerName
	GetPlayerName(context.Context, *GetPlayerNameRequest) (*GetPlayerNameResponse, error)
	GetDescriptor(context.Context, *GetDescriptorRequest) (*GetDescriptorResponse, error)
	// https://wiki.hoggitworld.com/view/DCS_func_enableEmission
	SetEmission(context.Context, *SetEmissionRequest) (*SetEmissionResponse, error)
	// https://wiki.hoggitworld.com/view/DCS_func_getByName
	Get(context.Context, *GetRequest) (*GetResponse, error)
	// *
	// Get information about the unit in 3D space, including its position,
	// orientation and velocity.
	GetTransform(context.Context, *GetTransformRequest) (*GetTransformResponse, error)
	// https://wiki.hoggitworld.com/view/DCS_func_destroy
	Destroy(context.Context, *DestroyRequest) (*DestroyResponse, error)
	// https://wiki.hoggitworld.com/view/DCS_func_getDrawArgumentValue
	GetDrawArgumentValue(context.Context, *GetDrawArgumentValueRequest) (*GetDrawArgumentValueResponse, error)
	mustEmbedUnimplementedUnitServiceServer()
}

// UnimplementedUnitServiceServer must be embedded to have forward compatible implementations.
type UnimplementedUnitServiceServer struct {
}

func (UnimplementedUnitServiceServer) GetRadar(context.Context, *GetRadarRequest) (*GetRadarResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRadar not implemented")
}
func (UnimplementedUnitServiceServer) GetPosition(context.Context, *GetPositionRequest) (*GetPositionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPosition not implemented")
}
func (UnimplementedUnitServiceServer) GetPlayerName(context.Context, *GetPlayerNameRequest) (*GetPlayerNameResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPlayerName not implemented")
}
func (UnimplementedUnitServiceServer) GetDescriptor(context.Context, *GetDescriptorRequest) (*GetDescriptorResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDescriptor not implemented")
}
func (UnimplementedUnitServiceServer) SetEmission(context.Context, *SetEmissionRequest) (*SetEmissionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetEmission not implemented")
}
func (UnimplementedUnitServiceServer) Get(context.Context, *GetRequest) (*GetResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Get not implemented")
}
func (UnimplementedUnitServiceServer) GetTransform(context.Context, *GetTransformRequest) (*GetTransformResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTransform not implemented")
}
func (UnimplementedUnitServiceServer) Destroy(context.Context, *DestroyRequest) (*DestroyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Destroy not implemented")
}
func (UnimplementedUnitServiceServer) GetDrawArgumentValue(context.Context, *GetDrawArgumentValueRequest) (*GetDrawArgumentValueResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDrawArgumentValue not implemented")
}
func (UnimplementedUnitServiceServer) mustEmbedUnimplementedUnitServiceServer() {}

// UnsafeUnitServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to UnitServiceServer will
// result in compilation errors.
type UnsafeUnitServiceServer interface {
	mustEmbedUnimplementedUnitServiceServer()
}

func RegisterUnitServiceServer(s grpc.ServiceRegistrar, srv UnitServiceServer) {
	s.RegisterService(&UnitService_ServiceDesc, srv)
}

func _UnitService_GetRadar_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRadarRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UnitServiceServer).GetRadar(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dcs.unit.v0.UnitService/GetRadar",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UnitServiceServer).GetRadar(ctx, req.(*GetRadarRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UnitService_GetPosition_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPositionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UnitServiceServer).GetPosition(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dcs.unit.v0.UnitService/GetPosition",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UnitServiceServer).GetPosition(ctx, req.(*GetPositionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UnitService_GetPlayerName_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPlayerNameRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UnitServiceServer).GetPlayerName(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dcs.unit.v0.UnitService/GetPlayerName",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UnitServiceServer).GetPlayerName(ctx, req.(*GetPlayerNameRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UnitService_GetDescriptor_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetDescriptorRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UnitServiceServer).GetDescriptor(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dcs.unit.v0.UnitService/GetDescriptor",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UnitServiceServer).GetDescriptor(ctx, req.(*GetDescriptorRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UnitService_SetEmission_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetEmissionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UnitServiceServer).SetEmission(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dcs.unit.v0.UnitService/SetEmission",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UnitServiceServer).SetEmission(ctx, req.(*SetEmissionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UnitService_Get_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UnitServiceServer).Get(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dcs.unit.v0.UnitService/Get",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UnitServiceServer).Get(ctx, req.(*GetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UnitService_GetTransform_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTransformRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UnitServiceServer).GetTransform(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dcs.unit.v0.UnitService/GetTransform",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UnitServiceServer).GetTransform(ctx, req.(*GetTransformRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UnitService_Destroy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DestroyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UnitServiceServer).Destroy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dcs.unit.v0.UnitService/Destroy",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UnitServiceServer).Destroy(ctx, req.(*DestroyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UnitService_GetDrawArgumentValue_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetDrawArgumentValueRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UnitServiceServer).GetDrawArgumentValue(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dcs.unit.v0.UnitService/GetDrawArgumentValue",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UnitServiceServer).GetDrawArgumentValue(ctx, req.(*GetDrawArgumentValueRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// UnitService_ServiceDesc is the grpc.ServiceDesc for UnitService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var UnitService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "dcs.unit.v0.UnitService",
	HandlerType: (*UnitServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetRadar",
			Handler:    _UnitService_GetRadar_Handler,
		},
		{
			MethodName: "GetPosition",
			Handler:    _UnitService_GetPosition_Handler,
		},
		{
			MethodName: "GetPlayerName",
			Handler:    _UnitService_GetPlayerName_Handler,
		},
		{
			MethodName: "GetDescriptor",
			Handler:    _UnitService_GetDescriptor_Handler,
		},
		{
			MethodName: "SetEmission",
			Handler:    _UnitService_SetEmission_Handler,
		},
		{
			MethodName: "Get",
			Handler:    _UnitService_Get_Handler,
		},
		{
			MethodName: "GetTransform",
			Handler:    _UnitService_GetTransform_Handler,
		},
		{
			MethodName: "Destroy",
			Handler:    _UnitService_Destroy_Handler,
		},
		{
			MethodName: "GetDrawArgumentValue",
			Handler:    _UnitService_GetDrawArgumentValue_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "dcs/unit/v0/unit.proto",
}
