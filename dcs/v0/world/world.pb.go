// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.26.0
// 	protoc        v3.19.2
// source: dcs/world/v0/world.proto

package world

import (
	common "github.com/DCS-gRPC/go-bindings/dcs/v0/common"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type GetAirbasesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Coalition common.Coalition `protobuf:"varint,1,opt,name=coalition,proto3,enum=dcs.common.v0.Coalition" json:"coalition,omitempty"`
}

func (x *GetAirbasesRequest) Reset() {
	*x = GetAirbasesRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dcs_world_v0_world_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetAirbasesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetAirbasesRequest) ProtoMessage() {}

func (x *GetAirbasesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_dcs_world_v0_world_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetAirbasesRequest.ProtoReflect.Descriptor instead.
func (*GetAirbasesRequest) Descriptor() ([]byte, []int) {
	return file_dcs_world_v0_world_proto_rawDescGZIP(), []int{0}
}

func (x *GetAirbasesRequest) GetCoalition() common.Coalition {
	if x != nil {
		return x.Coalition
	}
	return common.Coalition_COALITION_ALL
}

type GetAirbasesResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Airbases []*common.Airbase `protobuf:"bytes,1,rep,name=airbases,proto3" json:"airbases,omitempty"`
}

func (x *GetAirbasesResponse) Reset() {
	*x = GetAirbasesResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dcs_world_v0_world_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetAirbasesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetAirbasesResponse) ProtoMessage() {}

func (x *GetAirbasesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_dcs_world_v0_world_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetAirbasesResponse.ProtoReflect.Descriptor instead.
func (*GetAirbasesResponse) Descriptor() ([]byte, []int) {
	return file_dcs_world_v0_world_proto_rawDescGZIP(), []int{1}
}

func (x *GetAirbasesResponse) GetAirbases() []*common.Airbase {
	if x != nil {
		return x.Airbases
	}
	return nil
}

type GetMarkPanelsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *GetMarkPanelsRequest) Reset() {
	*x = GetMarkPanelsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dcs_world_v0_world_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetMarkPanelsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetMarkPanelsRequest) ProtoMessage() {}

func (x *GetMarkPanelsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_dcs_world_v0_world_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetMarkPanelsRequest.ProtoReflect.Descriptor instead.
func (*GetMarkPanelsRequest) Descriptor() ([]byte, []int) {
	return file_dcs_world_v0_world_proto_rawDescGZIP(), []int{2}
}

type GetMarkPanelsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MarkPanels []*common.MarkPanel `protobuf:"bytes,1,rep,name=mark_panels,json=markPanels,proto3" json:"mark_panels,omitempty"`
}

func (x *GetMarkPanelsResponse) Reset() {
	*x = GetMarkPanelsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dcs_world_v0_world_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetMarkPanelsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetMarkPanelsResponse) ProtoMessage() {}

func (x *GetMarkPanelsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_dcs_world_v0_world_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetMarkPanelsResponse.ProtoReflect.Descriptor instead.
func (*GetMarkPanelsResponse) Descriptor() ([]byte, []int) {
	return file_dcs_world_v0_world_proto_rawDescGZIP(), []int{3}
}

func (x *GetMarkPanelsResponse) GetMarkPanels() []*common.MarkPanel {
	if x != nil {
		return x.MarkPanels
	}
	return nil
}

var File_dcs_world_v0_world_proto protoreflect.FileDescriptor

var file_dcs_world_v0_world_proto_rawDesc = []byte{
	0x0a, 0x18, 0x64, 0x63, 0x73, 0x2f, 0x77, 0x6f, 0x72, 0x6c, 0x64, 0x2f, 0x76, 0x30, 0x2f, 0x77,
	0x6f, 0x72, 0x6c, 0x64, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0c, 0x64, 0x63, 0x73, 0x2e,
	0x77, 0x6f, 0x72, 0x6c, 0x64, 0x2e, 0x76, 0x30, 0x1a, 0x1a, 0x64, 0x63, 0x73, 0x2f, 0x63, 0x6f,
	0x6d, 0x6d, 0x6f, 0x6e, 0x2f, 0x76, 0x30, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x22, 0x4c, 0x0a, 0x12, 0x47, 0x65, 0x74, 0x41, 0x69, 0x72, 0x62, 0x61,
	0x73, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x36, 0x0a, 0x09, 0x63, 0x6f,
	0x61, 0x6c, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x18, 0x2e,
	0x64, 0x63, 0x73, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x30, 0x2e, 0x43, 0x6f,
	0x61, 0x6c, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x63, 0x6f, 0x61, 0x6c, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x22, 0x49, 0x0a, 0x13, 0x47, 0x65, 0x74, 0x41, 0x69, 0x72, 0x62, 0x61, 0x73, 0x65,
	0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x32, 0x0a, 0x08, 0x61, 0x69, 0x72,
	0x62, 0x61, 0x73, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x64, 0x63,
	0x73, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x30, 0x2e, 0x41, 0x69, 0x72, 0x62,
	0x61, 0x73, 0x65, 0x52, 0x08, 0x61, 0x69, 0x72, 0x62, 0x61, 0x73, 0x65, 0x73, 0x22, 0x16, 0x0a,
	0x14, 0x47, 0x65, 0x74, 0x4d, 0x61, 0x72, 0x6b, 0x50, 0x61, 0x6e, 0x65, 0x6c, 0x73, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x52, 0x0a, 0x15, 0x47, 0x65, 0x74, 0x4d, 0x61, 0x72, 0x6b,
	0x50, 0x61, 0x6e, 0x65, 0x6c, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x39,
	0x0a, 0x0b, 0x6d, 0x61, 0x72, 0x6b, 0x5f, 0x70, 0x61, 0x6e, 0x65, 0x6c, 0x73, 0x18, 0x01, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x64, 0x63, 0x73, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e,
	0x2e, 0x76, 0x30, 0x2e, 0x4d, 0x61, 0x72, 0x6b, 0x50, 0x61, 0x6e, 0x65, 0x6c, 0x52, 0x0a, 0x6d,
	0x61, 0x72, 0x6b, 0x50, 0x61, 0x6e, 0x65, 0x6c, 0x73, 0x32, 0xc0, 0x01, 0x0a, 0x0c, 0x57, 0x6f,
	0x72, 0x6c, 0x64, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x54, 0x0a, 0x0b, 0x47, 0x65,
	0x74, 0x41, 0x69, 0x72, 0x62, 0x61, 0x73, 0x65, 0x73, 0x12, 0x20, 0x2e, 0x64, 0x63, 0x73, 0x2e,
	0x77, 0x6f, 0x72, 0x6c, 0x64, 0x2e, 0x76, 0x30, 0x2e, 0x47, 0x65, 0x74, 0x41, 0x69, 0x72, 0x62,
	0x61, 0x73, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x21, 0x2e, 0x64, 0x63,
	0x73, 0x2e, 0x77, 0x6f, 0x72, 0x6c, 0x64, 0x2e, 0x76, 0x30, 0x2e, 0x47, 0x65, 0x74, 0x41, 0x69,
	0x72, 0x62, 0x61, 0x73, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00,
	0x12, 0x5a, 0x0a, 0x0d, 0x47, 0x65, 0x74, 0x4d, 0x61, 0x72, 0x6b, 0x50, 0x61, 0x6e, 0x65, 0x6c,
	0x73, 0x12, 0x22, 0x2e, 0x64, 0x63, 0x73, 0x2e, 0x77, 0x6f, 0x72, 0x6c, 0x64, 0x2e, 0x76, 0x30,
	0x2e, 0x47, 0x65, 0x74, 0x4d, 0x61, 0x72, 0x6b, 0x50, 0x61, 0x6e, 0x65, 0x6c, 0x73, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x23, 0x2e, 0x64, 0x63, 0x73, 0x2e, 0x77, 0x6f, 0x72, 0x6c,
	0x64, 0x2e, 0x76, 0x30, 0x2e, 0x47, 0x65, 0x74, 0x4d, 0x61, 0x72, 0x6b, 0x50, 0x61, 0x6e, 0x65,
	0x6c, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x42, 0x4f, 0x5a, 0x2c,
	0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x44, 0x43, 0x53, 0x2d, 0x67,
	0x52, 0x50, 0x43, 0x2f, 0x67, 0x6f, 0x2d, 0x62, 0x69, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x73, 0x2f,
	0x64, 0x63, 0x73, 0x2f, 0x76, 0x30, 0x2f, 0x77, 0x6f, 0x72, 0x6c, 0x64, 0xaa, 0x02, 0x1e, 0x52,
	0x75, 0x72, 0x6f, 0x75, 0x6e, 0x69, 0x4a, 0x6f, 0x6e, 0x65, 0x73, 0x2e, 0x44, 0x63, 0x73, 0x2e,
	0x47, 0x72, 0x70, 0x63, 0x2e, 0x56, 0x30, 0x2e, 0x57, 0x6f, 0x72, 0x6c, 0x64, 0x62, 0x06, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_dcs_world_v0_world_proto_rawDescOnce sync.Once
	file_dcs_world_v0_world_proto_rawDescData = file_dcs_world_v0_world_proto_rawDesc
)

func file_dcs_world_v0_world_proto_rawDescGZIP() []byte {
	file_dcs_world_v0_world_proto_rawDescOnce.Do(func() {
		file_dcs_world_v0_world_proto_rawDescData = protoimpl.X.CompressGZIP(file_dcs_world_v0_world_proto_rawDescData)
	})
	return file_dcs_world_v0_world_proto_rawDescData
}

var file_dcs_world_v0_world_proto_msgTypes = make([]protoimpl.MessageInfo, 4)
var file_dcs_world_v0_world_proto_goTypes = []interface{}{
	(*GetAirbasesRequest)(nil),    // 0: dcs.world.v0.GetAirbasesRequest
	(*GetAirbasesResponse)(nil),   // 1: dcs.world.v0.GetAirbasesResponse
	(*GetMarkPanelsRequest)(nil),  // 2: dcs.world.v0.GetMarkPanelsRequest
	(*GetMarkPanelsResponse)(nil), // 3: dcs.world.v0.GetMarkPanelsResponse
	(common.Coalition)(0),         // 4: dcs.common.v0.Coalition
	(*common.Airbase)(nil),        // 5: dcs.common.v0.Airbase
	(*common.MarkPanel)(nil),      // 6: dcs.common.v0.MarkPanel
}
var file_dcs_world_v0_world_proto_depIdxs = []int32{
	4, // 0: dcs.world.v0.GetAirbasesRequest.coalition:type_name -> dcs.common.v0.Coalition
	5, // 1: dcs.world.v0.GetAirbasesResponse.airbases:type_name -> dcs.common.v0.Airbase
	6, // 2: dcs.world.v0.GetMarkPanelsResponse.mark_panels:type_name -> dcs.common.v0.MarkPanel
	0, // 3: dcs.world.v0.WorldService.GetAirbases:input_type -> dcs.world.v0.GetAirbasesRequest
	2, // 4: dcs.world.v0.WorldService.GetMarkPanels:input_type -> dcs.world.v0.GetMarkPanelsRequest
	1, // 5: dcs.world.v0.WorldService.GetAirbases:output_type -> dcs.world.v0.GetAirbasesResponse
	3, // 6: dcs.world.v0.WorldService.GetMarkPanels:output_type -> dcs.world.v0.GetMarkPanelsResponse
	5, // [5:7] is the sub-list for method output_type
	3, // [3:5] is the sub-list for method input_type
	3, // [3:3] is the sub-list for extension type_name
	3, // [3:3] is the sub-list for extension extendee
	0, // [0:3] is the sub-list for field type_name
}

func init() { file_dcs_world_v0_world_proto_init() }
func file_dcs_world_v0_world_proto_init() {
	if File_dcs_world_v0_world_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_dcs_world_v0_world_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetAirbasesRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dcs_world_v0_world_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetAirbasesResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dcs_world_v0_world_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetMarkPanelsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dcs_world_v0_world_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetMarkPanelsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_dcs_world_v0_world_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   4,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_dcs_world_v0_world_proto_goTypes,
		DependencyIndexes: file_dcs_world_v0_world_proto_depIdxs,
		MessageInfos:      file_dcs_world_v0_world_proto_msgTypes,
	}.Build()
	File_dcs_world_v0_world_proto = out.File
	file_dcs_world_v0_world_proto_rawDesc = nil
	file_dcs_world_v0_world_proto_goTypes = nil
	file_dcs_world_v0_world_proto_depIdxs = nil
}
