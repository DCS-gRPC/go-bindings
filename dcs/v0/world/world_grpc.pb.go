// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.12
// source: dcs/world/v0/world.proto

package world

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// WorldServiceClient is the client API for WorldService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type WorldServiceClient interface {
	// https://wiki.hoggitworld.com/view/DCS_func_getAirbases
	GetAirbases(ctx context.Context, in *GetAirbasesRequest, opts ...grpc.CallOption) (*GetAirbasesResponse, error)
	// https://wiki.hoggitworld.com/view/DCS_func_getMarkPanels
	GetMarkPanels(ctx context.Context, in *GetMarkPanelsRequest, opts ...grpc.CallOption) (*GetMarkPanelsResponse, error)
	// Returns the theatre (Map name) of the mission
	GetTheatre(ctx context.Context, in *GetTheatreRequest, opts ...grpc.CallOption) (*GetTheatreResponse, error)
}

type worldServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewWorldServiceClient(cc grpc.ClientConnInterface) WorldServiceClient {
	return &worldServiceClient{cc}
}

func (c *worldServiceClient) GetAirbases(ctx context.Context, in *GetAirbasesRequest, opts ...grpc.CallOption) (*GetAirbasesResponse, error) {
	out := new(GetAirbasesResponse)
	err := c.cc.Invoke(ctx, "/dcs.world.v0.WorldService/GetAirbases", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *worldServiceClient) GetMarkPanels(ctx context.Context, in *GetMarkPanelsRequest, opts ...grpc.CallOption) (*GetMarkPanelsResponse, error) {
	out := new(GetMarkPanelsResponse)
	err := c.cc.Invoke(ctx, "/dcs.world.v0.WorldService/GetMarkPanels", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *worldServiceClient) GetTheatre(ctx context.Context, in *GetTheatreRequest, opts ...grpc.CallOption) (*GetTheatreResponse, error) {
	out := new(GetTheatreResponse)
	err := c.cc.Invoke(ctx, "/dcs.world.v0.WorldService/GetTheatre", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// WorldServiceServer is the server API for WorldService service.
// All implementations must embed UnimplementedWorldServiceServer
// for forward compatibility
type WorldServiceServer interface {
	// https://wiki.hoggitworld.com/view/DCS_func_getAirbases
	GetAirbases(context.Context, *GetAirbasesRequest) (*GetAirbasesResponse, error)
	// https://wiki.hoggitworld.com/view/DCS_func_getMarkPanels
	GetMarkPanels(context.Context, *GetMarkPanelsRequest) (*GetMarkPanelsResponse, error)
	// Returns the theatre (Map name) of the mission
	GetTheatre(context.Context, *GetTheatreRequest) (*GetTheatreResponse, error)
	mustEmbedUnimplementedWorldServiceServer()
}

// UnimplementedWorldServiceServer must be embedded to have forward compatible implementations.
type UnimplementedWorldServiceServer struct {
}

func (UnimplementedWorldServiceServer) GetAirbases(context.Context, *GetAirbasesRequest) (*GetAirbasesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAirbases not implemented")
}
func (UnimplementedWorldServiceServer) GetMarkPanels(context.Context, *GetMarkPanelsRequest) (*GetMarkPanelsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMarkPanels not implemented")
}
func (UnimplementedWorldServiceServer) GetTheatre(context.Context, *GetTheatreRequest) (*GetTheatreResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTheatre not implemented")
}
func (UnimplementedWorldServiceServer) mustEmbedUnimplementedWorldServiceServer() {}

// UnsafeWorldServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to WorldServiceServer will
// result in compilation errors.
type UnsafeWorldServiceServer interface {
	mustEmbedUnimplementedWorldServiceServer()
}

func RegisterWorldServiceServer(s grpc.ServiceRegistrar, srv WorldServiceServer) {
	s.RegisterService(&WorldService_ServiceDesc, srv)
}

func _WorldService_GetAirbases_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAirbasesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WorldServiceServer).GetAirbases(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dcs.world.v0.WorldService/GetAirbases",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WorldServiceServer).GetAirbases(ctx, req.(*GetAirbasesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WorldService_GetMarkPanels_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetMarkPanelsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WorldServiceServer).GetMarkPanels(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dcs.world.v0.WorldService/GetMarkPanels",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WorldServiceServer).GetMarkPanels(ctx, req.(*GetMarkPanelsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WorldService_GetTheatre_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTheatreRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WorldServiceServer).GetTheatre(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dcs.world.v0.WorldService/GetTheatre",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WorldServiceServer).GetTheatre(ctx, req.(*GetTheatreRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// WorldService_ServiceDesc is the grpc.ServiceDesc for WorldService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var WorldService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "dcs.world.v0.WorldService",
	HandlerType: (*WorldServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetAirbases",
			Handler:    _WorldService_GetAirbases_Handler,
		},
		{
			MethodName: "GetMarkPanels",
			Handler:    _WorldService_GetMarkPanels_Handler,
		},
		{
			MethodName: "GetTheatre",
			Handler:    _WorldService_GetTheatre_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "dcs/world/v0/world.proto",
}
